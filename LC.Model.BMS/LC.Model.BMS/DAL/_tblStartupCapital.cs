
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.1.7.1)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace LC.Model.BMS.DAL
{
	public abstract class _tblStartupCapital : SqlClientEntity
	{
		public _tblStartupCapital()
		{
			this.QuerySource = "tblStartupCapital";
			this.MappingName = "tblStartupCapital";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tblStartupCapitalLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int PkStartupCapitalID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.PkStartupCapitalID, PkStartupCapitalID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tblStartupCapitalLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter PkStartupCapitalID
			{
				get
				{
					return new SqlParameter("@PkStartupCapitalID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter FkDepartmentAdminID
			{
				get
				{
					return new SqlParameter("@FkDepartmentAdminID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Amount
			{
				get
				{
					return new SqlParameter("@Amount", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter Note
			{
				get
				{
					return new SqlParameter("@Note", SqlDbType.NText, 1073741823);
				}
			}
			
			public static SqlParameter DCreatedDate
			{
				get
				{
					return new SqlParameter("@DCreatedDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter DModifiedDate
			{
				get
				{
					return new SqlParameter("@DModifiedDate", SqlDbType.DateTime, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string PkStartupCapitalID = "pkStartupCapitalID";
            public const string FkDepartmentAdminID = "fkDepartmentAdminID";
            public const string Amount = "Amount";
            public const string Note = "Note";
            public const string DCreatedDate = "dCreatedDate";
            public const string DModifiedDate = "dModifiedDate";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[PkStartupCapitalID] = _tblStartupCapital.PropertyNames.PkStartupCapitalID;
					ht[FkDepartmentAdminID] = _tblStartupCapital.PropertyNames.FkDepartmentAdminID;
					ht[Amount] = _tblStartupCapital.PropertyNames.Amount;
					ht[Note] = _tblStartupCapital.PropertyNames.Note;
					ht[DCreatedDate] = _tblStartupCapital.PropertyNames.DCreatedDate;
					ht[DModifiedDate] = _tblStartupCapital.PropertyNames.DModifiedDate;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string PkStartupCapitalID = "PkStartupCapitalID";
            public const string FkDepartmentAdminID = "FkDepartmentAdminID";
            public const string Amount = "Amount";
            public const string Note = "Note";
            public const string DCreatedDate = "DCreatedDate";
            public const string DModifiedDate = "DModifiedDate";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[PkStartupCapitalID] = _tblStartupCapital.ColumnNames.PkStartupCapitalID;
					ht[FkDepartmentAdminID] = _tblStartupCapital.ColumnNames.FkDepartmentAdminID;
					ht[Amount] = _tblStartupCapital.ColumnNames.Amount;
					ht[Note] = _tblStartupCapital.ColumnNames.Note;
					ht[DCreatedDate] = _tblStartupCapital.ColumnNames.DCreatedDate;
					ht[DModifiedDate] = _tblStartupCapital.ColumnNames.DModifiedDate;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string PkStartupCapitalID = "s_PkStartupCapitalID";
            public const string FkDepartmentAdminID = "s_FkDepartmentAdminID";
            public const string Amount = "s_Amount";
            public const string Note = "s_Note";
            public const string DCreatedDate = "s_DCreatedDate";
            public const string DModifiedDate = "s_DModifiedDate";

		}
		#endregion		
		
		#region Properties
	
		public virtual int PkStartupCapitalID
	    {
			get
	        {
				return base.Getint(ColumnNames.PkStartupCapitalID);
			}
			set
	        {
				base.Setint(ColumnNames.PkStartupCapitalID, value);
			}
		}

		public virtual int FkDepartmentAdminID
	    {
			get
	        {
				return base.Getint(ColumnNames.FkDepartmentAdminID);
			}
			set
	        {
				base.Setint(ColumnNames.FkDepartmentAdminID, value);
			}
		}

		public virtual double Amount
	    {
			get
	        {
				return base.Getdouble(ColumnNames.Amount);
			}
			set
	        {
				base.Setdouble(ColumnNames.Amount, value);
			}
		}

		public virtual string Note
	    {
			get
	        {
				return base.Getstring(ColumnNames.Note);
			}
			set
	        {
				base.Setstring(ColumnNames.Note, value);
			}
		}

		public virtual DateTime DCreatedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.DCreatedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.DCreatedDate, value);
			}
		}

		public virtual DateTime DModifiedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.DModifiedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.DModifiedDate, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_PkStartupCapitalID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PkStartupCapitalID) ? string.Empty : base.GetintAsString(ColumnNames.PkStartupCapitalID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PkStartupCapitalID);
				else
					this.PkStartupCapitalID = base.SetintAsString(ColumnNames.PkStartupCapitalID, value);
			}
		}

		public virtual string s_FkDepartmentAdminID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FkDepartmentAdminID) ? string.Empty : base.GetintAsString(ColumnNames.FkDepartmentAdminID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FkDepartmentAdminID);
				else
					this.FkDepartmentAdminID = base.SetintAsString(ColumnNames.FkDepartmentAdminID, value);
			}
		}

		public virtual string s_Amount
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Amount) ? string.Empty : base.GetdoubleAsString(ColumnNames.Amount);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Amount);
				else
					this.Amount = base.SetdoubleAsString(ColumnNames.Amount, value);
			}
		}

		public virtual string s_Note
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Note) ? string.Empty : base.GetstringAsString(ColumnNames.Note);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Note);
				else
					this.Note = base.SetstringAsString(ColumnNames.Note, value);
			}
		}

		public virtual string s_DCreatedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DCreatedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DCreatedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DCreatedDate);
				else
					this.DCreatedDate = base.SetDateTimeAsString(ColumnNames.DCreatedDate, value);
			}
		}

		public virtual string s_DModifiedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DModifiedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DModifiedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DModifiedDate);
				else
					this.DModifiedDate = base.SetDateTimeAsString(ColumnNames.DModifiedDate, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter PkStartupCapitalID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PkStartupCapitalID, Parameters.PkStartupCapitalID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FkDepartmentAdminID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FkDepartmentAdminID, Parameters.FkDepartmentAdminID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Amount
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Amount, Parameters.Amount);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Note
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Note, Parameters.Note);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DCreatedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DCreatedDate, Parameters.DCreatedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DModifiedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DModifiedDate, Parameters.DModifiedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter PkStartupCapitalID
		    {
				get
		        {
					if(_PkStartupCapitalID_W == null)
	        	    {
						_PkStartupCapitalID_W = TearOff.PkStartupCapitalID;
					}
					return _PkStartupCapitalID_W;
				}
			}

			public WhereParameter FkDepartmentAdminID
		    {
				get
		        {
					if(_FkDepartmentAdminID_W == null)
	        	    {
						_FkDepartmentAdminID_W = TearOff.FkDepartmentAdminID;
					}
					return _FkDepartmentAdminID_W;
				}
			}

			public WhereParameter Amount
		    {
				get
		        {
					if(_Amount_W == null)
	        	    {
						_Amount_W = TearOff.Amount;
					}
					return _Amount_W;
				}
			}

			public WhereParameter Note
		    {
				get
		        {
					if(_Note_W == null)
	        	    {
						_Note_W = TearOff.Note;
					}
					return _Note_W;
				}
			}

			public WhereParameter DCreatedDate
		    {
				get
		        {
					if(_DCreatedDate_W == null)
	        	    {
						_DCreatedDate_W = TearOff.DCreatedDate;
					}
					return _DCreatedDate_W;
				}
			}

			public WhereParameter DModifiedDate
		    {
				get
		        {
					if(_DModifiedDate_W == null)
	        	    {
						_DModifiedDate_W = TearOff.DModifiedDate;
					}
					return _DModifiedDate_W;
				}
			}

			private WhereParameter _PkStartupCapitalID_W = null;
			private WhereParameter _FkDepartmentAdminID_W = null;
			private WhereParameter _Amount_W = null;
			private WhereParameter _Note_W = null;
			private WhereParameter _DCreatedDate_W = null;
			private WhereParameter _DModifiedDate_W = null;

			public void WhereClauseReset()
			{
				_PkStartupCapitalID_W = null;
				_FkDepartmentAdminID_W = null;
				_Amount_W = null;
				_Note_W = null;
				_DCreatedDate_W = null;
				_DModifiedDate_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter PkStartupCapitalID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PkStartupCapitalID, Parameters.PkStartupCapitalID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FkDepartmentAdminID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FkDepartmentAdminID, Parameters.FkDepartmentAdminID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Amount
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Amount, Parameters.Amount);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Note
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Note, Parameters.Note);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DCreatedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DCreatedDate, Parameters.DCreatedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DModifiedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DModifiedDate, Parameters.DModifiedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter PkStartupCapitalID
		    {
				get
		        {
					if(_PkStartupCapitalID_W == null)
	        	    {
						_PkStartupCapitalID_W = TearOff.PkStartupCapitalID;
					}
					return _PkStartupCapitalID_W;
				}
			}

			public AggregateParameter FkDepartmentAdminID
		    {
				get
		        {
					if(_FkDepartmentAdminID_W == null)
	        	    {
						_FkDepartmentAdminID_W = TearOff.FkDepartmentAdminID;
					}
					return _FkDepartmentAdminID_W;
				}
			}

			public AggregateParameter Amount
		    {
				get
		        {
					if(_Amount_W == null)
	        	    {
						_Amount_W = TearOff.Amount;
					}
					return _Amount_W;
				}
			}

			public AggregateParameter Note
		    {
				get
		        {
					if(_Note_W == null)
	        	    {
						_Note_W = TearOff.Note;
					}
					return _Note_W;
				}
			}

			public AggregateParameter DCreatedDate
		    {
				get
		        {
					if(_DCreatedDate_W == null)
	        	    {
						_DCreatedDate_W = TearOff.DCreatedDate;
					}
					return _DCreatedDate_W;
				}
			}

			public AggregateParameter DModifiedDate
		    {
				get
		        {
					if(_DModifiedDate_W == null)
	        	    {
						_DModifiedDate_W = TearOff.DModifiedDate;
					}
					return _DModifiedDate_W;
				}
			}

			private AggregateParameter _PkStartupCapitalID_W = null;
			private AggregateParameter _FkDepartmentAdminID_W = null;
			private AggregateParameter _Amount_W = null;
			private AggregateParameter _Note_W = null;
			private AggregateParameter _DCreatedDate_W = null;
			private AggregateParameter _DModifiedDate_W = null;

			public void AggregateClauseReset()
			{
				_PkStartupCapitalID_W = null;
				_FkDepartmentAdminID_W = null;
				_Amount_W = null;
				_Note_W = null;
				_DCreatedDate_W = null;
				_DModifiedDate_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblStartupCapitalInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.PkStartupCapitalID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblStartupCapitalUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblStartupCapitalDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.PkStartupCapitalID);
			p.SourceColumn = ColumnNames.PkStartupCapitalID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.PkStartupCapitalID);
			p.SourceColumn = ColumnNames.PkStartupCapitalID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FkDepartmentAdminID);
			p.SourceColumn = ColumnNames.FkDepartmentAdminID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Amount);
			p.SourceColumn = ColumnNames.Amount;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Note);
			p.SourceColumn = ColumnNames.Note;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DCreatedDate);
			p.SourceColumn = ColumnNames.DCreatedDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DModifiedDate);
			p.SourceColumn = ColumnNames.DModifiedDate;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
