
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.1.7.1)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace LC.Model.BMS.DAL
{
    public abstract class _tblExpanses : SqlClientEntity
    {
        public _tblExpanses()
        {
            this.QuerySource = "tblExpanses";
            this.MappingName = "tblExpanses";

        }

        //=================================================================
        //  public Overrides void AddNew()
        //=================================================================
        //
        //=================================================================
        public override void AddNew()
        {
            base.AddNew();

        }


        public override void FlushData()
        {
            this._whereClause = null;
            this._aggregateClause = null;
            base.FlushData();
        }

        //=================================================================
        //  	public Function LoadAll() As Boolean
        //=================================================================
        //  Loads all of the records in the database, and sets the currentRow to the first row
        //=================================================================
        public bool LoadAll()
        {
            ListDictionary parameters = null;

            return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tblExpansesLoadAll]", parameters);
        }

        //=================================================================
        // public Overridable Function LoadByPrimaryKey()  As Boolean
        //=================================================================
        //  Loads a single row of via the primary key
        //=================================================================
        public virtual bool LoadByPrimaryKey(int PkExpanseID)
        {
            ListDictionary parameters = new ListDictionary();
            parameters.Add(Parameters.PkExpanseID, PkExpanseID);


            return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tblExpansesLoadByPrimaryKey]", parameters);
        }

        #region Parameters
        protected class Parameters
        {

            public static SqlParameter PkExpanseID
            {
                get
                {
                    return new SqlParameter("@PkExpanseID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter FkExpanseCategoryID
            {
                get
                {
                    return new SqlParameter("@FkExpanseCategoryID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter ExpanseAmount
            {
                get
                {
                    return new SqlParameter("@ExpanseAmount", SqlDbType.Float, 0);
                }
            }

            public static SqlParameter FkOrderID
            {
                get
                {
                    return new SqlParameter("@FkOrderID", SqlDbType.NVarChar, 50);
                }
            }

            public static SqlParameter BHasInvoice
            {
                get
                {
                    return new SqlParameter("@BHasInvoice", SqlDbType.Bit, 0);
                }
            }

            public static SqlParameter SInvoiceNumber
            {
                get
                {
                    return new SqlParameter("@SInvoiceNumber", SqlDbType.NVarChar, 100);
                }
            }

            public static SqlParameter BIsPaid
            {
                get
                {
                    return new SqlParameter("@BIsPaid", SqlDbType.Bit, 0);
                }
            }

            public static SqlParameter IComment
            {
                get
                {
                    return new SqlParameter("@IComment", SqlDbType.NText, 1073741823);
                }
            }

            public static SqlParameter DCreateDate
            {
                get
                {
                    return new SqlParameter("@DCreateDate", SqlDbType.DateTime, 0);
                }
            }

            public static SqlParameter DPaidDate
            {
                get
                {
                    return new SqlParameter("@DPaidDate", SqlDbType.DateTime, 0);
                }
            }

            public static SqlParameter FkByUserID
            {
                get
                {
                    return new SqlParameter("@FkByUserID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter Invoicedamount
            {
                get
                {
                    return new SqlParameter("@Invoicedamount", SqlDbType.Float, 0);
                }
            }

            public static SqlParameter Noninvoicedamount
            {
                get
                {
                    return new SqlParameter("@Noninvoicedamount", SqlDbType.Float, 0);
                }
            }

        }
        #endregion

        #region ColumnNames
        public class ColumnNames
        {
            public const string PkExpanseID = "pkExpanseID";
            public const string FkExpanseCategoryID = "fkExpanseCategoryID";
            public const string ExpanseAmount = "ExpanseAmount";
            public const string FkOrderID = "fkOrderID";
            public const string BHasInvoice = "bHasInvoice";
            public const string SInvoiceNumber = "sInvoiceNumber";
            public const string BIsPaid = "bIsPaid";
            public const string IComment = "iComment";
            public const string DCreateDate = "dCreateDate";
            public const string DPaidDate = "dPaidDate";
            public const string FkByUserID = "fkByUserID";
            public const string Invoicedamount = "Invoicedamount";
            public const string Noninvoicedamount = "Noninvoicedamount";

            static public string ToPropertyName(string columnName)
            {
                if (ht == null)
                {
                    ht = new Hashtable();

                    ht[PkExpanseID] = _tblExpanses.PropertyNames.PkExpanseID;
                    ht[FkExpanseCategoryID] = _tblExpanses.PropertyNames.FkExpanseCategoryID;
                    ht[ExpanseAmount] = _tblExpanses.PropertyNames.ExpanseAmount;
                    ht[FkOrderID] = _tblExpanses.PropertyNames.FkOrderID;
                    ht[BHasInvoice] = _tblExpanses.PropertyNames.BHasInvoice;
                    ht[SInvoiceNumber] = _tblExpanses.PropertyNames.SInvoiceNumber;
                    ht[BIsPaid] = _tblExpanses.PropertyNames.BIsPaid;
                    ht[IComment] = _tblExpanses.PropertyNames.IComment;
                    ht[DCreateDate] = _tblExpanses.PropertyNames.DCreateDate;
                    ht[DPaidDate] = _tblExpanses.PropertyNames.DPaidDate;
                    ht[FkByUserID] = _tblExpanses.PropertyNames.FkByUserID;
                    ht[Invoicedamount] = _tblExpanses.PropertyNames.Invoicedamount;
                    ht[Noninvoicedamount] = _tblExpanses.PropertyNames.Noninvoicedamount;

                }
                return (string)ht[columnName];
            }

            static private Hashtable ht = null;
        }
        #endregion

        #region PropertyNames
        public class PropertyNames
        {
            public const string PkExpanseID = "PkExpanseID";
            public const string FkExpanseCategoryID = "FkExpanseCategoryID";
            public const string ExpanseAmount = "ExpanseAmount";
            public const string FkOrderID = "FkOrderID";
            public const string BHasInvoice = "BHasInvoice";
            public const string SInvoiceNumber = "SInvoiceNumber";
            public const string BIsPaid = "BIsPaid";
            public const string IComment = "IComment";
            public const string DCreateDate = "DCreateDate";
            public const string DPaidDate = "DPaidDate";
            public const string FkByUserID = "FkByUserID";
            public const string Invoicedamount = "Invoicedamount";
            public const string Noninvoicedamount = "Noninvoicedamount";

            static public string ToColumnName(string propertyName)
            {
                if (ht == null)
                {
                    ht = new Hashtable();

                    ht[PkExpanseID] = _tblExpanses.ColumnNames.PkExpanseID;
                    ht[FkExpanseCategoryID] = _tblExpanses.ColumnNames.FkExpanseCategoryID;
                    ht[ExpanseAmount] = _tblExpanses.ColumnNames.ExpanseAmount;
                    ht[FkOrderID] = _tblExpanses.ColumnNames.FkOrderID;
                    ht[BHasInvoice] = _tblExpanses.ColumnNames.BHasInvoice;
                    ht[SInvoiceNumber] = _tblExpanses.ColumnNames.SInvoiceNumber;
                    ht[BIsPaid] = _tblExpanses.ColumnNames.BIsPaid;
                    ht[IComment] = _tblExpanses.ColumnNames.IComment;
                    ht[DCreateDate] = _tblExpanses.ColumnNames.DCreateDate;
                    ht[DPaidDate] = _tblExpanses.ColumnNames.DPaidDate;
                    ht[FkByUserID] = _tblExpanses.ColumnNames.FkByUserID;
                    ht[Invoicedamount] = _tblExpanses.ColumnNames.Invoicedamount;
                    ht[Noninvoicedamount] = _tblExpanses.ColumnNames.Noninvoicedamount;

                }
                return (string)ht[propertyName];
            }

            static private Hashtable ht = null;
        }
        #endregion

        #region StringPropertyNames
        public class StringPropertyNames
        {
            public const string PkExpanseID = "s_PkExpanseID";
            public const string FkExpanseCategoryID = "s_FkExpanseCategoryID";
            public const string ExpanseAmount = "s_ExpanseAmount";
            public const string FkOrderID = "s_FkOrderID";
            public const string BHasInvoice = "s_BHasInvoice";
            public const string SInvoiceNumber = "s_SInvoiceNumber";
            public const string BIsPaid = "s_BIsPaid";
            public const string IComment = "s_IComment";
            public const string DCreateDate = "s_DCreateDate";
            public const string DPaidDate = "s_DPaidDate";
            public const string FkByUserID = "s_FkByUserID";
            public const string Invoicedamount = "s_Invoicedamount";
            public const string Noninvoicedamount = "s_Noninvoicedamount";

        }
        #endregion

        #region Properties

        public virtual int PkExpanseID
        {
            get
            {
                return base.Getint(ColumnNames.PkExpanseID);
            }
            set
            {
                base.Setint(ColumnNames.PkExpanseID, value);
            }
        }

        public virtual int FkExpanseCategoryID
        {
            get
            {
                return base.Getint(ColumnNames.FkExpanseCategoryID);
            }
            set
            {
                base.Setint(ColumnNames.FkExpanseCategoryID, value);
            }
        }

        public virtual double ExpanseAmount
        {
            get
            {
                return base.Getdouble(ColumnNames.ExpanseAmount);
            }
            set
            {
                base.Setdouble(ColumnNames.ExpanseAmount, value);
            }
        }

        public virtual string FkOrderID
        {
            get
            {
                return base.Getstring(ColumnNames.FkOrderID);
            }
            set
            {
                base.Setstring(ColumnNames.FkOrderID, value);
            }
        }

        public virtual bool BHasInvoice
        {
            get
            {
                return base.Getbool(ColumnNames.BHasInvoice);
            }
            set
            {
                base.Setbool(ColumnNames.BHasInvoice, value);
            }
        }

        public virtual string SInvoiceNumber
        {
            get
            {
                return base.Getstring(ColumnNames.SInvoiceNumber);
            }
            set
            {
                base.Setstring(ColumnNames.SInvoiceNumber, value);
            }
        }

        public virtual bool BIsPaid
        {
            get
            {
                return base.Getbool(ColumnNames.BIsPaid);
            }
            set
            {
                base.Setbool(ColumnNames.BIsPaid, value);
            }
        }

        public virtual string IComment
        {
            get
            {
                return base.Getstring(ColumnNames.IComment);
            }
            set
            {
                base.Setstring(ColumnNames.IComment, value);
            }
        }

        public virtual DateTime DCreateDate
        {
            get
            {
                return base.GetDateTime(ColumnNames.DCreateDate);
            }
            set
            {
                base.SetDateTime(ColumnNames.DCreateDate, value);
            }
        }

        public virtual DateTime DPaidDate
        {
            get
            {
                return base.GetDateTime(ColumnNames.DPaidDate);
            }
            set
            {
                base.SetDateTime(ColumnNames.DPaidDate, value);
            }
        }

        public virtual int FkByUserID
        {
            get
            {
                return base.Getint(ColumnNames.FkByUserID);
            }
            set
            {
                base.Setint(ColumnNames.FkByUserID, value);
            }
        }

        public virtual double Invoicedamount
        {
            get
            {
                return base.Getdouble(ColumnNames.Invoicedamount);
            }
            set
            {
                base.Setdouble(ColumnNames.Invoicedamount, value);
            }
        }

        public virtual double Noninvoicedamount
        {
            get
            {
                return base.Getdouble(ColumnNames.Noninvoicedamount);
            }
            set
            {
                base.Setdouble(ColumnNames.Noninvoicedamount, value);
            }
        }


        #endregion

        #region String Properties

        public virtual string s_PkExpanseID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.PkExpanseID) ? string.Empty : base.GetintAsString(ColumnNames.PkExpanseID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.PkExpanseID);
                else
                    this.PkExpanseID = base.SetintAsString(ColumnNames.PkExpanseID, value);
            }
        }

        public virtual string s_FkExpanseCategoryID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.FkExpanseCategoryID) ? string.Empty : base.GetintAsString(ColumnNames.FkExpanseCategoryID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.FkExpanseCategoryID);
                else
                    this.FkExpanseCategoryID = base.SetintAsString(ColumnNames.FkExpanseCategoryID, value);
            }
        }

        public virtual string s_ExpanseAmount
        {
            get
            {
                return this.IsColumnNull(ColumnNames.ExpanseAmount) ? string.Empty : base.GetdoubleAsString(ColumnNames.ExpanseAmount);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.ExpanseAmount);
                else
                    this.ExpanseAmount = base.SetdoubleAsString(ColumnNames.ExpanseAmount, value);
            }
        }

        public virtual string s_FkOrderID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.FkOrderID) ? string.Empty : base.GetstringAsString(ColumnNames.FkOrderID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.FkOrderID);
                else
                    this.FkOrderID = base.SetstringAsString(ColumnNames.FkOrderID, value);
            }
        }

        public virtual string s_BHasInvoice
        {
            get
            {
                return this.IsColumnNull(ColumnNames.BHasInvoice) ? string.Empty : base.GetboolAsString(ColumnNames.BHasInvoice);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.BHasInvoice);
                else
                    this.BHasInvoice = base.SetboolAsString(ColumnNames.BHasInvoice, value);
            }
        }

        public virtual string s_SInvoiceNumber
        {
            get
            {
                return this.IsColumnNull(ColumnNames.SInvoiceNumber) ? string.Empty : base.GetstringAsString(ColumnNames.SInvoiceNumber);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.SInvoiceNumber);
                else
                    this.SInvoiceNumber = base.SetstringAsString(ColumnNames.SInvoiceNumber, value);
            }
        }

        public virtual string s_BIsPaid
        {
            get
            {
                return this.IsColumnNull(ColumnNames.BIsPaid) ? string.Empty : base.GetboolAsString(ColumnNames.BIsPaid);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.BIsPaid);
                else
                    this.BIsPaid = base.SetboolAsString(ColumnNames.BIsPaid, value);
            }
        }

        public virtual string s_IComment
        {
            get
            {
                return this.IsColumnNull(ColumnNames.IComment) ? string.Empty : base.GetstringAsString(ColumnNames.IComment);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.IComment);
                else
                    this.IComment = base.SetstringAsString(ColumnNames.IComment, value);
            }
        }

        public virtual string s_DCreateDate
        {
            get
            {
                return this.IsColumnNull(ColumnNames.DCreateDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DCreateDate);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.DCreateDate);
                else
                    this.DCreateDate = base.SetDateTimeAsString(ColumnNames.DCreateDate, value);
            }
        }

        public virtual string s_DPaidDate
        {
            get
            {
                return this.IsColumnNull(ColumnNames.DPaidDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DPaidDate);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.DPaidDate);
                else
                    this.DPaidDate = base.SetDateTimeAsString(ColumnNames.DPaidDate, value);
            }
        }

        public virtual string s_FkByUserID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.FkByUserID) ? string.Empty : base.GetintAsString(ColumnNames.FkByUserID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.FkByUserID);
                else
                    this.FkByUserID = base.SetintAsString(ColumnNames.FkByUserID, value);
            }
        }

        public virtual string s_Invoicedamount
        {
            get
            {
                return this.IsColumnNull(ColumnNames.Invoicedamount) ? string.Empty : base.GetdoubleAsString(ColumnNames.Invoicedamount);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.Invoicedamount);
                else
                    this.Invoicedamount = base.SetdoubleAsString(ColumnNames.Invoicedamount, value);
            }
        }

        public virtual string s_Noninvoicedamount
        {
            get
            {
                return this.IsColumnNull(ColumnNames.Noninvoicedamount) ? string.Empty : base.GetdoubleAsString(ColumnNames.Noninvoicedamount);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.Noninvoicedamount);
                else
                    this.Noninvoicedamount = base.SetdoubleAsString(ColumnNames.Noninvoicedamount, value);
            }
        }


        #endregion

        #region Where Clause
        public class WhereClause
        {
            public WhereClause(BusinessEntity entity)
            {
                this._entity = entity;
            }

            public TearOffWhereParameter TearOff
            {
                get
                {
                    if (_tearOff == null)
                    {
                        _tearOff = new TearOffWhereParameter(this);
                    }

                    return _tearOff;
                }
            }

            #region WhereParameter TearOff's
            public class TearOffWhereParameter
            {
                public TearOffWhereParameter(WhereClause clause)
                {
                    this._clause = clause;
                }


                public WhereParameter PkExpanseID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.PkExpanseID, Parameters.PkExpanseID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter FkExpanseCategoryID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.FkExpanseCategoryID, Parameters.FkExpanseCategoryID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter ExpanseAmount
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.ExpanseAmount, Parameters.ExpanseAmount);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter FkOrderID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.FkOrderID, Parameters.FkOrderID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter BHasInvoice
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.BHasInvoice, Parameters.BHasInvoice);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter SInvoiceNumber
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.SInvoiceNumber, Parameters.SInvoiceNumber);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter BIsPaid
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.BIsPaid, Parameters.BIsPaid);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter IComment
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.IComment, Parameters.IComment);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter DCreateDate
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.DCreateDate, Parameters.DCreateDate);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter DPaidDate
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.DPaidDate, Parameters.DPaidDate);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter FkByUserID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.FkByUserID, Parameters.FkByUserID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter Invoicedamount
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.Invoicedamount, Parameters.Invoicedamount);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter Noninvoicedamount
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.Noninvoicedamount, Parameters.Noninvoicedamount);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }


                private WhereClause _clause;
            }
            #endregion

            public WhereParameter PkExpanseID
            {
                get
                {
                    if (_PkExpanseID_W == null)
                    {
                        _PkExpanseID_W = TearOff.PkExpanseID;
                    }
                    return _PkExpanseID_W;
                }
            }

            public WhereParameter FkExpanseCategoryID
            {
                get
                {
                    if (_FkExpanseCategoryID_W == null)
                    {
                        _FkExpanseCategoryID_W = TearOff.FkExpanseCategoryID;
                    }
                    return _FkExpanseCategoryID_W;
                }
            }

            public WhereParameter ExpanseAmount
            {
                get
                {
                    if (_ExpanseAmount_W == null)
                    {
                        _ExpanseAmount_W = TearOff.ExpanseAmount;
                    }
                    return _ExpanseAmount_W;
                }
            }

            public WhereParameter FkOrderID
            {
                get
                {
                    if (_FkOrderID_W == null)
                    {
                        _FkOrderID_W = TearOff.FkOrderID;
                    }
                    return _FkOrderID_W;
                }
            }

            public WhereParameter BHasInvoice
            {
                get
                {
                    if (_BHasInvoice_W == null)
                    {
                        _BHasInvoice_W = TearOff.BHasInvoice;
                    }
                    return _BHasInvoice_W;
                }
            }

            public WhereParameter SInvoiceNumber
            {
                get
                {
                    if (_SInvoiceNumber_W == null)
                    {
                        _SInvoiceNumber_W = TearOff.SInvoiceNumber;
                    }
                    return _SInvoiceNumber_W;
                }
            }

            public WhereParameter BIsPaid
            {
                get
                {
                    if (_BIsPaid_W == null)
                    {
                        _BIsPaid_W = TearOff.BIsPaid;
                    }
                    return _BIsPaid_W;
                }
            }

            public WhereParameter IComment
            {
                get
                {
                    if (_IComment_W == null)
                    {
                        _IComment_W = TearOff.IComment;
                    }
                    return _IComment_W;
                }
            }

            public WhereParameter DCreateDate
            {
                get
                {
                    if (_DCreateDate_W == null)
                    {
                        _DCreateDate_W = TearOff.DCreateDate;
                    }
                    return _DCreateDate_W;
                }
            }

            public WhereParameter DPaidDate
            {
                get
                {
                    if (_DPaidDate_W == null)
                    {
                        _DPaidDate_W = TearOff.DPaidDate;
                    }
                    return _DPaidDate_W;
                }
            }

            public WhereParameter FkByUserID
            {
                get
                {
                    if (_FkByUserID_W == null)
                    {
                        _FkByUserID_W = TearOff.FkByUserID;
                    }
                    return _FkByUserID_W;
                }
            }

            public WhereParameter Invoicedamount
            {
                get
                {
                    if (_Invoicedamount_W == null)
                    {
                        _Invoicedamount_W = TearOff.Invoicedamount;
                    }
                    return _Invoicedamount_W;
                }
            }

            public WhereParameter Noninvoicedamount
            {
                get
                {
                    if (_Noninvoicedamount_W == null)
                    {
                        _Noninvoicedamount_W = TearOff.Noninvoicedamount;
                    }
                    return _Noninvoicedamount_W;
                }
            }

            private WhereParameter _PkExpanseID_W = null;
            private WhereParameter _FkExpanseCategoryID_W = null;
            private WhereParameter _ExpanseAmount_W = null;
            private WhereParameter _FkOrderID_W = null;
            private WhereParameter _BHasInvoice_W = null;
            private WhereParameter _SInvoiceNumber_W = null;
            private WhereParameter _BIsPaid_W = null;
            private WhereParameter _IComment_W = null;
            private WhereParameter _DCreateDate_W = null;
            private WhereParameter _DPaidDate_W = null;
            private WhereParameter _FkByUserID_W = null;
            private WhereParameter _Invoicedamount_W = null;
            private WhereParameter _Noninvoicedamount_W = null;

            public void WhereClauseReset()
            {
                _PkExpanseID_W = null;
                _FkExpanseCategoryID_W = null;
                _ExpanseAmount_W = null;
                _FkOrderID_W = null;
                _BHasInvoice_W = null;
                _SInvoiceNumber_W = null;
                _BIsPaid_W = null;
                _IComment_W = null;
                _DCreateDate_W = null;
                _DPaidDate_W = null;
                _FkByUserID_W = null;
                _Invoicedamount_W = null;
                _Noninvoicedamount_W = null;

                this._entity.Query.FlushWhereParameters();

            }

            private BusinessEntity _entity;
            private TearOffWhereParameter _tearOff;

        }

        public WhereClause Where
        {
            get
            {
                if (_whereClause == null)
                {
                    _whereClause = new WhereClause(this);
                }

                return _whereClause;
            }
        }

        private WhereClause _whereClause = null;
        #endregion

        #region Aggregate Clause
        public class AggregateClause
        {
            public AggregateClause(BusinessEntity entity)
            {
                this._entity = entity;
            }

            public TearOffAggregateParameter TearOff
            {
                get
                {
                    if (_tearOff == null)
                    {
                        _tearOff = new TearOffAggregateParameter(this);
                    }

                    return _tearOff;
                }
            }

            #region AggregateParameter TearOff's
            public class TearOffAggregateParameter
            {
                public TearOffAggregateParameter(AggregateClause clause)
                {
                    this._clause = clause;
                }


                public AggregateParameter PkExpanseID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.PkExpanseID, Parameters.PkExpanseID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter FkExpanseCategoryID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.FkExpanseCategoryID, Parameters.FkExpanseCategoryID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter ExpanseAmount
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.ExpanseAmount, Parameters.ExpanseAmount);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter FkOrderID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.FkOrderID, Parameters.FkOrderID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter BHasInvoice
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.BHasInvoice, Parameters.BHasInvoice);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter SInvoiceNumber
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.SInvoiceNumber, Parameters.SInvoiceNumber);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter BIsPaid
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.BIsPaid, Parameters.BIsPaid);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter IComment
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.IComment, Parameters.IComment);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter DCreateDate
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.DCreateDate, Parameters.DCreateDate);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter DPaidDate
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.DPaidDate, Parameters.DPaidDate);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter FkByUserID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.FkByUserID, Parameters.FkByUserID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter Invoicedamount
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.Invoicedamount, Parameters.Invoicedamount);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter Noninvoicedamount
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.Noninvoicedamount, Parameters.Noninvoicedamount);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }


                private AggregateClause _clause;
            }
            #endregion

            public AggregateParameter PkExpanseID
            {
                get
                {
                    if (_PkExpanseID_W == null)
                    {
                        _PkExpanseID_W = TearOff.PkExpanseID;
                    }
                    return _PkExpanseID_W;
                }
            }

            public AggregateParameter FkExpanseCategoryID
            {
                get
                {
                    if (_FkExpanseCategoryID_W == null)
                    {
                        _FkExpanseCategoryID_W = TearOff.FkExpanseCategoryID;
                    }
                    return _FkExpanseCategoryID_W;
                }
            }

            public AggregateParameter ExpanseAmount
            {
                get
                {
                    if (_ExpanseAmount_W == null)
                    {
                        _ExpanseAmount_W = TearOff.ExpanseAmount;
                    }
                    return _ExpanseAmount_W;
                }
            }

            public AggregateParameter FkOrderID
            {
                get
                {
                    if (_FkOrderID_W == null)
                    {
                        _FkOrderID_W = TearOff.FkOrderID;
                    }
                    return _FkOrderID_W;
                }
            }

            public AggregateParameter BHasInvoice
            {
                get
                {
                    if (_BHasInvoice_W == null)
                    {
                        _BHasInvoice_W = TearOff.BHasInvoice;
                    }
                    return _BHasInvoice_W;
                }
            }

            public AggregateParameter SInvoiceNumber
            {
                get
                {
                    if (_SInvoiceNumber_W == null)
                    {
                        _SInvoiceNumber_W = TearOff.SInvoiceNumber;
                    }
                    return _SInvoiceNumber_W;
                }
            }

            public AggregateParameter BIsPaid
            {
                get
                {
                    if (_BIsPaid_W == null)
                    {
                        _BIsPaid_W = TearOff.BIsPaid;
                    }
                    return _BIsPaid_W;
                }
            }

            public AggregateParameter IComment
            {
                get
                {
                    if (_IComment_W == null)
                    {
                        _IComment_W = TearOff.IComment;
                    }
                    return _IComment_W;
                }
            }

            public AggregateParameter DCreateDate
            {
                get
                {
                    if (_DCreateDate_W == null)
                    {
                        _DCreateDate_W = TearOff.DCreateDate;
                    }
                    return _DCreateDate_W;
                }
            }

            public AggregateParameter DPaidDate
            {
                get
                {
                    if (_DPaidDate_W == null)
                    {
                        _DPaidDate_W = TearOff.DPaidDate;
                    }
                    return _DPaidDate_W;
                }
            }

            public AggregateParameter FkByUserID
            {
                get
                {
                    if (_FkByUserID_W == null)
                    {
                        _FkByUserID_W = TearOff.FkByUserID;
                    }
                    return _FkByUserID_W;
                }
            }

            public AggregateParameter Invoicedamount
            {
                get
                {
                    if (_Invoicedamount_W == null)
                    {
                        _Invoicedamount_W = TearOff.Invoicedamount;
                    }
                    return _Invoicedamount_W;
                }
            }

            public AggregateParameter Noninvoicedamount
            {
                get
                {
                    if (_Noninvoicedamount_W == null)
                    {
                        _Noninvoicedamount_W = TearOff.Noninvoicedamount;
                    }
                    return _Noninvoicedamount_W;
                }
            }

            private AggregateParameter _PkExpanseID_W = null;
            private AggregateParameter _FkExpanseCategoryID_W = null;
            private AggregateParameter _ExpanseAmount_W = null;
            private AggregateParameter _FkOrderID_W = null;
            private AggregateParameter _BHasInvoice_W = null;
            private AggregateParameter _SInvoiceNumber_W = null;
            private AggregateParameter _BIsPaid_W = null;
            private AggregateParameter _IComment_W = null;
            private AggregateParameter _DCreateDate_W = null;
            private AggregateParameter _DPaidDate_W = null;
            private AggregateParameter _FkByUserID_W = null;
            private AggregateParameter _Invoicedamount_W = null;
            private AggregateParameter _Noninvoicedamount_W = null;

            public void AggregateClauseReset()
            {
                _PkExpanseID_W = null;
                _FkExpanseCategoryID_W = null;
                _ExpanseAmount_W = null;
                _FkOrderID_W = null;
                _BHasInvoice_W = null;
                _SInvoiceNumber_W = null;
                _BIsPaid_W = null;
                _IComment_W = null;
                _DCreateDate_W = null;
                _DPaidDate_W = null;
                _FkByUserID_W = null;
                _Invoicedamount_W = null;
                _Noninvoicedamount_W = null;

                this._entity.Query.FlushAggregateParameters();

            }

            private BusinessEntity _entity;
            private TearOffAggregateParameter _tearOff;

        }

        public AggregateClause Aggregate
        {
            get
            {
                if (_aggregateClause == null)
                {
                    _aggregateClause = new AggregateClause(this);
                }

                return _aggregateClause;
            }
        }

        private AggregateClause _aggregateClause = null;
        #endregion

        protected override IDbCommand GetInsertCommand()
        {

            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblExpansesInsert]";

            CreateParameters(cmd);

            SqlParameter p;
            p = cmd.Parameters[Parameters.PkExpanseID.ParameterName];
            p.Direction = ParameterDirection.Output;

            return cmd;
        }

        protected override IDbCommand GetUpdateCommand()
        {

            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblExpansesUpdate]";

            CreateParameters(cmd);

            return cmd;
        }

        protected override IDbCommand GetDeleteCommand()
        {

            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblExpansesDelete]";

            SqlParameter p;
            p = cmd.Parameters.Add(Parameters.PkExpanseID);
            p.SourceColumn = ColumnNames.PkExpanseID;
            p.SourceVersion = DataRowVersion.Current;


            return cmd;
        }

        private IDbCommand CreateParameters(SqlCommand cmd)
        {
            SqlParameter p;

            p = cmd.Parameters.Add(Parameters.PkExpanseID);
            p.SourceColumn = ColumnNames.PkExpanseID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.FkExpanseCategoryID);
            p.SourceColumn = ColumnNames.FkExpanseCategoryID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.ExpanseAmount);
            p.SourceColumn = ColumnNames.ExpanseAmount;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.FkOrderID);
            p.SourceColumn = ColumnNames.FkOrderID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.BHasInvoice);
            p.SourceColumn = ColumnNames.BHasInvoice;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.SInvoiceNumber);
            p.SourceColumn = ColumnNames.SInvoiceNumber;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.BIsPaid);
            p.SourceColumn = ColumnNames.BIsPaid;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.IComment);
            p.SourceColumn = ColumnNames.IComment;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.DCreateDate);
            p.SourceColumn = ColumnNames.DCreateDate;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.DPaidDate);
            p.SourceColumn = ColumnNames.DPaidDate;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.FkByUserID);
            p.SourceColumn = ColumnNames.FkByUserID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.Invoicedamount);
            p.SourceColumn = ColumnNames.Invoicedamount;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.Noninvoicedamount);
            p.SourceColumn = ColumnNames.Noninvoicedamount;
            p.SourceVersion = DataRowVersion.Current;


            return cmd;
        }
    }
}
