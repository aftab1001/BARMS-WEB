
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.1.7.1)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace LC.Model.BMS.DAL
{
    public abstract class _tblOrderInvoices : SqlClientEntity
    {
        public _tblOrderInvoices()
        {
            this.QuerySource = "tblOrderInvoices";
            this.MappingName = "tblOrderInvoices";

        }

        //=================================================================
        //  public Overrides void AddNew()
        //=================================================================
        //
        //=================================================================
        public override void AddNew()
        {
            base.AddNew();

        }


        public override void FlushData()
        {
            this._whereClause = null;
            this._aggregateClause = null;
            base.FlushData();
        }

        //=================================================================
        //  	public Function LoadAll() As Boolean
        //=================================================================
        //  Loads all of the records in the database, and sets the currentRow to the first row
        //=================================================================
        public bool LoadAll()
        {
            ListDictionary parameters = null;

            return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tblOrderInvoicesLoadAll]", parameters);
        }

        //=================================================================
        // public Overridable Function LoadByPrimaryKey()  As Boolean
        //=================================================================
        //  Loads a single row of via the primary key
        //=================================================================
        public virtual bool LoadByPrimaryKey(int PkOrderInvoiceID)
        {
            ListDictionary parameters = new ListDictionary();
            parameters.Add(Parameters.PkOrderInvoiceID, PkOrderInvoiceID);


            return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tblOrderInvoicesLoadByPrimaryKey]", parameters);
        }

        #region Parameters
        protected class Parameters
        {

            public static SqlParameter PkOrderInvoiceID
            {
                get
                {
                    return new SqlParameter("@PkOrderInvoiceID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter FkOrderID
            {
                get
                {
                    return new SqlParameter("@FkOrderID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter InvoiceNumber
            {
                get
                {
                    return new SqlParameter("@InvoiceNumber", SqlDbType.NVarChar, 100);
                }
            }

            public static SqlParameter InvoiceAmount
            {
                get
                {
                    return new SqlParameter("@InvoiceAmount", SqlDbType.Float, 0);
                }
            }

            public static SqlParameter NonInvoiceAmount
            {
                get
                {
                    return new SqlParameter("@NonInvoiceAmount", SqlDbType.Float, 0);
                }
            }

        }
        #endregion

        #region ColumnNames
        public class ColumnNames
        {
            public const string PkOrderInvoiceID = "pkOrderInvoiceID";
            public const string FkOrderID = "fkOrderID";
            public const string InvoiceNumber = "InvoiceNumber";
            public const string InvoiceAmount = "InvoiceAmount";
            public const string NonInvoiceAmount = "NonInvoiceAmount";

            static public string ToPropertyName(string columnName)
            {
                if (ht == null)
                {
                    ht = new Hashtable();

                    ht[PkOrderInvoiceID] = _tblOrderInvoices.PropertyNames.PkOrderInvoiceID;
                    ht[FkOrderID] = _tblOrderInvoices.PropertyNames.FkOrderID;
                    ht[InvoiceNumber] = _tblOrderInvoices.PropertyNames.InvoiceNumber;
                    ht[InvoiceAmount] = _tblOrderInvoices.PropertyNames.InvoiceAmount;
                    ht[NonInvoiceAmount] = _tblOrderInvoices.PropertyNames.NonInvoiceAmount;

                }
                return (string)ht[columnName];
            }

            static private Hashtable ht = null;
        }
        #endregion

        #region PropertyNames
        public class PropertyNames
        {
            public const string PkOrderInvoiceID = "PkOrderInvoiceID";
            public const string FkOrderID = "FkOrderID";
            public const string InvoiceNumber = "InvoiceNumber";
            public const string InvoiceAmount = "InvoiceAmount";
            public const string NonInvoiceAmount = "NonInvoiceAmount";

            static public string ToColumnName(string propertyName)
            {
                if (ht == null)
                {
                    ht = new Hashtable();

                    ht[PkOrderInvoiceID] = _tblOrderInvoices.ColumnNames.PkOrderInvoiceID;
                    ht[FkOrderID] = _tblOrderInvoices.ColumnNames.FkOrderID;
                    ht[InvoiceNumber] = _tblOrderInvoices.ColumnNames.InvoiceNumber;
                    ht[InvoiceAmount] = _tblOrderInvoices.ColumnNames.InvoiceAmount;
                    ht[NonInvoiceAmount] = _tblOrderInvoices.ColumnNames.NonInvoiceAmount;

                }
                return (string)ht[propertyName];
            }

            static private Hashtable ht = null;
        }
        #endregion

        #region StringPropertyNames
        public class StringPropertyNames
        {
            public const string PkOrderInvoiceID = "s_PkOrderInvoiceID";
            public const string FkOrderID = "s_FkOrderID";
            public const string InvoiceNumber = "s_InvoiceNumber";
            public const string InvoiceAmount = "s_InvoiceAmount";
            public const string NonInvoiceAmount = "s_NonInvoiceAmount";

        }
        #endregion

        #region Properties

        public virtual int PkOrderInvoiceID
        {
            get
            {
                return base.Getint(ColumnNames.PkOrderInvoiceID);
            }
            set
            {
                base.Setint(ColumnNames.PkOrderInvoiceID, value);
            }
        }

        public virtual int FkOrderID
        {
            get
            {
                return base.Getint(ColumnNames.FkOrderID);
            }
            set
            {
                base.Setint(ColumnNames.FkOrderID, value);
            }
        }

        public virtual string InvoiceNumber
        {
            get
            {
                return base.Getstring(ColumnNames.InvoiceNumber);
            }
            set
            {
                base.Setstring(ColumnNames.InvoiceNumber, value);
            }
        }

        public virtual double InvoiceAmount
        {
            get
            {
                return base.Getdouble(ColumnNames.InvoiceAmount);
            }
            set
            {
                base.Setdouble(ColumnNames.InvoiceAmount, value);
            }
        }

        public virtual double NonInvoiceAmount
        {
            get
            {
                return base.Getdouble(ColumnNames.NonInvoiceAmount);
            }
            set
            {
                base.Setdouble(ColumnNames.NonInvoiceAmount, value);
            }
        }


        #endregion

        #region String Properties

        public virtual string s_PkOrderInvoiceID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.PkOrderInvoiceID) ? string.Empty : base.GetintAsString(ColumnNames.PkOrderInvoiceID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.PkOrderInvoiceID);
                else
                    this.PkOrderInvoiceID = base.SetintAsString(ColumnNames.PkOrderInvoiceID, value);
            }
        }

        public virtual string s_FkOrderID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.FkOrderID) ? string.Empty : base.GetintAsString(ColumnNames.FkOrderID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.FkOrderID);
                else
                    this.FkOrderID = base.SetintAsString(ColumnNames.FkOrderID, value);
            }
        }

        public virtual string s_InvoiceNumber
        {
            get
            {
                return this.IsColumnNull(ColumnNames.InvoiceNumber) ? string.Empty : base.GetstringAsString(ColumnNames.InvoiceNumber);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.InvoiceNumber);
                else
                    this.InvoiceNumber = base.SetstringAsString(ColumnNames.InvoiceNumber, value);
            }
        }

        public virtual string s_InvoiceAmount
        {
            get
            {
                return this.IsColumnNull(ColumnNames.InvoiceAmount) ? string.Empty : base.GetdoubleAsString(ColumnNames.InvoiceAmount);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.InvoiceAmount);
                else
                    this.InvoiceAmount = base.SetdoubleAsString(ColumnNames.InvoiceAmount, value);
            }
        }

        public virtual string s_NonInvoiceAmount
        {
            get
            {
                return this.IsColumnNull(ColumnNames.NonInvoiceAmount) ? string.Empty : base.GetdoubleAsString(ColumnNames.NonInvoiceAmount);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.NonInvoiceAmount);
                else
                    this.NonInvoiceAmount = base.SetdoubleAsString(ColumnNames.NonInvoiceAmount, value);
            }
        }


        #endregion

        #region Where Clause
        public class WhereClause
        {
            public WhereClause(BusinessEntity entity)
            {
                this._entity = entity;
            }

            public TearOffWhereParameter TearOff
            {
                get
                {
                    if (_tearOff == null)
                    {
                        _tearOff = new TearOffWhereParameter(this);
                    }

                    return _tearOff;
                }
            }

            #region WhereParameter TearOff's
            public class TearOffWhereParameter
            {
                public TearOffWhereParameter(WhereClause clause)
                {
                    this._clause = clause;
                }


                public WhereParameter PkOrderInvoiceID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.PkOrderInvoiceID, Parameters.PkOrderInvoiceID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter FkOrderID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.FkOrderID, Parameters.FkOrderID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter InvoiceNumber
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.InvoiceNumber, Parameters.InvoiceNumber);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter InvoiceAmount
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.InvoiceAmount, Parameters.InvoiceAmount);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter NonInvoiceAmount
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.NonInvoiceAmount, Parameters.NonInvoiceAmount);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }


                private WhereClause _clause;
            }
            #endregion

            public WhereParameter PkOrderInvoiceID
            {
                get
                {
                    if (_PkOrderInvoiceID_W == null)
                    {
                        _PkOrderInvoiceID_W = TearOff.PkOrderInvoiceID;
                    }
                    return _PkOrderInvoiceID_W;
                }
            }

            public WhereParameter FkOrderID
            {
                get
                {
                    if (_FkOrderID_W == null)
                    {
                        _FkOrderID_W = TearOff.FkOrderID;
                    }
                    return _FkOrderID_W;
                }
            }

            public WhereParameter InvoiceNumber
            {
                get
                {
                    if (_InvoiceNumber_W == null)
                    {
                        _InvoiceNumber_W = TearOff.InvoiceNumber;
                    }
                    return _InvoiceNumber_W;
                }
            }

            public WhereParameter InvoiceAmount
            {
                get
                {
                    if (_InvoiceAmount_W == null)
                    {
                        _InvoiceAmount_W = TearOff.InvoiceAmount;
                    }
                    return _InvoiceAmount_W;
                }
            }

            public WhereParameter NonInvoiceAmount
            {
                get
                {
                    if (_NonInvoiceAmount_W == null)
                    {
                        _NonInvoiceAmount_W = TearOff.NonInvoiceAmount;
                    }
                    return _NonInvoiceAmount_W;
                }
            }

            private WhereParameter _PkOrderInvoiceID_W = null;
            private WhereParameter _FkOrderID_W = null;
            private WhereParameter _InvoiceNumber_W = null;
            private WhereParameter _InvoiceAmount_W = null;
            private WhereParameter _NonInvoiceAmount_W = null;

            public void WhereClauseReset()
            {
                _PkOrderInvoiceID_W = null;
                _FkOrderID_W = null;
                _InvoiceNumber_W = null;
                _InvoiceAmount_W = null;
                _NonInvoiceAmount_W = null;

                this._entity.Query.FlushWhereParameters();

            }

            private BusinessEntity _entity;
            private TearOffWhereParameter _tearOff;

        }

        public WhereClause Where
        {
            get
            {
                if (_whereClause == null)
                {
                    _whereClause = new WhereClause(this);
                }

                return _whereClause;
            }
        }

        private WhereClause _whereClause = null;
        #endregion

        #region Aggregate Clause
        public class AggregateClause
        {
            public AggregateClause(BusinessEntity entity)
            {
                this._entity = entity;
            }

            public TearOffAggregateParameter TearOff
            {
                get
                {
                    if (_tearOff == null)
                    {
                        _tearOff = new TearOffAggregateParameter(this);
                    }

                    return _tearOff;
                }
            }

            #region AggregateParameter TearOff's
            public class TearOffAggregateParameter
            {
                public TearOffAggregateParameter(AggregateClause clause)
                {
                    this._clause = clause;
                }


                public AggregateParameter PkOrderInvoiceID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.PkOrderInvoiceID, Parameters.PkOrderInvoiceID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter FkOrderID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.FkOrderID, Parameters.FkOrderID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter InvoiceNumber
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.InvoiceNumber, Parameters.InvoiceNumber);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter InvoiceAmount
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.InvoiceAmount, Parameters.InvoiceAmount);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter NonInvoiceAmount
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.NonInvoiceAmount, Parameters.NonInvoiceAmount);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }


                private AggregateClause _clause;
            }
            #endregion

            public AggregateParameter PkOrderInvoiceID
            {
                get
                {
                    if (_PkOrderInvoiceID_W == null)
                    {
                        _PkOrderInvoiceID_W = TearOff.PkOrderInvoiceID;
                    }
                    return _PkOrderInvoiceID_W;
                }
            }

            public AggregateParameter FkOrderID
            {
                get
                {
                    if (_FkOrderID_W == null)
                    {
                        _FkOrderID_W = TearOff.FkOrderID;
                    }
                    return _FkOrderID_W;
                }
            }

            public AggregateParameter InvoiceNumber
            {
                get
                {
                    if (_InvoiceNumber_W == null)
                    {
                        _InvoiceNumber_W = TearOff.InvoiceNumber;
                    }
                    return _InvoiceNumber_W;
                }
            }

            public AggregateParameter InvoiceAmount
            {
                get
                {
                    if (_InvoiceAmount_W == null)
                    {
                        _InvoiceAmount_W = TearOff.InvoiceAmount;
                    }
                    return _InvoiceAmount_W;
                }
            }

            public AggregateParameter NonInvoiceAmount
            {
                get
                {
                    if (_NonInvoiceAmount_W == null)
                    {
                        _NonInvoiceAmount_W = TearOff.NonInvoiceAmount;
                    }
                    return _NonInvoiceAmount_W;
                }
            }

            private AggregateParameter _PkOrderInvoiceID_W = null;
            private AggregateParameter _FkOrderID_W = null;
            private AggregateParameter _InvoiceNumber_W = null;
            private AggregateParameter _InvoiceAmount_W = null;
            private AggregateParameter _NonInvoiceAmount_W = null;

            public void AggregateClauseReset()
            {
                _PkOrderInvoiceID_W = null;
                _FkOrderID_W = null;
                _InvoiceNumber_W = null;
                _InvoiceAmount_W = null;
                _NonInvoiceAmount_W = null;

                this._entity.Query.FlushAggregateParameters();

            }

            private BusinessEntity _entity;
            private TearOffAggregateParameter _tearOff;

        }

        public AggregateClause Aggregate
        {
            get
            {
                if (_aggregateClause == null)
                {
                    _aggregateClause = new AggregateClause(this);
                }

                return _aggregateClause;
            }
        }

        private AggregateClause _aggregateClause = null;
        #endregion

        protected override IDbCommand GetInsertCommand()
        {

            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblOrderInvoicesInsert]";

            CreateParameters(cmd);

            SqlParameter p;
            p = cmd.Parameters[Parameters.PkOrderInvoiceID.ParameterName];
            p.Direction = ParameterDirection.Output;

            return cmd;
        }

        protected override IDbCommand GetUpdateCommand()
        {

            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblOrderInvoicesUpdate]";

            CreateParameters(cmd);

            return cmd;
        }

        protected override IDbCommand GetDeleteCommand()
        {

            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblOrderInvoicesDelete]";

            SqlParameter p;
            p = cmd.Parameters.Add(Parameters.PkOrderInvoiceID);
            p.SourceColumn = ColumnNames.PkOrderInvoiceID;
            p.SourceVersion = DataRowVersion.Current;


            return cmd;
        }

        private IDbCommand CreateParameters(SqlCommand cmd)
        {
            SqlParameter p;

            p = cmd.Parameters.Add(Parameters.PkOrderInvoiceID);
            p.SourceColumn = ColumnNames.PkOrderInvoiceID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.FkOrderID);
            p.SourceColumn = ColumnNames.FkOrderID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.InvoiceNumber);
            p.SourceColumn = ColumnNames.InvoiceNumber;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.InvoiceAmount);
            p.SourceColumn = ColumnNames.InvoiceAmount;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.NonInvoiceAmount);
            p.SourceColumn = ColumnNames.NonInvoiceAmount;
            p.SourceVersion = DataRowVersion.Current;


            return cmd;
        }
    }
}
