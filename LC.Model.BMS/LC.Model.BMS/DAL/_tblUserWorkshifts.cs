
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.1.7.1)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace LC.Model.BMS.DAL
{
	public abstract class _tblUserWorkshifts : SqlClientEntity
	{
		public _tblUserWorkshifts()
		{
			this.QuerySource = "tblUserWorkshifts";
			this.MappingName = "tblUserWorkshifts";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tblUserWorkshiftsLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int PkUserWorkshiftID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.PkUserWorkshiftID, PkUserWorkshiftID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tblUserWorkshiftsLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter PkUserWorkshiftID
			{
				get
				{
					return new SqlParameter("@PkUserWorkshiftID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter FkUserID
			{
				get
				{
					return new SqlParameter("@FkUserID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter IWeekNumber
			{
				get
				{
					return new SqlParameter("@IWeekNumber", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter IYear
			{
				get
				{
					return new SqlParameter("@IYear", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter DWeekStartDate
			{
				get
				{
					return new SqlParameter("@DWeekStartDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter DWeekEndDate
			{
				get
				{
					return new SqlParameter("@DWeekEndDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter IDayNumber
			{
				get
				{
					return new SqlParameter("@IDayNumber", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter SStartTime
			{
				get
				{
					return new SqlParameter("@SStartTime", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter SEndTime
			{
				get
				{
					return new SqlParameter("@SEndTime", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter FkSpecialityID
			{
				get
				{
					return new SqlParameter("@FkSpecialityID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter BIsOfDay
			{
				get
				{
					return new SqlParameter("@BIsOfDay", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter BOnTime
			{
				get
				{
					return new SqlParameter("@BOnTime", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter BLate
			{
				get
				{
					return new SqlParameter("@BLate", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter BLateHours
			{
				get
				{
					return new SqlParameter("@BLateHours", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Penalty
			{
				get
				{
					return new SqlParameter("@Penalty", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter Bonus
			{
				get
				{
					return new SqlParameter("@Bonus", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter Weekend
			{
				get
				{
					return new SqlParameter("@Weekend", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter SNotes
			{
				get
				{
					return new SqlParameter("@SNotes", SqlDbType.NVarChar, 150);
				}
			}
			
			public static SqlParameter DCreateDate
			{
				get
				{
					return new SqlParameter("@DCreateDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter DModifiedDate
			{
				get
				{
					return new SqlParameter("@DModifiedDate", SqlDbType.DateTime, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string PkUserWorkshiftID = "pkUserWorkshiftID";
            public const string FkUserID = "fkUserID";
            public const string IWeekNumber = "iWeekNumber";
            public const string IYear = "iYear";
            public const string DWeekStartDate = "dWeekStartDate";
            public const string DWeekEndDate = "dWeekEndDate";
            public const string IDayNumber = "iDayNumber";
            public const string SStartTime = "sStartTime";
            public const string SEndTime = "sEndTime";
            public const string FkSpecialityID = "fkSpecialityID";
            public const string BIsOfDay = "bIsOfDay";
            public const string BOnTime = "bOnTime";
            public const string BLate = "bLate";
            public const string BLateHours = "bLateHours";
            public const string Penalty = "Penalty";
            public const string Bonus = "Bonus";
            public const string Weekend = "Weekend";
            public const string SNotes = "sNotes";
            public const string DCreateDate = "dCreateDate";
            public const string DModifiedDate = "dModifiedDate";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[PkUserWorkshiftID] = _tblUserWorkshifts.PropertyNames.PkUserWorkshiftID;
					ht[FkUserID] = _tblUserWorkshifts.PropertyNames.FkUserID;
					ht[IWeekNumber] = _tblUserWorkshifts.PropertyNames.IWeekNumber;
					ht[IYear] = _tblUserWorkshifts.PropertyNames.IYear;
					ht[DWeekStartDate] = _tblUserWorkshifts.PropertyNames.DWeekStartDate;
					ht[DWeekEndDate] = _tblUserWorkshifts.PropertyNames.DWeekEndDate;
					ht[IDayNumber] = _tblUserWorkshifts.PropertyNames.IDayNumber;
					ht[SStartTime] = _tblUserWorkshifts.PropertyNames.SStartTime;
					ht[SEndTime] = _tblUserWorkshifts.PropertyNames.SEndTime;
					ht[FkSpecialityID] = _tblUserWorkshifts.PropertyNames.FkSpecialityID;
					ht[BIsOfDay] = _tblUserWorkshifts.PropertyNames.BIsOfDay;
					ht[BOnTime] = _tblUserWorkshifts.PropertyNames.BOnTime;
					ht[BLate] = _tblUserWorkshifts.PropertyNames.BLate;
					ht[BLateHours] = _tblUserWorkshifts.PropertyNames.BLateHours;
					ht[Penalty] = _tblUserWorkshifts.PropertyNames.Penalty;
					ht[Bonus] = _tblUserWorkshifts.PropertyNames.Bonus;
					ht[Weekend] = _tblUserWorkshifts.PropertyNames.Weekend;
					ht[SNotes] = _tblUserWorkshifts.PropertyNames.SNotes;
					ht[DCreateDate] = _tblUserWorkshifts.PropertyNames.DCreateDate;
					ht[DModifiedDate] = _tblUserWorkshifts.PropertyNames.DModifiedDate;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string PkUserWorkshiftID = "PkUserWorkshiftID";
            public const string FkUserID = "FkUserID";
            public const string IWeekNumber = "IWeekNumber";
            public const string IYear = "IYear";
            public const string DWeekStartDate = "DWeekStartDate";
            public const string DWeekEndDate = "DWeekEndDate";
            public const string IDayNumber = "IDayNumber";
            public const string SStartTime = "SStartTime";
            public const string SEndTime = "SEndTime";
            public const string FkSpecialityID = "FkSpecialityID";
            public const string BIsOfDay = "BIsOfDay";
            public const string BOnTime = "BOnTime";
            public const string BLate = "BLate";
            public const string BLateHours = "BLateHours";
            public const string Penalty = "Penalty";
            public const string Bonus = "Bonus";
            public const string Weekend = "Weekend";
            public const string SNotes = "SNotes";
            public const string DCreateDate = "DCreateDate";
            public const string DModifiedDate = "DModifiedDate";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[PkUserWorkshiftID] = _tblUserWorkshifts.ColumnNames.PkUserWorkshiftID;
					ht[FkUserID] = _tblUserWorkshifts.ColumnNames.FkUserID;
					ht[IWeekNumber] = _tblUserWorkshifts.ColumnNames.IWeekNumber;
					ht[IYear] = _tblUserWorkshifts.ColumnNames.IYear;
					ht[DWeekStartDate] = _tblUserWorkshifts.ColumnNames.DWeekStartDate;
					ht[DWeekEndDate] = _tblUserWorkshifts.ColumnNames.DWeekEndDate;
					ht[IDayNumber] = _tblUserWorkshifts.ColumnNames.IDayNumber;
					ht[SStartTime] = _tblUserWorkshifts.ColumnNames.SStartTime;
					ht[SEndTime] = _tblUserWorkshifts.ColumnNames.SEndTime;
					ht[FkSpecialityID] = _tblUserWorkshifts.ColumnNames.FkSpecialityID;
					ht[BIsOfDay] = _tblUserWorkshifts.ColumnNames.BIsOfDay;
					ht[BOnTime] = _tblUserWorkshifts.ColumnNames.BOnTime;
					ht[BLate] = _tblUserWorkshifts.ColumnNames.BLate;
					ht[BLateHours] = _tblUserWorkshifts.ColumnNames.BLateHours;
					ht[Penalty] = _tblUserWorkshifts.ColumnNames.Penalty;
					ht[Bonus] = _tblUserWorkshifts.ColumnNames.Bonus;
					ht[Weekend] = _tblUserWorkshifts.ColumnNames.Weekend;
					ht[SNotes] = _tblUserWorkshifts.ColumnNames.SNotes;
					ht[DCreateDate] = _tblUserWorkshifts.ColumnNames.DCreateDate;
					ht[DModifiedDate] = _tblUserWorkshifts.ColumnNames.DModifiedDate;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string PkUserWorkshiftID = "s_PkUserWorkshiftID";
            public const string FkUserID = "s_FkUserID";
            public const string IWeekNumber = "s_IWeekNumber";
            public const string IYear = "s_IYear";
            public const string DWeekStartDate = "s_DWeekStartDate";
            public const string DWeekEndDate = "s_DWeekEndDate";
            public const string IDayNumber = "s_IDayNumber";
            public const string SStartTime = "s_SStartTime";
            public const string SEndTime = "s_SEndTime";
            public const string FkSpecialityID = "s_FkSpecialityID";
            public const string BIsOfDay = "s_BIsOfDay";
            public const string BOnTime = "s_BOnTime";
            public const string BLate = "s_BLate";
            public const string BLateHours = "s_BLateHours";
            public const string Penalty = "s_Penalty";
            public const string Bonus = "s_Bonus";
            public const string Weekend = "s_Weekend";
            public const string SNotes = "s_SNotes";
            public const string DCreateDate = "s_DCreateDate";
            public const string DModifiedDate = "s_DModifiedDate";

		}
		#endregion		
		
		#region Properties
	
		public virtual int PkUserWorkshiftID
	    {
			get
	        {
				return base.Getint(ColumnNames.PkUserWorkshiftID);
			}
			set
	        {
				base.Setint(ColumnNames.PkUserWorkshiftID, value);
			}
		}

		public virtual int FkUserID
	    {
			get
	        {
				return base.Getint(ColumnNames.FkUserID);
			}
			set
	        {
				base.Setint(ColumnNames.FkUserID, value);
			}
		}

		public virtual int IWeekNumber
	    {
			get
	        {
				return base.Getint(ColumnNames.IWeekNumber);
			}
			set
	        {
				base.Setint(ColumnNames.IWeekNumber, value);
			}
		}

		public virtual int IYear
	    {
			get
	        {
				return base.Getint(ColumnNames.IYear);
			}
			set
	        {
				base.Setint(ColumnNames.IYear, value);
			}
		}

		public virtual DateTime DWeekStartDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.DWeekStartDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.DWeekStartDate, value);
			}
		}

		public virtual DateTime DWeekEndDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.DWeekEndDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.DWeekEndDate, value);
			}
		}

		public virtual int IDayNumber
	    {
			get
	        {
				return base.Getint(ColumnNames.IDayNumber);
			}
			set
	        {
				base.Setint(ColumnNames.IDayNumber, value);
			}
		}

		public virtual string SStartTime
	    {
			get
	        {
				return base.Getstring(ColumnNames.SStartTime);
			}
			set
	        {
				base.Setstring(ColumnNames.SStartTime, value);
			}
		}

		public virtual string SEndTime
	    {
			get
	        {
				return base.Getstring(ColumnNames.SEndTime);
			}
			set
	        {
				base.Setstring(ColumnNames.SEndTime, value);
			}
		}

		public virtual int FkSpecialityID
	    {
			get
	        {
				return base.Getint(ColumnNames.FkSpecialityID);
			}
			set
	        {
				base.Setint(ColumnNames.FkSpecialityID, value);
			}
		}

		public virtual bool BIsOfDay
	    {
			get
	        {
				return base.Getbool(ColumnNames.BIsOfDay);
			}
			set
	        {
				base.Setbool(ColumnNames.BIsOfDay, value);
			}
		}

		public virtual bool BOnTime
	    {
			get
	        {
				return base.Getbool(ColumnNames.BOnTime);
			}
			set
	        {
				base.Setbool(ColumnNames.BOnTime, value);
			}
		}

		public virtual bool BLate
	    {
			get
	        {
				return base.Getbool(ColumnNames.BLate);
			}
			set
	        {
				base.Setbool(ColumnNames.BLate, value);
			}
		}

		public virtual int BLateHours
	    {
			get
	        {
				return base.Getint(ColumnNames.BLateHours);
			}
			set
	        {
				base.Setint(ColumnNames.BLateHours, value);
			}
		}

		public virtual double Penalty
	    {
			get
	        {
				return base.Getdouble(ColumnNames.Penalty);
			}
			set
	        {
				base.Setdouble(ColumnNames.Penalty, value);
			}
		}

		public virtual double Bonus
	    {
			get
	        {
				return base.Getdouble(ColumnNames.Bonus);
			}
			set
	        {
				base.Setdouble(ColumnNames.Bonus, value);
			}
		}

		public virtual bool Weekend
	    {
			get
	        {
				return base.Getbool(ColumnNames.Weekend);
			}
			set
	        {
				base.Setbool(ColumnNames.Weekend, value);
			}
		}

		public virtual string SNotes
	    {
			get
	        {
				return base.Getstring(ColumnNames.SNotes);
			}
			set
	        {
				base.Setstring(ColumnNames.SNotes, value);
			}
		}

		public virtual DateTime DCreateDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.DCreateDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.DCreateDate, value);
			}
		}

		public virtual DateTime DModifiedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.DModifiedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.DModifiedDate, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_PkUserWorkshiftID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PkUserWorkshiftID) ? string.Empty : base.GetintAsString(ColumnNames.PkUserWorkshiftID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PkUserWorkshiftID);
				else
					this.PkUserWorkshiftID = base.SetintAsString(ColumnNames.PkUserWorkshiftID, value);
			}
		}

		public virtual string s_FkUserID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FkUserID) ? string.Empty : base.GetintAsString(ColumnNames.FkUserID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FkUserID);
				else
					this.FkUserID = base.SetintAsString(ColumnNames.FkUserID, value);
			}
		}

		public virtual string s_IWeekNumber
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IWeekNumber) ? string.Empty : base.GetintAsString(ColumnNames.IWeekNumber);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IWeekNumber);
				else
					this.IWeekNumber = base.SetintAsString(ColumnNames.IWeekNumber, value);
			}
		}

		public virtual string s_IYear
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IYear) ? string.Empty : base.GetintAsString(ColumnNames.IYear);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IYear);
				else
					this.IYear = base.SetintAsString(ColumnNames.IYear, value);
			}
		}

		public virtual string s_DWeekStartDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DWeekStartDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DWeekStartDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DWeekStartDate);
				else
					this.DWeekStartDate = base.SetDateTimeAsString(ColumnNames.DWeekStartDate, value);
			}
		}

		public virtual string s_DWeekEndDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DWeekEndDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DWeekEndDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DWeekEndDate);
				else
					this.DWeekEndDate = base.SetDateTimeAsString(ColumnNames.DWeekEndDate, value);
			}
		}

		public virtual string s_IDayNumber
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IDayNumber) ? string.Empty : base.GetintAsString(ColumnNames.IDayNumber);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IDayNumber);
				else
					this.IDayNumber = base.SetintAsString(ColumnNames.IDayNumber, value);
			}
		}

		public virtual string s_SStartTime
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SStartTime) ? string.Empty : base.GetstringAsString(ColumnNames.SStartTime);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SStartTime);
				else
					this.SStartTime = base.SetstringAsString(ColumnNames.SStartTime, value);
			}
		}

		public virtual string s_SEndTime
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SEndTime) ? string.Empty : base.GetstringAsString(ColumnNames.SEndTime);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SEndTime);
				else
					this.SEndTime = base.SetstringAsString(ColumnNames.SEndTime, value);
			}
		}

		public virtual string s_FkSpecialityID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FkSpecialityID) ? string.Empty : base.GetintAsString(ColumnNames.FkSpecialityID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FkSpecialityID);
				else
					this.FkSpecialityID = base.SetintAsString(ColumnNames.FkSpecialityID, value);
			}
		}

		public virtual string s_BIsOfDay
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BIsOfDay) ? string.Empty : base.GetboolAsString(ColumnNames.BIsOfDay);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BIsOfDay);
				else
					this.BIsOfDay = base.SetboolAsString(ColumnNames.BIsOfDay, value);
			}
		}

		public virtual string s_BOnTime
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BOnTime) ? string.Empty : base.GetboolAsString(ColumnNames.BOnTime);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BOnTime);
				else
					this.BOnTime = base.SetboolAsString(ColumnNames.BOnTime, value);
			}
		}

		public virtual string s_BLate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BLate) ? string.Empty : base.GetboolAsString(ColumnNames.BLate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BLate);
				else
					this.BLate = base.SetboolAsString(ColumnNames.BLate, value);
			}
		}

		public virtual string s_BLateHours
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BLateHours) ? string.Empty : base.GetintAsString(ColumnNames.BLateHours);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BLateHours);
				else
					this.BLateHours = base.SetintAsString(ColumnNames.BLateHours, value);
			}
		}

		public virtual string s_Penalty
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Penalty) ? string.Empty : base.GetdoubleAsString(ColumnNames.Penalty);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Penalty);
				else
					this.Penalty = base.SetdoubleAsString(ColumnNames.Penalty, value);
			}
		}

		public virtual string s_Bonus
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Bonus) ? string.Empty : base.GetdoubleAsString(ColumnNames.Bonus);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Bonus);
				else
					this.Bonus = base.SetdoubleAsString(ColumnNames.Bonus, value);
			}
		}

		public virtual string s_Weekend
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Weekend) ? string.Empty : base.GetboolAsString(ColumnNames.Weekend);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Weekend);
				else
					this.Weekend = base.SetboolAsString(ColumnNames.Weekend, value);
			}
		}

		public virtual string s_SNotes
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SNotes) ? string.Empty : base.GetstringAsString(ColumnNames.SNotes);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SNotes);
				else
					this.SNotes = base.SetstringAsString(ColumnNames.SNotes, value);
			}
		}

		public virtual string s_DCreateDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DCreateDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DCreateDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DCreateDate);
				else
					this.DCreateDate = base.SetDateTimeAsString(ColumnNames.DCreateDate, value);
			}
		}

		public virtual string s_DModifiedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DModifiedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DModifiedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DModifiedDate);
				else
					this.DModifiedDate = base.SetDateTimeAsString(ColumnNames.DModifiedDate, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter PkUserWorkshiftID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PkUserWorkshiftID, Parameters.PkUserWorkshiftID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FkUserID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FkUserID, Parameters.FkUserID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IWeekNumber
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IWeekNumber, Parameters.IWeekNumber);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IYear
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IYear, Parameters.IYear);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DWeekStartDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DWeekStartDate, Parameters.DWeekStartDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DWeekEndDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DWeekEndDate, Parameters.DWeekEndDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IDayNumber
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IDayNumber, Parameters.IDayNumber);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SStartTime
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SStartTime, Parameters.SStartTime);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SEndTime
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SEndTime, Parameters.SEndTime);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FkSpecialityID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FkSpecialityID, Parameters.FkSpecialityID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter BIsOfDay
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BIsOfDay, Parameters.BIsOfDay);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter BOnTime
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BOnTime, Parameters.BOnTime);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter BLate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BLate, Parameters.BLate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter BLateHours
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BLateHours, Parameters.BLateHours);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Penalty
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Penalty, Parameters.Penalty);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Bonus
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Bonus, Parameters.Bonus);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Weekend
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Weekend, Parameters.Weekend);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SNotes
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SNotes, Parameters.SNotes);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DCreateDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DCreateDate, Parameters.DCreateDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DModifiedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DModifiedDate, Parameters.DModifiedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter PkUserWorkshiftID
		    {
				get
		        {
					if(_PkUserWorkshiftID_W == null)
	        	    {
						_PkUserWorkshiftID_W = TearOff.PkUserWorkshiftID;
					}
					return _PkUserWorkshiftID_W;
				}
			}

			public WhereParameter FkUserID
		    {
				get
		        {
					if(_FkUserID_W == null)
	        	    {
						_FkUserID_W = TearOff.FkUserID;
					}
					return _FkUserID_W;
				}
			}

			public WhereParameter IWeekNumber
		    {
				get
		        {
					if(_IWeekNumber_W == null)
	        	    {
						_IWeekNumber_W = TearOff.IWeekNumber;
					}
					return _IWeekNumber_W;
				}
			}

			public WhereParameter IYear
		    {
				get
		        {
					if(_IYear_W == null)
	        	    {
						_IYear_W = TearOff.IYear;
					}
					return _IYear_W;
				}
			}

			public WhereParameter DWeekStartDate
		    {
				get
		        {
					if(_DWeekStartDate_W == null)
	        	    {
						_DWeekStartDate_W = TearOff.DWeekStartDate;
					}
					return _DWeekStartDate_W;
				}
			}

			public WhereParameter DWeekEndDate
		    {
				get
		        {
					if(_DWeekEndDate_W == null)
	        	    {
						_DWeekEndDate_W = TearOff.DWeekEndDate;
					}
					return _DWeekEndDate_W;
				}
			}

			public WhereParameter IDayNumber
		    {
				get
		        {
					if(_IDayNumber_W == null)
	        	    {
						_IDayNumber_W = TearOff.IDayNumber;
					}
					return _IDayNumber_W;
				}
			}

			public WhereParameter SStartTime
		    {
				get
		        {
					if(_SStartTime_W == null)
	        	    {
						_SStartTime_W = TearOff.SStartTime;
					}
					return _SStartTime_W;
				}
			}

			public WhereParameter SEndTime
		    {
				get
		        {
					if(_SEndTime_W == null)
	        	    {
						_SEndTime_W = TearOff.SEndTime;
					}
					return _SEndTime_W;
				}
			}

			public WhereParameter FkSpecialityID
		    {
				get
		        {
					if(_FkSpecialityID_W == null)
	        	    {
						_FkSpecialityID_W = TearOff.FkSpecialityID;
					}
					return _FkSpecialityID_W;
				}
			}

			public WhereParameter BIsOfDay
		    {
				get
		        {
					if(_BIsOfDay_W == null)
	        	    {
						_BIsOfDay_W = TearOff.BIsOfDay;
					}
					return _BIsOfDay_W;
				}
			}

			public WhereParameter BOnTime
		    {
				get
		        {
					if(_BOnTime_W == null)
	        	    {
						_BOnTime_W = TearOff.BOnTime;
					}
					return _BOnTime_W;
				}
			}

			public WhereParameter BLate
		    {
				get
		        {
					if(_BLate_W == null)
	        	    {
						_BLate_W = TearOff.BLate;
					}
					return _BLate_W;
				}
			}

			public WhereParameter BLateHours
		    {
				get
		        {
					if(_BLateHours_W == null)
	        	    {
						_BLateHours_W = TearOff.BLateHours;
					}
					return _BLateHours_W;
				}
			}

			public WhereParameter Penalty
		    {
				get
		        {
					if(_Penalty_W == null)
	        	    {
						_Penalty_W = TearOff.Penalty;
					}
					return _Penalty_W;
				}
			}

			public WhereParameter Bonus
		    {
				get
		        {
					if(_Bonus_W == null)
	        	    {
						_Bonus_W = TearOff.Bonus;
					}
					return _Bonus_W;
				}
			}

			public WhereParameter Weekend
		    {
				get
		        {
					if(_Weekend_W == null)
	        	    {
						_Weekend_W = TearOff.Weekend;
					}
					return _Weekend_W;
				}
			}

			public WhereParameter SNotes
		    {
				get
		        {
					if(_SNotes_W == null)
	        	    {
						_SNotes_W = TearOff.SNotes;
					}
					return _SNotes_W;
				}
			}

			public WhereParameter DCreateDate
		    {
				get
		        {
					if(_DCreateDate_W == null)
	        	    {
						_DCreateDate_W = TearOff.DCreateDate;
					}
					return _DCreateDate_W;
				}
			}

			public WhereParameter DModifiedDate
		    {
				get
		        {
					if(_DModifiedDate_W == null)
	        	    {
						_DModifiedDate_W = TearOff.DModifiedDate;
					}
					return _DModifiedDate_W;
				}
			}

			private WhereParameter _PkUserWorkshiftID_W = null;
			private WhereParameter _FkUserID_W = null;
			private WhereParameter _IWeekNumber_W = null;
			private WhereParameter _IYear_W = null;
			private WhereParameter _DWeekStartDate_W = null;
			private WhereParameter _DWeekEndDate_W = null;
			private WhereParameter _IDayNumber_W = null;
			private WhereParameter _SStartTime_W = null;
			private WhereParameter _SEndTime_W = null;
			private WhereParameter _FkSpecialityID_W = null;
			private WhereParameter _BIsOfDay_W = null;
			private WhereParameter _BOnTime_W = null;
			private WhereParameter _BLate_W = null;
			private WhereParameter _BLateHours_W = null;
			private WhereParameter _Penalty_W = null;
			private WhereParameter _Bonus_W = null;
			private WhereParameter _Weekend_W = null;
			private WhereParameter _SNotes_W = null;
			private WhereParameter _DCreateDate_W = null;
			private WhereParameter _DModifiedDate_W = null;

			public void WhereClauseReset()
			{
				_PkUserWorkshiftID_W = null;
				_FkUserID_W = null;
				_IWeekNumber_W = null;
				_IYear_W = null;
				_DWeekStartDate_W = null;
				_DWeekEndDate_W = null;
				_IDayNumber_W = null;
				_SStartTime_W = null;
				_SEndTime_W = null;
				_FkSpecialityID_W = null;
				_BIsOfDay_W = null;
				_BOnTime_W = null;
				_BLate_W = null;
				_BLateHours_W = null;
				_Penalty_W = null;
				_Bonus_W = null;
				_Weekend_W = null;
				_SNotes_W = null;
				_DCreateDate_W = null;
				_DModifiedDate_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter PkUserWorkshiftID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PkUserWorkshiftID, Parameters.PkUserWorkshiftID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FkUserID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FkUserID, Parameters.FkUserID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IWeekNumber
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IWeekNumber, Parameters.IWeekNumber);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IYear
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IYear, Parameters.IYear);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DWeekStartDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DWeekStartDate, Parameters.DWeekStartDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DWeekEndDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DWeekEndDate, Parameters.DWeekEndDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IDayNumber
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IDayNumber, Parameters.IDayNumber);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SStartTime
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SStartTime, Parameters.SStartTime);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SEndTime
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SEndTime, Parameters.SEndTime);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FkSpecialityID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FkSpecialityID, Parameters.FkSpecialityID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter BIsOfDay
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BIsOfDay, Parameters.BIsOfDay);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter BOnTime
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BOnTime, Parameters.BOnTime);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter BLate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BLate, Parameters.BLate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter BLateHours
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BLateHours, Parameters.BLateHours);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Penalty
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Penalty, Parameters.Penalty);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Bonus
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Bonus, Parameters.Bonus);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Weekend
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Weekend, Parameters.Weekend);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SNotes
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SNotes, Parameters.SNotes);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DCreateDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DCreateDate, Parameters.DCreateDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DModifiedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DModifiedDate, Parameters.DModifiedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter PkUserWorkshiftID
		    {
				get
		        {
					if(_PkUserWorkshiftID_W == null)
	        	    {
						_PkUserWorkshiftID_W = TearOff.PkUserWorkshiftID;
					}
					return _PkUserWorkshiftID_W;
				}
			}

			public AggregateParameter FkUserID
		    {
				get
		        {
					if(_FkUserID_W == null)
	        	    {
						_FkUserID_W = TearOff.FkUserID;
					}
					return _FkUserID_W;
				}
			}

			public AggregateParameter IWeekNumber
		    {
				get
		        {
					if(_IWeekNumber_W == null)
	        	    {
						_IWeekNumber_W = TearOff.IWeekNumber;
					}
					return _IWeekNumber_W;
				}
			}

			public AggregateParameter IYear
		    {
				get
		        {
					if(_IYear_W == null)
	        	    {
						_IYear_W = TearOff.IYear;
					}
					return _IYear_W;
				}
			}

			public AggregateParameter DWeekStartDate
		    {
				get
		        {
					if(_DWeekStartDate_W == null)
	        	    {
						_DWeekStartDate_W = TearOff.DWeekStartDate;
					}
					return _DWeekStartDate_W;
				}
			}

			public AggregateParameter DWeekEndDate
		    {
				get
		        {
					if(_DWeekEndDate_W == null)
	        	    {
						_DWeekEndDate_W = TearOff.DWeekEndDate;
					}
					return _DWeekEndDate_W;
				}
			}

			public AggregateParameter IDayNumber
		    {
				get
		        {
					if(_IDayNumber_W == null)
	        	    {
						_IDayNumber_W = TearOff.IDayNumber;
					}
					return _IDayNumber_W;
				}
			}

			public AggregateParameter SStartTime
		    {
				get
		        {
					if(_SStartTime_W == null)
	        	    {
						_SStartTime_W = TearOff.SStartTime;
					}
					return _SStartTime_W;
				}
			}

			public AggregateParameter SEndTime
		    {
				get
		        {
					if(_SEndTime_W == null)
	        	    {
						_SEndTime_W = TearOff.SEndTime;
					}
					return _SEndTime_W;
				}
			}

			public AggregateParameter FkSpecialityID
		    {
				get
		        {
					if(_FkSpecialityID_W == null)
	        	    {
						_FkSpecialityID_W = TearOff.FkSpecialityID;
					}
					return _FkSpecialityID_W;
				}
			}

			public AggregateParameter BIsOfDay
		    {
				get
		        {
					if(_BIsOfDay_W == null)
	        	    {
						_BIsOfDay_W = TearOff.BIsOfDay;
					}
					return _BIsOfDay_W;
				}
			}

			public AggregateParameter BOnTime
		    {
				get
		        {
					if(_BOnTime_W == null)
	        	    {
						_BOnTime_W = TearOff.BOnTime;
					}
					return _BOnTime_W;
				}
			}

			public AggregateParameter BLate
		    {
				get
		        {
					if(_BLate_W == null)
	        	    {
						_BLate_W = TearOff.BLate;
					}
					return _BLate_W;
				}
			}

			public AggregateParameter BLateHours
		    {
				get
		        {
					if(_BLateHours_W == null)
	        	    {
						_BLateHours_W = TearOff.BLateHours;
					}
					return _BLateHours_W;
				}
			}

			public AggregateParameter Penalty
		    {
				get
		        {
					if(_Penalty_W == null)
	        	    {
						_Penalty_W = TearOff.Penalty;
					}
					return _Penalty_W;
				}
			}

			public AggregateParameter Bonus
		    {
				get
		        {
					if(_Bonus_W == null)
	        	    {
						_Bonus_W = TearOff.Bonus;
					}
					return _Bonus_W;
				}
			}

			public AggregateParameter Weekend
		    {
				get
		        {
					if(_Weekend_W == null)
	        	    {
						_Weekend_W = TearOff.Weekend;
					}
					return _Weekend_W;
				}
			}

			public AggregateParameter SNotes
		    {
				get
		        {
					if(_SNotes_W == null)
	        	    {
						_SNotes_W = TearOff.SNotes;
					}
					return _SNotes_W;
				}
			}

			public AggregateParameter DCreateDate
		    {
				get
		        {
					if(_DCreateDate_W == null)
	        	    {
						_DCreateDate_W = TearOff.DCreateDate;
					}
					return _DCreateDate_W;
				}
			}

			public AggregateParameter DModifiedDate
		    {
				get
		        {
					if(_DModifiedDate_W == null)
	        	    {
						_DModifiedDate_W = TearOff.DModifiedDate;
					}
					return _DModifiedDate_W;
				}
			}

			private AggregateParameter _PkUserWorkshiftID_W = null;
			private AggregateParameter _FkUserID_W = null;
			private AggregateParameter _IWeekNumber_W = null;
			private AggregateParameter _IYear_W = null;
			private AggregateParameter _DWeekStartDate_W = null;
			private AggregateParameter _DWeekEndDate_W = null;
			private AggregateParameter _IDayNumber_W = null;
			private AggregateParameter _SStartTime_W = null;
			private AggregateParameter _SEndTime_W = null;
			private AggregateParameter _FkSpecialityID_W = null;
			private AggregateParameter _BIsOfDay_W = null;
			private AggregateParameter _BOnTime_W = null;
			private AggregateParameter _BLate_W = null;
			private AggregateParameter _BLateHours_W = null;
			private AggregateParameter _Penalty_W = null;
			private AggregateParameter _Bonus_W = null;
			private AggregateParameter _Weekend_W = null;
			private AggregateParameter _SNotes_W = null;
			private AggregateParameter _DCreateDate_W = null;
			private AggregateParameter _DModifiedDate_W = null;

			public void AggregateClauseReset()
			{
				_PkUserWorkshiftID_W = null;
				_FkUserID_W = null;
				_IWeekNumber_W = null;
				_IYear_W = null;
				_DWeekStartDate_W = null;
				_DWeekEndDate_W = null;
				_IDayNumber_W = null;
				_SStartTime_W = null;
				_SEndTime_W = null;
				_FkSpecialityID_W = null;
				_BIsOfDay_W = null;
				_BOnTime_W = null;
				_BLate_W = null;
				_BLateHours_W = null;
				_Penalty_W = null;
				_Bonus_W = null;
				_Weekend_W = null;
				_SNotes_W = null;
				_DCreateDate_W = null;
				_DModifiedDate_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblUserWorkshiftsInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.PkUserWorkshiftID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblUserWorkshiftsUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblUserWorkshiftsDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.PkUserWorkshiftID);
			p.SourceColumn = ColumnNames.PkUserWorkshiftID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.PkUserWorkshiftID);
			p.SourceColumn = ColumnNames.PkUserWorkshiftID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FkUserID);
			p.SourceColumn = ColumnNames.FkUserID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IWeekNumber);
			p.SourceColumn = ColumnNames.IWeekNumber;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IYear);
			p.SourceColumn = ColumnNames.IYear;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DWeekStartDate);
			p.SourceColumn = ColumnNames.DWeekStartDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DWeekEndDate);
			p.SourceColumn = ColumnNames.DWeekEndDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IDayNumber);
			p.SourceColumn = ColumnNames.IDayNumber;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SStartTime);
			p.SourceColumn = ColumnNames.SStartTime;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SEndTime);
			p.SourceColumn = ColumnNames.SEndTime;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FkSpecialityID);
			p.SourceColumn = ColumnNames.FkSpecialityID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.BIsOfDay);
			p.SourceColumn = ColumnNames.BIsOfDay;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.BOnTime);
			p.SourceColumn = ColumnNames.BOnTime;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.BLate);
			p.SourceColumn = ColumnNames.BLate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.BLateHours);
			p.SourceColumn = ColumnNames.BLateHours;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Penalty);
			p.SourceColumn = ColumnNames.Penalty;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Bonus);
			p.SourceColumn = ColumnNames.Bonus;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Weekend);
			p.SourceColumn = ColumnNames.Weekend;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SNotes);
			p.SourceColumn = ColumnNames.SNotes;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DCreateDate);
			p.SourceColumn = ColumnNames.DCreateDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DModifiedDate);
			p.SourceColumn = ColumnNames.DModifiedDate;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
