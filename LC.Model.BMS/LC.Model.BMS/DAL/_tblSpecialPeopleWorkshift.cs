
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.1.7.1)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace LC.Model.BMS.DAL
{
	public abstract class _tblSpecialPeopleWorkshift : SqlClientEntity
	{
		public _tblSpecialPeopleWorkshift()
		{
			this.QuerySource = "tblSpecialPeopleWorkshift";
			this.MappingName = "tblSpecialPeopleWorkshift";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tblSpecialPeopleWorkshiftLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int PkSpecialPeopleWorkshiftID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.PkSpecialPeopleWorkshiftID, PkSpecialPeopleWorkshiftID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tblSpecialPeopleWorkshiftLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter PkSpecialPeopleWorkshiftID
			{
				get
				{
					return new SqlParameter("@PkSpecialPeopleWorkshiftID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Fkuserid
			{
				get
				{
					return new SqlParameter("@Fkuserid", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter IWeek
			{
				get
				{
					return new SqlParameter("@IWeek", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter IDay
			{
				get
				{
					return new SqlParameter("@IDay", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter IYear
			{
				get
				{
					return new SqlParameter("@IYear", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter WeekStartDate
			{
				get
				{
					return new SqlParameter("@WeekStartDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter WeekEndDate
			{
				get
				{
					return new SqlParameter("@WeekEndDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter DCreatedDate
			{
				get
				{
					return new SqlParameter("@DCreatedDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter DModifiedDate
			{
				get
				{
					return new SqlParameter("@DModifiedDate", SqlDbType.DateTime, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string PkSpecialPeopleWorkshiftID = "pkSpecialPeopleWorkshiftID";
            public const string Fkuserid = "fkuserid";
            public const string IWeek = "iWeek";
            public const string IDay = "iDay";
            public const string IYear = "iYear";
            public const string WeekStartDate = "weekStartDate";
            public const string WeekEndDate = "weekEndDate";
            public const string DCreatedDate = "dCreatedDate";
            public const string DModifiedDate = "dModifiedDate";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[PkSpecialPeopleWorkshiftID] = _tblSpecialPeopleWorkshift.PropertyNames.PkSpecialPeopleWorkshiftID;
					ht[Fkuserid] = _tblSpecialPeopleWorkshift.PropertyNames.Fkuserid;
					ht[IWeek] = _tblSpecialPeopleWorkshift.PropertyNames.IWeek;
					ht[IDay] = _tblSpecialPeopleWorkshift.PropertyNames.IDay;
					ht[IYear] = _tblSpecialPeopleWorkshift.PropertyNames.IYear;
					ht[WeekStartDate] = _tblSpecialPeopleWorkshift.PropertyNames.WeekStartDate;
					ht[WeekEndDate] = _tblSpecialPeopleWorkshift.PropertyNames.WeekEndDate;
					ht[DCreatedDate] = _tblSpecialPeopleWorkshift.PropertyNames.DCreatedDate;
					ht[DModifiedDate] = _tblSpecialPeopleWorkshift.PropertyNames.DModifiedDate;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string PkSpecialPeopleWorkshiftID = "PkSpecialPeopleWorkshiftID";
            public const string Fkuserid = "Fkuserid";
            public const string IWeek = "IWeek";
            public const string IDay = "IDay";
            public const string IYear = "IYear";
            public const string WeekStartDate = "WeekStartDate";
            public const string WeekEndDate = "WeekEndDate";
            public const string DCreatedDate = "DCreatedDate";
            public const string DModifiedDate = "DModifiedDate";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[PkSpecialPeopleWorkshiftID] = _tblSpecialPeopleWorkshift.ColumnNames.PkSpecialPeopleWorkshiftID;
					ht[Fkuserid] = _tblSpecialPeopleWorkshift.ColumnNames.Fkuserid;
					ht[IWeek] = _tblSpecialPeopleWorkshift.ColumnNames.IWeek;
					ht[IDay] = _tblSpecialPeopleWorkshift.ColumnNames.IDay;
					ht[IYear] = _tblSpecialPeopleWorkshift.ColumnNames.IYear;
					ht[WeekStartDate] = _tblSpecialPeopleWorkshift.ColumnNames.WeekStartDate;
					ht[WeekEndDate] = _tblSpecialPeopleWorkshift.ColumnNames.WeekEndDate;
					ht[DCreatedDate] = _tblSpecialPeopleWorkshift.ColumnNames.DCreatedDate;
					ht[DModifiedDate] = _tblSpecialPeopleWorkshift.ColumnNames.DModifiedDate;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string PkSpecialPeopleWorkshiftID = "s_PkSpecialPeopleWorkshiftID";
            public const string Fkuserid = "s_Fkuserid";
            public const string IWeek = "s_IWeek";
            public const string IDay = "s_IDay";
            public const string IYear = "s_IYear";
            public const string WeekStartDate = "s_WeekStartDate";
            public const string WeekEndDate = "s_WeekEndDate";
            public const string DCreatedDate = "s_DCreatedDate";
            public const string DModifiedDate = "s_DModifiedDate";

		}
		#endregion		
		
		#region Properties
	
		public virtual int PkSpecialPeopleWorkshiftID
	    {
			get
	        {
				return base.Getint(ColumnNames.PkSpecialPeopleWorkshiftID);
			}
			set
	        {
				base.Setint(ColumnNames.PkSpecialPeopleWorkshiftID, value);
			}
		}

		public virtual int Fkuserid
	    {
			get
	        {
				return base.Getint(ColumnNames.Fkuserid);
			}
			set
	        {
				base.Setint(ColumnNames.Fkuserid, value);
			}
		}

		public virtual int IWeek
	    {
			get
	        {
				return base.Getint(ColumnNames.IWeek);
			}
			set
	        {
				base.Setint(ColumnNames.IWeek, value);
			}
		}

		public virtual int IDay
	    {
			get
	        {
				return base.Getint(ColumnNames.IDay);
			}
			set
	        {
				base.Setint(ColumnNames.IDay, value);
			}
		}

		public virtual int IYear
	    {
			get
	        {
				return base.Getint(ColumnNames.IYear);
			}
			set
	        {
				base.Setint(ColumnNames.IYear, value);
			}
		}

		public virtual DateTime WeekStartDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.WeekStartDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.WeekStartDate, value);
			}
		}

		public virtual DateTime WeekEndDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.WeekEndDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.WeekEndDate, value);
			}
		}

		public virtual DateTime DCreatedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.DCreatedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.DCreatedDate, value);
			}
		}

		public virtual DateTime DModifiedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.DModifiedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.DModifiedDate, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_PkSpecialPeopleWorkshiftID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PkSpecialPeopleWorkshiftID) ? string.Empty : base.GetintAsString(ColumnNames.PkSpecialPeopleWorkshiftID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PkSpecialPeopleWorkshiftID);
				else
					this.PkSpecialPeopleWorkshiftID = base.SetintAsString(ColumnNames.PkSpecialPeopleWorkshiftID, value);
			}
		}

		public virtual string s_Fkuserid
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Fkuserid) ? string.Empty : base.GetintAsString(ColumnNames.Fkuserid);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Fkuserid);
				else
					this.Fkuserid = base.SetintAsString(ColumnNames.Fkuserid, value);
			}
		}

		public virtual string s_IWeek
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IWeek) ? string.Empty : base.GetintAsString(ColumnNames.IWeek);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IWeek);
				else
					this.IWeek = base.SetintAsString(ColumnNames.IWeek, value);
			}
		}

		public virtual string s_IDay
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IDay) ? string.Empty : base.GetintAsString(ColumnNames.IDay);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IDay);
				else
					this.IDay = base.SetintAsString(ColumnNames.IDay, value);
			}
		}

		public virtual string s_IYear
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IYear) ? string.Empty : base.GetintAsString(ColumnNames.IYear);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IYear);
				else
					this.IYear = base.SetintAsString(ColumnNames.IYear, value);
			}
		}

		public virtual string s_WeekStartDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.WeekStartDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.WeekStartDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.WeekStartDate);
				else
					this.WeekStartDate = base.SetDateTimeAsString(ColumnNames.WeekStartDate, value);
			}
		}

		public virtual string s_WeekEndDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.WeekEndDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.WeekEndDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.WeekEndDate);
				else
					this.WeekEndDate = base.SetDateTimeAsString(ColumnNames.WeekEndDate, value);
			}
		}

		public virtual string s_DCreatedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DCreatedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DCreatedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DCreatedDate);
				else
					this.DCreatedDate = base.SetDateTimeAsString(ColumnNames.DCreatedDate, value);
			}
		}

		public virtual string s_DModifiedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DModifiedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DModifiedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DModifiedDate);
				else
					this.DModifiedDate = base.SetDateTimeAsString(ColumnNames.DModifiedDate, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter PkSpecialPeopleWorkshiftID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PkSpecialPeopleWorkshiftID, Parameters.PkSpecialPeopleWorkshiftID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Fkuserid
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Fkuserid, Parameters.Fkuserid);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IWeek
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IWeek, Parameters.IWeek);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IDay
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IDay, Parameters.IDay);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IYear
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IYear, Parameters.IYear);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter WeekStartDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.WeekStartDate, Parameters.WeekStartDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter WeekEndDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.WeekEndDate, Parameters.WeekEndDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DCreatedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DCreatedDate, Parameters.DCreatedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DModifiedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DModifiedDate, Parameters.DModifiedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter PkSpecialPeopleWorkshiftID
		    {
				get
		        {
					if(_PkSpecialPeopleWorkshiftID_W == null)
	        	    {
						_PkSpecialPeopleWorkshiftID_W = TearOff.PkSpecialPeopleWorkshiftID;
					}
					return _PkSpecialPeopleWorkshiftID_W;
				}
			}

			public WhereParameter Fkuserid
		    {
				get
		        {
					if(_Fkuserid_W == null)
	        	    {
						_Fkuserid_W = TearOff.Fkuserid;
					}
					return _Fkuserid_W;
				}
			}

			public WhereParameter IWeek
		    {
				get
		        {
					if(_IWeek_W == null)
	        	    {
						_IWeek_W = TearOff.IWeek;
					}
					return _IWeek_W;
				}
			}

			public WhereParameter IDay
		    {
				get
		        {
					if(_IDay_W == null)
	        	    {
						_IDay_W = TearOff.IDay;
					}
					return _IDay_W;
				}
			}

			public WhereParameter IYear
		    {
				get
		        {
					if(_IYear_W == null)
	        	    {
						_IYear_W = TearOff.IYear;
					}
					return _IYear_W;
				}
			}

			public WhereParameter WeekStartDate
		    {
				get
		        {
					if(_WeekStartDate_W == null)
	        	    {
						_WeekStartDate_W = TearOff.WeekStartDate;
					}
					return _WeekStartDate_W;
				}
			}

			public WhereParameter WeekEndDate
		    {
				get
		        {
					if(_WeekEndDate_W == null)
	        	    {
						_WeekEndDate_W = TearOff.WeekEndDate;
					}
					return _WeekEndDate_W;
				}
			}

			public WhereParameter DCreatedDate
		    {
				get
		        {
					if(_DCreatedDate_W == null)
	        	    {
						_DCreatedDate_W = TearOff.DCreatedDate;
					}
					return _DCreatedDate_W;
				}
			}

			public WhereParameter DModifiedDate
		    {
				get
		        {
					if(_DModifiedDate_W == null)
	        	    {
						_DModifiedDate_W = TearOff.DModifiedDate;
					}
					return _DModifiedDate_W;
				}
			}

			private WhereParameter _PkSpecialPeopleWorkshiftID_W = null;
			private WhereParameter _Fkuserid_W = null;
			private WhereParameter _IWeek_W = null;
			private WhereParameter _IDay_W = null;
			private WhereParameter _IYear_W = null;
			private WhereParameter _WeekStartDate_W = null;
			private WhereParameter _WeekEndDate_W = null;
			private WhereParameter _DCreatedDate_W = null;
			private WhereParameter _DModifiedDate_W = null;

			public void WhereClauseReset()
			{
				_PkSpecialPeopleWorkshiftID_W = null;
				_Fkuserid_W = null;
				_IWeek_W = null;
				_IDay_W = null;
				_IYear_W = null;
				_WeekStartDate_W = null;
				_WeekEndDate_W = null;
				_DCreatedDate_W = null;
				_DModifiedDate_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter PkSpecialPeopleWorkshiftID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PkSpecialPeopleWorkshiftID, Parameters.PkSpecialPeopleWorkshiftID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Fkuserid
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Fkuserid, Parameters.Fkuserid);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IWeek
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IWeek, Parameters.IWeek);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IDay
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IDay, Parameters.IDay);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IYear
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IYear, Parameters.IYear);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter WeekStartDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.WeekStartDate, Parameters.WeekStartDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter WeekEndDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.WeekEndDate, Parameters.WeekEndDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DCreatedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DCreatedDate, Parameters.DCreatedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DModifiedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DModifiedDate, Parameters.DModifiedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter PkSpecialPeopleWorkshiftID
		    {
				get
		        {
					if(_PkSpecialPeopleWorkshiftID_W == null)
	        	    {
						_PkSpecialPeopleWorkshiftID_W = TearOff.PkSpecialPeopleWorkshiftID;
					}
					return _PkSpecialPeopleWorkshiftID_W;
				}
			}

			public AggregateParameter Fkuserid
		    {
				get
		        {
					if(_Fkuserid_W == null)
	        	    {
						_Fkuserid_W = TearOff.Fkuserid;
					}
					return _Fkuserid_W;
				}
			}

			public AggregateParameter IWeek
		    {
				get
		        {
					if(_IWeek_W == null)
	        	    {
						_IWeek_W = TearOff.IWeek;
					}
					return _IWeek_W;
				}
			}

			public AggregateParameter IDay
		    {
				get
		        {
					if(_IDay_W == null)
	        	    {
						_IDay_W = TearOff.IDay;
					}
					return _IDay_W;
				}
			}

			public AggregateParameter IYear
		    {
				get
		        {
					if(_IYear_W == null)
	        	    {
						_IYear_W = TearOff.IYear;
					}
					return _IYear_W;
				}
			}

			public AggregateParameter WeekStartDate
		    {
				get
		        {
					if(_WeekStartDate_W == null)
	        	    {
						_WeekStartDate_W = TearOff.WeekStartDate;
					}
					return _WeekStartDate_W;
				}
			}

			public AggregateParameter WeekEndDate
		    {
				get
		        {
					if(_WeekEndDate_W == null)
	        	    {
						_WeekEndDate_W = TearOff.WeekEndDate;
					}
					return _WeekEndDate_W;
				}
			}

			public AggregateParameter DCreatedDate
		    {
				get
		        {
					if(_DCreatedDate_W == null)
	        	    {
						_DCreatedDate_W = TearOff.DCreatedDate;
					}
					return _DCreatedDate_W;
				}
			}

			public AggregateParameter DModifiedDate
		    {
				get
		        {
					if(_DModifiedDate_W == null)
	        	    {
						_DModifiedDate_W = TearOff.DModifiedDate;
					}
					return _DModifiedDate_W;
				}
			}

			private AggregateParameter _PkSpecialPeopleWorkshiftID_W = null;
			private AggregateParameter _Fkuserid_W = null;
			private AggregateParameter _IWeek_W = null;
			private AggregateParameter _IDay_W = null;
			private AggregateParameter _IYear_W = null;
			private AggregateParameter _WeekStartDate_W = null;
			private AggregateParameter _WeekEndDate_W = null;
			private AggregateParameter _DCreatedDate_W = null;
			private AggregateParameter _DModifiedDate_W = null;

			public void AggregateClauseReset()
			{
				_PkSpecialPeopleWorkshiftID_W = null;
				_Fkuserid_W = null;
				_IWeek_W = null;
				_IDay_W = null;
				_IYear_W = null;
				_WeekStartDate_W = null;
				_WeekEndDate_W = null;
				_DCreatedDate_W = null;
				_DModifiedDate_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblSpecialPeopleWorkshiftInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.PkSpecialPeopleWorkshiftID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblSpecialPeopleWorkshiftUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblSpecialPeopleWorkshiftDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.PkSpecialPeopleWorkshiftID);
			p.SourceColumn = ColumnNames.PkSpecialPeopleWorkshiftID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.PkSpecialPeopleWorkshiftID);
			p.SourceColumn = ColumnNames.PkSpecialPeopleWorkshiftID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Fkuserid);
			p.SourceColumn = ColumnNames.Fkuserid;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IWeek);
			p.SourceColumn = ColumnNames.IWeek;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IDay);
			p.SourceColumn = ColumnNames.IDay;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IYear);
			p.SourceColumn = ColumnNames.IYear;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.WeekStartDate);
			p.SourceColumn = ColumnNames.WeekStartDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.WeekEndDate);
			p.SourceColumn = ColumnNames.WeekEndDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DCreatedDate);
			p.SourceColumn = ColumnNames.DCreatedDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DModifiedDate);
			p.SourceColumn = ColumnNames.DModifiedDate;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
