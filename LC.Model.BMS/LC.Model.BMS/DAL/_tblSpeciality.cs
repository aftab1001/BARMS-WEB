
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.1.7.1)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace LC.Model.BMS.DAL
{
	public abstract class _tblSpeciality : SqlClientEntity
	{
		public _tblSpeciality()
		{
			this.QuerySource = "tblSpeciality";
			this.MappingName = "tblSpeciality";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tblSpecialityLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int PkSpecialityID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.PkSpecialityID, PkSpecialityID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tblSpecialityLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter PkSpecialityID
			{
				get
				{
					return new SqlParameter("@PkSpecialityID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter FkSpecialityTypeID
			{
				get
				{
					return new SqlParameter("@FkSpecialityTypeID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter SSpeciality
			{
				get
				{
					return new SqlParameter("@SSpeciality", SqlDbType.NVarChar, 100);
				}
			}
			
			public static SqlParameter Abbrv
			{
				get
				{
					return new SqlParameter("@Abbrv", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter FkDepartmentID
			{
				get
				{
					return new SqlParameter("@FkDepartmentID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter BIsActive
			{
				get
				{
					return new SqlParameter("@BIsActive", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter OrderID
			{
				get
				{
					return new SqlParameter("@OrderID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter BIsIncomeSpecific
			{
				get
				{
					return new SqlParameter("@BIsIncomeSpecific", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter DCreateDate
			{
				get
				{
					return new SqlParameter("@DCreateDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter DModifiedDate
			{
				get
				{
					return new SqlParameter("@DModifiedDate", SqlDbType.DateTime, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string PkSpecialityID = "pkSpecialityID";
            public const string FkSpecialityTypeID = "fkSpecialityTypeID";
            public const string SSpeciality = "sSpeciality";
            public const string Abbrv = "Abbrv";
            public const string FkDepartmentID = "fkDepartmentID";
            public const string BIsActive = "bIsActive";
            public const string OrderID = "OrderID";
            public const string BIsIncomeSpecific = "bIsIncomeSpecific";
            public const string DCreateDate = "dCreateDate";
            public const string DModifiedDate = "dModifiedDate";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[PkSpecialityID] = _tblSpeciality.PropertyNames.PkSpecialityID;
					ht[FkSpecialityTypeID] = _tblSpeciality.PropertyNames.FkSpecialityTypeID;
					ht[SSpeciality] = _tblSpeciality.PropertyNames.SSpeciality;
					ht[Abbrv] = _tblSpeciality.PropertyNames.Abbrv;
					ht[FkDepartmentID] = _tblSpeciality.PropertyNames.FkDepartmentID;
					ht[BIsActive] = _tblSpeciality.PropertyNames.BIsActive;
					ht[OrderID] = _tblSpeciality.PropertyNames.OrderID;
					ht[BIsIncomeSpecific] = _tblSpeciality.PropertyNames.BIsIncomeSpecific;
					ht[DCreateDate] = _tblSpeciality.PropertyNames.DCreateDate;
					ht[DModifiedDate] = _tblSpeciality.PropertyNames.DModifiedDate;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string PkSpecialityID = "PkSpecialityID";
            public const string FkSpecialityTypeID = "FkSpecialityTypeID";
            public const string SSpeciality = "SSpeciality";
            public const string Abbrv = "Abbrv";
            public const string FkDepartmentID = "FkDepartmentID";
            public const string BIsActive = "BIsActive";
            public const string OrderID = "OrderID";
            public const string BIsIncomeSpecific = "BIsIncomeSpecific";
            public const string DCreateDate = "DCreateDate";
            public const string DModifiedDate = "DModifiedDate";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[PkSpecialityID] = _tblSpeciality.ColumnNames.PkSpecialityID;
					ht[FkSpecialityTypeID] = _tblSpeciality.ColumnNames.FkSpecialityTypeID;
					ht[SSpeciality] = _tblSpeciality.ColumnNames.SSpeciality;
					ht[Abbrv] = _tblSpeciality.ColumnNames.Abbrv;
					ht[FkDepartmentID] = _tblSpeciality.ColumnNames.FkDepartmentID;
					ht[BIsActive] = _tblSpeciality.ColumnNames.BIsActive;
					ht[OrderID] = _tblSpeciality.ColumnNames.OrderID;
					ht[BIsIncomeSpecific] = _tblSpeciality.ColumnNames.BIsIncomeSpecific;
					ht[DCreateDate] = _tblSpeciality.ColumnNames.DCreateDate;
					ht[DModifiedDate] = _tblSpeciality.ColumnNames.DModifiedDate;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string PkSpecialityID = "s_PkSpecialityID";
            public const string FkSpecialityTypeID = "s_FkSpecialityTypeID";
            public const string SSpeciality = "s_SSpeciality";
            public const string Abbrv = "s_Abbrv";
            public const string FkDepartmentID = "s_FkDepartmentID";
            public const string BIsActive = "s_BIsActive";
            public const string OrderID = "s_OrderID";
            public const string BIsIncomeSpecific = "s_BIsIncomeSpecific";
            public const string DCreateDate = "s_DCreateDate";
            public const string DModifiedDate = "s_DModifiedDate";

		}
		#endregion		
		
		#region Properties
	
		public virtual int PkSpecialityID
	    {
			get
	        {
				return base.Getint(ColumnNames.PkSpecialityID);
			}
			set
	        {
				base.Setint(ColumnNames.PkSpecialityID, value);
			}
		}

		public virtual int FkSpecialityTypeID
	    {
			get
	        {
				return base.Getint(ColumnNames.FkSpecialityTypeID);
			}
			set
	        {
				base.Setint(ColumnNames.FkSpecialityTypeID, value);
			}
		}

		public virtual string SSpeciality
	    {
			get
	        {
				return base.Getstring(ColumnNames.SSpeciality);
			}
			set
	        {
				base.Setstring(ColumnNames.SSpeciality, value);
			}
		}

		public virtual string Abbrv
	    {
			get
	        {
				return base.Getstring(ColumnNames.Abbrv);
			}
			set
	        {
				base.Setstring(ColumnNames.Abbrv, value);
			}
		}

		public virtual int FkDepartmentID
	    {
			get
	        {
				return base.Getint(ColumnNames.FkDepartmentID);
			}
			set
	        {
				base.Setint(ColumnNames.FkDepartmentID, value);
			}
		}

		public virtual bool BIsActive
	    {
			get
	        {
				return base.Getbool(ColumnNames.BIsActive);
			}
			set
	        {
				base.Setbool(ColumnNames.BIsActive, value);
			}
		}

		public virtual int OrderID
	    {
			get
	        {
				return base.Getint(ColumnNames.OrderID);
			}
			set
	        {
				base.Setint(ColumnNames.OrderID, value);
			}
		}

		public virtual bool BIsIncomeSpecific
	    {
			get
	        {
				return base.Getbool(ColumnNames.BIsIncomeSpecific);
			}
			set
	        {
				base.Setbool(ColumnNames.BIsIncomeSpecific, value);
			}
		}

		public virtual DateTime DCreateDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.DCreateDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.DCreateDate, value);
			}
		}

		public virtual DateTime DModifiedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.DModifiedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.DModifiedDate, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_PkSpecialityID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PkSpecialityID) ? string.Empty : base.GetintAsString(ColumnNames.PkSpecialityID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PkSpecialityID);
				else
					this.PkSpecialityID = base.SetintAsString(ColumnNames.PkSpecialityID, value);
			}
		}

		public virtual string s_FkSpecialityTypeID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FkSpecialityTypeID) ? string.Empty : base.GetintAsString(ColumnNames.FkSpecialityTypeID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FkSpecialityTypeID);
				else
					this.FkSpecialityTypeID = base.SetintAsString(ColumnNames.FkSpecialityTypeID, value);
			}
		}

		public virtual string s_SSpeciality
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SSpeciality) ? string.Empty : base.GetstringAsString(ColumnNames.SSpeciality);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SSpeciality);
				else
					this.SSpeciality = base.SetstringAsString(ColumnNames.SSpeciality, value);
			}
		}

		public virtual string s_Abbrv
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Abbrv) ? string.Empty : base.GetstringAsString(ColumnNames.Abbrv);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Abbrv);
				else
					this.Abbrv = base.SetstringAsString(ColumnNames.Abbrv, value);
			}
		}

		public virtual string s_FkDepartmentID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FkDepartmentID) ? string.Empty : base.GetintAsString(ColumnNames.FkDepartmentID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FkDepartmentID);
				else
					this.FkDepartmentID = base.SetintAsString(ColumnNames.FkDepartmentID, value);
			}
		}

		public virtual string s_BIsActive
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BIsActive) ? string.Empty : base.GetboolAsString(ColumnNames.BIsActive);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BIsActive);
				else
					this.BIsActive = base.SetboolAsString(ColumnNames.BIsActive, value);
			}
		}

		public virtual string s_OrderID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.OrderID) ? string.Empty : base.GetintAsString(ColumnNames.OrderID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.OrderID);
				else
					this.OrderID = base.SetintAsString(ColumnNames.OrderID, value);
			}
		}

		public virtual string s_BIsIncomeSpecific
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BIsIncomeSpecific) ? string.Empty : base.GetboolAsString(ColumnNames.BIsIncomeSpecific);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BIsIncomeSpecific);
				else
					this.BIsIncomeSpecific = base.SetboolAsString(ColumnNames.BIsIncomeSpecific, value);
			}
		}

		public virtual string s_DCreateDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DCreateDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DCreateDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DCreateDate);
				else
					this.DCreateDate = base.SetDateTimeAsString(ColumnNames.DCreateDate, value);
			}
		}

		public virtual string s_DModifiedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DModifiedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DModifiedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DModifiedDate);
				else
					this.DModifiedDate = base.SetDateTimeAsString(ColumnNames.DModifiedDate, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter PkSpecialityID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PkSpecialityID, Parameters.PkSpecialityID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FkSpecialityTypeID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FkSpecialityTypeID, Parameters.FkSpecialityTypeID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SSpeciality
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SSpeciality, Parameters.SSpeciality);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Abbrv
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Abbrv, Parameters.Abbrv);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FkDepartmentID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FkDepartmentID, Parameters.FkDepartmentID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter BIsActive
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BIsActive, Parameters.BIsActive);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter OrderID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.OrderID, Parameters.OrderID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter BIsIncomeSpecific
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BIsIncomeSpecific, Parameters.BIsIncomeSpecific);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DCreateDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DCreateDate, Parameters.DCreateDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DModifiedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DModifiedDate, Parameters.DModifiedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter PkSpecialityID
		    {
				get
		        {
					if(_PkSpecialityID_W == null)
	        	    {
						_PkSpecialityID_W = TearOff.PkSpecialityID;
					}
					return _PkSpecialityID_W;
				}
			}

			public WhereParameter FkSpecialityTypeID
		    {
				get
		        {
					if(_FkSpecialityTypeID_W == null)
	        	    {
						_FkSpecialityTypeID_W = TearOff.FkSpecialityTypeID;
					}
					return _FkSpecialityTypeID_W;
				}
			}

			public WhereParameter SSpeciality
		    {
				get
		        {
					if(_SSpeciality_W == null)
	        	    {
						_SSpeciality_W = TearOff.SSpeciality;
					}
					return _SSpeciality_W;
				}
			}

			public WhereParameter Abbrv
		    {
				get
		        {
					if(_Abbrv_W == null)
	        	    {
						_Abbrv_W = TearOff.Abbrv;
					}
					return _Abbrv_W;
				}
			}

			public WhereParameter FkDepartmentID
		    {
				get
		        {
					if(_FkDepartmentID_W == null)
	        	    {
						_FkDepartmentID_W = TearOff.FkDepartmentID;
					}
					return _FkDepartmentID_W;
				}
			}

			public WhereParameter BIsActive
		    {
				get
		        {
					if(_BIsActive_W == null)
	        	    {
						_BIsActive_W = TearOff.BIsActive;
					}
					return _BIsActive_W;
				}
			}

			public WhereParameter OrderID
		    {
				get
		        {
					if(_OrderID_W == null)
	        	    {
						_OrderID_W = TearOff.OrderID;
					}
					return _OrderID_W;
				}
			}

			public WhereParameter BIsIncomeSpecific
		    {
				get
		        {
					if(_BIsIncomeSpecific_W == null)
	        	    {
						_BIsIncomeSpecific_W = TearOff.BIsIncomeSpecific;
					}
					return _BIsIncomeSpecific_W;
				}
			}

			public WhereParameter DCreateDate
		    {
				get
		        {
					if(_DCreateDate_W == null)
	        	    {
						_DCreateDate_W = TearOff.DCreateDate;
					}
					return _DCreateDate_W;
				}
			}

			public WhereParameter DModifiedDate
		    {
				get
		        {
					if(_DModifiedDate_W == null)
	        	    {
						_DModifiedDate_W = TearOff.DModifiedDate;
					}
					return _DModifiedDate_W;
				}
			}

			private WhereParameter _PkSpecialityID_W = null;
			private WhereParameter _FkSpecialityTypeID_W = null;
			private WhereParameter _SSpeciality_W = null;
			private WhereParameter _Abbrv_W = null;
			private WhereParameter _FkDepartmentID_W = null;
			private WhereParameter _BIsActive_W = null;
			private WhereParameter _OrderID_W = null;
			private WhereParameter _BIsIncomeSpecific_W = null;
			private WhereParameter _DCreateDate_W = null;
			private WhereParameter _DModifiedDate_W = null;

			public void WhereClauseReset()
			{
				_PkSpecialityID_W = null;
				_FkSpecialityTypeID_W = null;
				_SSpeciality_W = null;
				_Abbrv_W = null;
				_FkDepartmentID_W = null;
				_BIsActive_W = null;
				_OrderID_W = null;
				_BIsIncomeSpecific_W = null;
				_DCreateDate_W = null;
				_DModifiedDate_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter PkSpecialityID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PkSpecialityID, Parameters.PkSpecialityID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FkSpecialityTypeID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FkSpecialityTypeID, Parameters.FkSpecialityTypeID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SSpeciality
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SSpeciality, Parameters.SSpeciality);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Abbrv
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Abbrv, Parameters.Abbrv);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FkDepartmentID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FkDepartmentID, Parameters.FkDepartmentID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter BIsActive
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BIsActive, Parameters.BIsActive);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter OrderID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.OrderID, Parameters.OrderID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter BIsIncomeSpecific
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BIsIncomeSpecific, Parameters.BIsIncomeSpecific);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DCreateDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DCreateDate, Parameters.DCreateDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DModifiedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DModifiedDate, Parameters.DModifiedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter PkSpecialityID
		    {
				get
		        {
					if(_PkSpecialityID_W == null)
	        	    {
						_PkSpecialityID_W = TearOff.PkSpecialityID;
					}
					return _PkSpecialityID_W;
				}
			}

			public AggregateParameter FkSpecialityTypeID
		    {
				get
		        {
					if(_FkSpecialityTypeID_W == null)
	        	    {
						_FkSpecialityTypeID_W = TearOff.FkSpecialityTypeID;
					}
					return _FkSpecialityTypeID_W;
				}
			}

			public AggregateParameter SSpeciality
		    {
				get
		        {
					if(_SSpeciality_W == null)
	        	    {
						_SSpeciality_W = TearOff.SSpeciality;
					}
					return _SSpeciality_W;
				}
			}

			public AggregateParameter Abbrv
		    {
				get
		        {
					if(_Abbrv_W == null)
	        	    {
						_Abbrv_W = TearOff.Abbrv;
					}
					return _Abbrv_W;
				}
			}

			public AggregateParameter FkDepartmentID
		    {
				get
		        {
					if(_FkDepartmentID_W == null)
	        	    {
						_FkDepartmentID_W = TearOff.FkDepartmentID;
					}
					return _FkDepartmentID_W;
				}
			}

			public AggregateParameter BIsActive
		    {
				get
		        {
					if(_BIsActive_W == null)
	        	    {
						_BIsActive_W = TearOff.BIsActive;
					}
					return _BIsActive_W;
				}
			}

			public AggregateParameter OrderID
		    {
				get
		        {
					if(_OrderID_W == null)
	        	    {
						_OrderID_W = TearOff.OrderID;
					}
					return _OrderID_W;
				}
			}

			public AggregateParameter BIsIncomeSpecific
		    {
				get
		        {
					if(_BIsIncomeSpecific_W == null)
	        	    {
						_BIsIncomeSpecific_W = TearOff.BIsIncomeSpecific;
					}
					return _BIsIncomeSpecific_W;
				}
			}

			public AggregateParameter DCreateDate
		    {
				get
		        {
					if(_DCreateDate_W == null)
	        	    {
						_DCreateDate_W = TearOff.DCreateDate;
					}
					return _DCreateDate_W;
				}
			}

			public AggregateParameter DModifiedDate
		    {
				get
		        {
					if(_DModifiedDate_W == null)
	        	    {
						_DModifiedDate_W = TearOff.DModifiedDate;
					}
					return _DModifiedDate_W;
				}
			}

			private AggregateParameter _PkSpecialityID_W = null;
			private AggregateParameter _FkSpecialityTypeID_W = null;
			private AggregateParameter _SSpeciality_W = null;
			private AggregateParameter _Abbrv_W = null;
			private AggregateParameter _FkDepartmentID_W = null;
			private AggregateParameter _BIsActive_W = null;
			private AggregateParameter _OrderID_W = null;
			private AggregateParameter _BIsIncomeSpecific_W = null;
			private AggregateParameter _DCreateDate_W = null;
			private AggregateParameter _DModifiedDate_W = null;

			public void AggregateClauseReset()
			{
				_PkSpecialityID_W = null;
				_FkSpecialityTypeID_W = null;
				_SSpeciality_W = null;
				_Abbrv_W = null;
				_FkDepartmentID_W = null;
				_BIsActive_W = null;
				_OrderID_W = null;
				_BIsIncomeSpecific_W = null;
				_DCreateDate_W = null;
				_DModifiedDate_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblSpecialityInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.PkSpecialityID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblSpecialityUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblSpecialityDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.PkSpecialityID);
			p.SourceColumn = ColumnNames.PkSpecialityID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.PkSpecialityID);
			p.SourceColumn = ColumnNames.PkSpecialityID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FkSpecialityTypeID);
			p.SourceColumn = ColumnNames.FkSpecialityTypeID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SSpeciality);
			p.SourceColumn = ColumnNames.SSpeciality;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Abbrv);
			p.SourceColumn = ColumnNames.Abbrv;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FkDepartmentID);
			p.SourceColumn = ColumnNames.FkDepartmentID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.BIsActive);
			p.SourceColumn = ColumnNames.BIsActive;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.OrderID);
			p.SourceColumn = ColumnNames.OrderID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.BIsIncomeSpecific);
			p.SourceColumn = ColumnNames.BIsIncomeSpecific;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DCreateDate);
			p.SourceColumn = ColumnNames.DCreateDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DModifiedDate);
			p.SourceColumn = ColumnNames.DModifiedDate;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
