
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.1.7.1)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace LC.Model.BMS.DAL
{
	public abstract class _tblProductQuantities : SqlClientEntity
	{
		public _tblProductQuantities()
		{
			this.QuerySource = "tblProductQuantities";
			this.MappingName = "tblProductQuantities";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tblProductQuantitiesLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int PkProductQuantityID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.PkProductQuantityID, PkProductQuantityID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tblProductQuantitiesLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter PkProductQuantityID
			{
				get
				{
					return new SqlParameter("@PkProductQuantityID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter FkProductID
			{
				get
				{
					return new SqlParameter("@FkProductID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter QName
			{
				get
				{
					return new SqlParameter("@QName", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter QDescription
			{
				get
				{
					return new SqlParameter("@QDescription", SqlDbType.NText, 1073741823);
				}
			}
			
			public static SqlParameter QOrder
			{
				get
				{
					return new SqlParameter("@QOrder", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter IsActive
			{
				get
				{
					return new SqlParameter("@IsActive", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter DModifiedDate
			{
				get
				{
					return new SqlParameter("@DModifiedDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter DCreatedDate
			{
				get
				{
					return new SqlParameter("@DCreatedDate", SqlDbType.DateTime, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string PkProductQuantityID = "pkProductQuantityID";
            public const string FkProductID = "fkProductID";
            public const string QName = "qName";
            public const string QDescription = "qDescription";
            public const string QOrder = "qOrder";
            public const string IsActive = "isActive";
            public const string DModifiedDate = "dModifiedDate";
            public const string DCreatedDate = "dCreatedDate";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[PkProductQuantityID] = _tblProductQuantities.PropertyNames.PkProductQuantityID;
					ht[FkProductID] = _tblProductQuantities.PropertyNames.FkProductID;
					ht[QName] = _tblProductQuantities.PropertyNames.QName;
					ht[QDescription] = _tblProductQuantities.PropertyNames.QDescription;
					ht[QOrder] = _tblProductQuantities.PropertyNames.QOrder;
					ht[IsActive] = _tblProductQuantities.PropertyNames.IsActive;
					ht[DModifiedDate] = _tblProductQuantities.PropertyNames.DModifiedDate;
					ht[DCreatedDate] = _tblProductQuantities.PropertyNames.DCreatedDate;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string PkProductQuantityID = "PkProductQuantityID";
            public const string FkProductID = "FkProductID";
            public const string QName = "QName";
            public const string QDescription = "QDescription";
            public const string QOrder = "QOrder";
            public const string IsActive = "IsActive";
            public const string DModifiedDate = "DModifiedDate";
            public const string DCreatedDate = "DCreatedDate";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[PkProductQuantityID] = _tblProductQuantities.ColumnNames.PkProductQuantityID;
					ht[FkProductID] = _tblProductQuantities.ColumnNames.FkProductID;
					ht[QName] = _tblProductQuantities.ColumnNames.QName;
					ht[QDescription] = _tblProductQuantities.ColumnNames.QDescription;
					ht[QOrder] = _tblProductQuantities.ColumnNames.QOrder;
					ht[IsActive] = _tblProductQuantities.ColumnNames.IsActive;
					ht[DModifiedDate] = _tblProductQuantities.ColumnNames.DModifiedDate;
					ht[DCreatedDate] = _tblProductQuantities.ColumnNames.DCreatedDate;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string PkProductQuantityID = "s_PkProductQuantityID";
            public const string FkProductID = "s_FkProductID";
            public const string QName = "s_QName";
            public const string QDescription = "s_QDescription";
            public const string QOrder = "s_QOrder";
            public const string IsActive = "s_IsActive";
            public const string DModifiedDate = "s_DModifiedDate";
            public const string DCreatedDate = "s_DCreatedDate";

		}
		#endregion		
		
		#region Properties
	
		public virtual int PkProductQuantityID
	    {
			get
	        {
				return base.Getint(ColumnNames.PkProductQuantityID);
			}
			set
	        {
				base.Setint(ColumnNames.PkProductQuantityID, value);
			}
		}

		public virtual int FkProductID
	    {
			get
	        {
				return base.Getint(ColumnNames.FkProductID);
			}
			set
	        {
				base.Setint(ColumnNames.FkProductID, value);
			}
		}

		public virtual string QName
	    {
			get
	        {
				return base.Getstring(ColumnNames.QName);
			}
			set
	        {
				base.Setstring(ColumnNames.QName, value);
			}
		}

		public virtual string QDescription
	    {
			get
	        {
				return base.Getstring(ColumnNames.QDescription);
			}
			set
	        {
				base.Setstring(ColumnNames.QDescription, value);
			}
		}

		public virtual int QOrder
	    {
			get
	        {
				return base.Getint(ColumnNames.QOrder);
			}
			set
	        {
				base.Setint(ColumnNames.QOrder, value);
			}
		}

		public virtual bool IsActive
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsActive);
			}
			set
	        {
				base.Setbool(ColumnNames.IsActive, value);
			}
		}

		public virtual DateTime DModifiedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.DModifiedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.DModifiedDate, value);
			}
		}

		public virtual DateTime DCreatedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.DCreatedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.DCreatedDate, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_PkProductQuantityID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PkProductQuantityID) ? string.Empty : base.GetintAsString(ColumnNames.PkProductQuantityID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PkProductQuantityID);
				else
					this.PkProductQuantityID = base.SetintAsString(ColumnNames.PkProductQuantityID, value);
			}
		}

		public virtual string s_FkProductID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FkProductID) ? string.Empty : base.GetintAsString(ColumnNames.FkProductID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FkProductID);
				else
					this.FkProductID = base.SetintAsString(ColumnNames.FkProductID, value);
			}
		}

		public virtual string s_QName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.QName) ? string.Empty : base.GetstringAsString(ColumnNames.QName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.QName);
				else
					this.QName = base.SetstringAsString(ColumnNames.QName, value);
			}
		}

		public virtual string s_QDescription
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.QDescription) ? string.Empty : base.GetstringAsString(ColumnNames.QDescription);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.QDescription);
				else
					this.QDescription = base.SetstringAsString(ColumnNames.QDescription, value);
			}
		}

		public virtual string s_QOrder
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.QOrder) ? string.Empty : base.GetintAsString(ColumnNames.QOrder);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.QOrder);
				else
					this.QOrder = base.SetintAsString(ColumnNames.QOrder, value);
			}
		}

		public virtual string s_IsActive
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsActive) ? string.Empty : base.GetboolAsString(ColumnNames.IsActive);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsActive);
				else
					this.IsActive = base.SetboolAsString(ColumnNames.IsActive, value);
			}
		}

		public virtual string s_DModifiedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DModifiedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DModifiedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DModifiedDate);
				else
					this.DModifiedDate = base.SetDateTimeAsString(ColumnNames.DModifiedDate, value);
			}
		}

		public virtual string s_DCreatedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DCreatedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DCreatedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DCreatedDate);
				else
					this.DCreatedDate = base.SetDateTimeAsString(ColumnNames.DCreatedDate, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter PkProductQuantityID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PkProductQuantityID, Parameters.PkProductQuantityID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FkProductID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FkProductID, Parameters.FkProductID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter QName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.QName, Parameters.QName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter QDescription
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.QDescription, Parameters.QDescription);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter QOrder
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.QOrder, Parameters.QOrder);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsActive
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsActive, Parameters.IsActive);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DModifiedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DModifiedDate, Parameters.DModifiedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DCreatedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DCreatedDate, Parameters.DCreatedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter PkProductQuantityID
		    {
				get
		        {
					if(_PkProductQuantityID_W == null)
	        	    {
						_PkProductQuantityID_W = TearOff.PkProductQuantityID;
					}
					return _PkProductQuantityID_W;
				}
			}

			public WhereParameter FkProductID
		    {
				get
		        {
					if(_FkProductID_W == null)
	        	    {
						_FkProductID_W = TearOff.FkProductID;
					}
					return _FkProductID_W;
				}
			}

			public WhereParameter QName
		    {
				get
		        {
					if(_QName_W == null)
	        	    {
						_QName_W = TearOff.QName;
					}
					return _QName_W;
				}
			}

			public WhereParameter QDescription
		    {
				get
		        {
					if(_QDescription_W == null)
	        	    {
						_QDescription_W = TearOff.QDescription;
					}
					return _QDescription_W;
				}
			}

			public WhereParameter QOrder
		    {
				get
		        {
					if(_QOrder_W == null)
	        	    {
						_QOrder_W = TearOff.QOrder;
					}
					return _QOrder_W;
				}
			}

			public WhereParameter IsActive
		    {
				get
		        {
					if(_IsActive_W == null)
	        	    {
						_IsActive_W = TearOff.IsActive;
					}
					return _IsActive_W;
				}
			}

			public WhereParameter DModifiedDate
		    {
				get
		        {
					if(_DModifiedDate_W == null)
	        	    {
						_DModifiedDate_W = TearOff.DModifiedDate;
					}
					return _DModifiedDate_W;
				}
			}

			public WhereParameter DCreatedDate
		    {
				get
		        {
					if(_DCreatedDate_W == null)
	        	    {
						_DCreatedDate_W = TearOff.DCreatedDate;
					}
					return _DCreatedDate_W;
				}
			}

			private WhereParameter _PkProductQuantityID_W = null;
			private WhereParameter _FkProductID_W = null;
			private WhereParameter _QName_W = null;
			private WhereParameter _QDescription_W = null;
			private WhereParameter _QOrder_W = null;
			private WhereParameter _IsActive_W = null;
			private WhereParameter _DModifiedDate_W = null;
			private WhereParameter _DCreatedDate_W = null;

			public void WhereClauseReset()
			{
				_PkProductQuantityID_W = null;
				_FkProductID_W = null;
				_QName_W = null;
				_QDescription_W = null;
				_QOrder_W = null;
				_IsActive_W = null;
				_DModifiedDate_W = null;
				_DCreatedDate_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter PkProductQuantityID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PkProductQuantityID, Parameters.PkProductQuantityID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FkProductID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FkProductID, Parameters.FkProductID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter QName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.QName, Parameters.QName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter QDescription
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.QDescription, Parameters.QDescription);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter QOrder
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.QOrder, Parameters.QOrder);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsActive
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsActive, Parameters.IsActive);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DModifiedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DModifiedDate, Parameters.DModifiedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DCreatedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DCreatedDate, Parameters.DCreatedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter PkProductQuantityID
		    {
				get
		        {
					if(_PkProductQuantityID_W == null)
	        	    {
						_PkProductQuantityID_W = TearOff.PkProductQuantityID;
					}
					return _PkProductQuantityID_W;
				}
			}

			public AggregateParameter FkProductID
		    {
				get
		        {
					if(_FkProductID_W == null)
	        	    {
						_FkProductID_W = TearOff.FkProductID;
					}
					return _FkProductID_W;
				}
			}

			public AggregateParameter QName
		    {
				get
		        {
					if(_QName_W == null)
	        	    {
						_QName_W = TearOff.QName;
					}
					return _QName_W;
				}
			}

			public AggregateParameter QDescription
		    {
				get
		        {
					if(_QDescription_W == null)
	        	    {
						_QDescription_W = TearOff.QDescription;
					}
					return _QDescription_W;
				}
			}

			public AggregateParameter QOrder
		    {
				get
		        {
					if(_QOrder_W == null)
	        	    {
						_QOrder_W = TearOff.QOrder;
					}
					return _QOrder_W;
				}
			}

			public AggregateParameter IsActive
		    {
				get
		        {
					if(_IsActive_W == null)
	        	    {
						_IsActive_W = TearOff.IsActive;
					}
					return _IsActive_W;
				}
			}

			public AggregateParameter DModifiedDate
		    {
				get
		        {
					if(_DModifiedDate_W == null)
	        	    {
						_DModifiedDate_W = TearOff.DModifiedDate;
					}
					return _DModifiedDate_W;
				}
			}

			public AggregateParameter DCreatedDate
		    {
				get
		        {
					if(_DCreatedDate_W == null)
	        	    {
						_DCreatedDate_W = TearOff.DCreatedDate;
					}
					return _DCreatedDate_W;
				}
			}

			private AggregateParameter _PkProductQuantityID_W = null;
			private AggregateParameter _FkProductID_W = null;
			private AggregateParameter _QName_W = null;
			private AggregateParameter _QDescription_W = null;
			private AggregateParameter _QOrder_W = null;
			private AggregateParameter _IsActive_W = null;
			private AggregateParameter _DModifiedDate_W = null;
			private AggregateParameter _DCreatedDate_W = null;

			public void AggregateClauseReset()
			{
				_PkProductQuantityID_W = null;
				_FkProductID_W = null;
				_QName_W = null;
				_QDescription_W = null;
				_QOrder_W = null;
				_IsActive_W = null;
				_DModifiedDate_W = null;
				_DCreatedDate_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblProductQuantitiesInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.PkProductQuantityID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblProductQuantitiesUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblProductQuantitiesDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.PkProductQuantityID);
			p.SourceColumn = ColumnNames.PkProductQuantityID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.PkProductQuantityID);
			p.SourceColumn = ColumnNames.PkProductQuantityID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FkProductID);
			p.SourceColumn = ColumnNames.FkProductID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.QName);
			p.SourceColumn = ColumnNames.QName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.QDescription);
			p.SourceColumn = ColumnNames.QDescription;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.QOrder);
			p.SourceColumn = ColumnNames.QOrder;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsActive);
			p.SourceColumn = ColumnNames.IsActive;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DModifiedDate);
			p.SourceColumn = ColumnNames.DModifiedDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DCreatedDate);
			p.SourceColumn = ColumnNames.DCreatedDate;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
