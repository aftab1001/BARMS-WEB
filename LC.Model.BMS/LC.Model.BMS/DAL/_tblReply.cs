
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.1.7.1)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace LC.Model.BMS.DAL
{
	public abstract class _tblReply : SqlClientEntity
	{
		public _tblReply()
		{
			this.QuerySource = "tblReply";
			this.MappingName = "tblReply";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tblReplyLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int PkReplyID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.PkReplyID, PkReplyID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tblReplyLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter PkReplyID
			{
				get
				{
					return new SqlParameter("@PkReplyID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter FkMessageID
			{
				get
				{
					return new SqlParameter("@FkMessageID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter FkReplyToUserID
			{
				get
				{
					return new SqlParameter("@FkReplyToUserID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter FkReplyFromUserID
			{
				get
				{
					return new SqlParameter("@FkReplyFromUserID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter ReplySubject
			{
				get
				{
					return new SqlParameter("@ReplySubject", SqlDbType.NText, 1073741823);
				}
			}
			
			public static SqlParameter ReplyMessage
			{
				get
				{
					return new SqlParameter("@ReplyMessage", SqlDbType.NText, 1073741823);
				}
			}
			
			public static SqlParameter DReplyDate
			{
				get
				{
					return new SqlParameter("@DReplyDate", SqlDbType.DateTime, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string PkReplyID = "pkReplyID";
            public const string FkMessageID = "fkMessageID";
            public const string FkReplyToUserID = "fkReplyToUserID";
            public const string FkReplyFromUserID = "fkReplyFromUserID";
            public const string ReplySubject = "ReplySubject";
            public const string ReplyMessage = "ReplyMessage";
            public const string DReplyDate = "dReplyDate";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[PkReplyID] = _tblReply.PropertyNames.PkReplyID;
					ht[FkMessageID] = _tblReply.PropertyNames.FkMessageID;
					ht[FkReplyToUserID] = _tblReply.PropertyNames.FkReplyToUserID;
					ht[FkReplyFromUserID] = _tblReply.PropertyNames.FkReplyFromUserID;
					ht[ReplySubject] = _tblReply.PropertyNames.ReplySubject;
					ht[ReplyMessage] = _tblReply.PropertyNames.ReplyMessage;
					ht[DReplyDate] = _tblReply.PropertyNames.DReplyDate;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string PkReplyID = "PkReplyID";
            public const string FkMessageID = "FkMessageID";
            public const string FkReplyToUserID = "FkReplyToUserID";
            public const string FkReplyFromUserID = "FkReplyFromUserID";
            public const string ReplySubject = "ReplySubject";
            public const string ReplyMessage = "ReplyMessage";
            public const string DReplyDate = "DReplyDate";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[PkReplyID] = _tblReply.ColumnNames.PkReplyID;
					ht[FkMessageID] = _tblReply.ColumnNames.FkMessageID;
					ht[FkReplyToUserID] = _tblReply.ColumnNames.FkReplyToUserID;
					ht[FkReplyFromUserID] = _tblReply.ColumnNames.FkReplyFromUserID;
					ht[ReplySubject] = _tblReply.ColumnNames.ReplySubject;
					ht[ReplyMessage] = _tblReply.ColumnNames.ReplyMessage;
					ht[DReplyDate] = _tblReply.ColumnNames.DReplyDate;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string PkReplyID = "s_PkReplyID";
            public const string FkMessageID = "s_FkMessageID";
            public const string FkReplyToUserID = "s_FkReplyToUserID";
            public const string FkReplyFromUserID = "s_FkReplyFromUserID";
            public const string ReplySubject = "s_ReplySubject";
            public const string ReplyMessage = "s_ReplyMessage";
            public const string DReplyDate = "s_DReplyDate";

		}
		#endregion		
		
		#region Properties
	
		public virtual int PkReplyID
	    {
			get
	        {
				return base.Getint(ColumnNames.PkReplyID);
			}
			set
	        {
				base.Setint(ColumnNames.PkReplyID, value);
			}
		}

		public virtual int FkMessageID
	    {
			get
	        {
				return base.Getint(ColumnNames.FkMessageID);
			}
			set
	        {
				base.Setint(ColumnNames.FkMessageID, value);
			}
		}

		public virtual int FkReplyToUserID
	    {
			get
	        {
				return base.Getint(ColumnNames.FkReplyToUserID);
			}
			set
	        {
				base.Setint(ColumnNames.FkReplyToUserID, value);
			}
		}

		public virtual int FkReplyFromUserID
	    {
			get
	        {
				return base.Getint(ColumnNames.FkReplyFromUserID);
			}
			set
	        {
				base.Setint(ColumnNames.FkReplyFromUserID, value);
			}
		}

		public virtual string ReplySubject
	    {
			get
	        {
				return base.Getstring(ColumnNames.ReplySubject);
			}
			set
	        {
				base.Setstring(ColumnNames.ReplySubject, value);
			}
		}

		public virtual string ReplyMessage
	    {
			get
	        {
				return base.Getstring(ColumnNames.ReplyMessage);
			}
			set
	        {
				base.Setstring(ColumnNames.ReplyMessage, value);
			}
		}

		public virtual DateTime DReplyDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.DReplyDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.DReplyDate, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_PkReplyID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PkReplyID) ? string.Empty : base.GetintAsString(ColumnNames.PkReplyID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PkReplyID);
				else
					this.PkReplyID = base.SetintAsString(ColumnNames.PkReplyID, value);
			}
		}

		public virtual string s_FkMessageID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FkMessageID) ? string.Empty : base.GetintAsString(ColumnNames.FkMessageID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FkMessageID);
				else
					this.FkMessageID = base.SetintAsString(ColumnNames.FkMessageID, value);
			}
		}

		public virtual string s_FkReplyToUserID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FkReplyToUserID) ? string.Empty : base.GetintAsString(ColumnNames.FkReplyToUserID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FkReplyToUserID);
				else
					this.FkReplyToUserID = base.SetintAsString(ColumnNames.FkReplyToUserID, value);
			}
		}

		public virtual string s_FkReplyFromUserID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FkReplyFromUserID) ? string.Empty : base.GetintAsString(ColumnNames.FkReplyFromUserID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FkReplyFromUserID);
				else
					this.FkReplyFromUserID = base.SetintAsString(ColumnNames.FkReplyFromUserID, value);
			}
		}

		public virtual string s_ReplySubject
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ReplySubject) ? string.Empty : base.GetstringAsString(ColumnNames.ReplySubject);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ReplySubject);
				else
					this.ReplySubject = base.SetstringAsString(ColumnNames.ReplySubject, value);
			}
		}

		public virtual string s_ReplyMessage
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ReplyMessage) ? string.Empty : base.GetstringAsString(ColumnNames.ReplyMessage);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ReplyMessage);
				else
					this.ReplyMessage = base.SetstringAsString(ColumnNames.ReplyMessage, value);
			}
		}

		public virtual string s_DReplyDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DReplyDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DReplyDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DReplyDate);
				else
					this.DReplyDate = base.SetDateTimeAsString(ColumnNames.DReplyDate, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter PkReplyID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PkReplyID, Parameters.PkReplyID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FkMessageID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FkMessageID, Parameters.FkMessageID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FkReplyToUserID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FkReplyToUserID, Parameters.FkReplyToUserID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FkReplyFromUserID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FkReplyFromUserID, Parameters.FkReplyFromUserID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ReplySubject
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ReplySubject, Parameters.ReplySubject);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ReplyMessage
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ReplyMessage, Parameters.ReplyMessage);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DReplyDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DReplyDate, Parameters.DReplyDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter PkReplyID
		    {
				get
		        {
					if(_PkReplyID_W == null)
	        	    {
						_PkReplyID_W = TearOff.PkReplyID;
					}
					return _PkReplyID_W;
				}
			}

			public WhereParameter FkMessageID
		    {
				get
		        {
					if(_FkMessageID_W == null)
	        	    {
						_FkMessageID_W = TearOff.FkMessageID;
					}
					return _FkMessageID_W;
				}
			}

			public WhereParameter FkReplyToUserID
		    {
				get
		        {
					if(_FkReplyToUserID_W == null)
	        	    {
						_FkReplyToUserID_W = TearOff.FkReplyToUserID;
					}
					return _FkReplyToUserID_W;
				}
			}

			public WhereParameter FkReplyFromUserID
		    {
				get
		        {
					if(_FkReplyFromUserID_W == null)
	        	    {
						_FkReplyFromUserID_W = TearOff.FkReplyFromUserID;
					}
					return _FkReplyFromUserID_W;
				}
			}

			public WhereParameter ReplySubject
		    {
				get
		        {
					if(_ReplySubject_W == null)
	        	    {
						_ReplySubject_W = TearOff.ReplySubject;
					}
					return _ReplySubject_W;
				}
			}

			public WhereParameter ReplyMessage
		    {
				get
		        {
					if(_ReplyMessage_W == null)
	        	    {
						_ReplyMessage_W = TearOff.ReplyMessage;
					}
					return _ReplyMessage_W;
				}
			}

			public WhereParameter DReplyDate
		    {
				get
		        {
					if(_DReplyDate_W == null)
	        	    {
						_DReplyDate_W = TearOff.DReplyDate;
					}
					return _DReplyDate_W;
				}
			}

			private WhereParameter _PkReplyID_W = null;
			private WhereParameter _FkMessageID_W = null;
			private WhereParameter _FkReplyToUserID_W = null;
			private WhereParameter _FkReplyFromUserID_W = null;
			private WhereParameter _ReplySubject_W = null;
			private WhereParameter _ReplyMessage_W = null;
			private WhereParameter _DReplyDate_W = null;

			public void WhereClauseReset()
			{
				_PkReplyID_W = null;
				_FkMessageID_W = null;
				_FkReplyToUserID_W = null;
				_FkReplyFromUserID_W = null;
				_ReplySubject_W = null;
				_ReplyMessage_W = null;
				_DReplyDate_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter PkReplyID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PkReplyID, Parameters.PkReplyID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FkMessageID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FkMessageID, Parameters.FkMessageID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FkReplyToUserID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FkReplyToUserID, Parameters.FkReplyToUserID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FkReplyFromUserID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FkReplyFromUserID, Parameters.FkReplyFromUserID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ReplySubject
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ReplySubject, Parameters.ReplySubject);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ReplyMessage
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ReplyMessage, Parameters.ReplyMessage);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DReplyDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DReplyDate, Parameters.DReplyDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter PkReplyID
		    {
				get
		        {
					if(_PkReplyID_W == null)
	        	    {
						_PkReplyID_W = TearOff.PkReplyID;
					}
					return _PkReplyID_W;
				}
			}

			public AggregateParameter FkMessageID
		    {
				get
		        {
					if(_FkMessageID_W == null)
	        	    {
						_FkMessageID_W = TearOff.FkMessageID;
					}
					return _FkMessageID_W;
				}
			}

			public AggregateParameter FkReplyToUserID
		    {
				get
		        {
					if(_FkReplyToUserID_W == null)
	        	    {
						_FkReplyToUserID_W = TearOff.FkReplyToUserID;
					}
					return _FkReplyToUserID_W;
				}
			}

			public AggregateParameter FkReplyFromUserID
		    {
				get
		        {
					if(_FkReplyFromUserID_W == null)
	        	    {
						_FkReplyFromUserID_W = TearOff.FkReplyFromUserID;
					}
					return _FkReplyFromUserID_W;
				}
			}

			public AggregateParameter ReplySubject
		    {
				get
		        {
					if(_ReplySubject_W == null)
	        	    {
						_ReplySubject_W = TearOff.ReplySubject;
					}
					return _ReplySubject_W;
				}
			}

			public AggregateParameter ReplyMessage
		    {
				get
		        {
					if(_ReplyMessage_W == null)
	        	    {
						_ReplyMessage_W = TearOff.ReplyMessage;
					}
					return _ReplyMessage_W;
				}
			}

			public AggregateParameter DReplyDate
		    {
				get
		        {
					if(_DReplyDate_W == null)
	        	    {
						_DReplyDate_W = TearOff.DReplyDate;
					}
					return _DReplyDate_W;
				}
			}

			private AggregateParameter _PkReplyID_W = null;
			private AggregateParameter _FkMessageID_W = null;
			private AggregateParameter _FkReplyToUserID_W = null;
			private AggregateParameter _FkReplyFromUserID_W = null;
			private AggregateParameter _ReplySubject_W = null;
			private AggregateParameter _ReplyMessage_W = null;
			private AggregateParameter _DReplyDate_W = null;

			public void AggregateClauseReset()
			{
				_PkReplyID_W = null;
				_FkMessageID_W = null;
				_FkReplyToUserID_W = null;
				_FkReplyFromUserID_W = null;
				_ReplySubject_W = null;
				_ReplyMessage_W = null;
				_DReplyDate_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblReplyInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.PkReplyID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblReplyUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblReplyDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.PkReplyID);
			p.SourceColumn = ColumnNames.PkReplyID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.PkReplyID);
			p.SourceColumn = ColumnNames.PkReplyID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FkMessageID);
			p.SourceColumn = ColumnNames.FkMessageID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FkReplyToUserID);
			p.SourceColumn = ColumnNames.FkReplyToUserID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FkReplyFromUserID);
			p.SourceColumn = ColumnNames.FkReplyFromUserID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ReplySubject);
			p.SourceColumn = ColumnNames.ReplySubject;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ReplyMessage);
			p.SourceColumn = ColumnNames.ReplyMessage;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DReplyDate);
			p.SourceColumn = ColumnNames.DReplyDate;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
