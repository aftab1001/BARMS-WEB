
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.1.7.1)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace LC.Model.BMS.DAL
{
	public abstract class _tblUserPayments : SqlClientEntity
	{
		public _tblUserPayments()
		{
			this.QuerySource = "tblUserPayments";
			this.MappingName = "tblUserPayments";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tblUserPaymentsLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int PkUserPaymentID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.PkUserPaymentID, PkUserPaymentID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tblUserPaymentsLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter PkUserPaymentID
			{
				get
				{
					return new SqlParameter("@PkUserPaymentID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter FkUserID
			{
				get
				{
					return new SqlParameter("@FkUserID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter IWeekNumber
			{
				get
				{
					return new SqlParameter("@IWeekNumber", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter DWeekStartDate
			{
				get
				{
					return new SqlParameter("@DWeekStartDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter DWeekEndDate
			{
				get
				{
					return new SqlParameter("@DWeekEndDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter IDayNumber
			{
				get
				{
					return new SqlParameter("@IDayNumber", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Salary
			{
				get
				{
					return new SqlParameter("@Salary", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter Tips
			{
				get
				{
					return new SqlParameter("@Tips", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter Bonus
			{
				get
				{
					return new SqlParameter("@Bonus", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter Advance
			{
				get
				{
					return new SqlParameter("@Advance", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter Penalty
			{
				get
				{
					return new SqlParameter("@Penalty", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter SPenaltyReason
			{
				get
				{
					return new SqlParameter("@SPenaltyReason", SqlDbType.NText, 1073741823);
				}
			}
			
			public static SqlParameter FkPenaltyByUserID
			{
				get
				{
					return new SqlParameter("@FkPenaltyByUserID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter DCreateDate
			{
				get
				{
					return new SqlParameter("@DCreateDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter DModifiedDate
			{
				get
				{
					return new SqlParameter("@DModifiedDate", SqlDbType.DateTime, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string PkUserPaymentID = "pkUserPaymentID";
            public const string FkUserID = "fkUserID";
            public const string IWeekNumber = "iWeekNumber";
            public const string DWeekStartDate = "dWeekStartDate";
            public const string DWeekEndDate = "dWeekEndDate";
            public const string IDayNumber = "iDayNumber";
            public const string Salary = "Salary";
            public const string Tips = "Tips";
            public const string Bonus = "Bonus";
            public const string Advance = "Advance";
            public const string Penalty = "Penalty";
            public const string SPenaltyReason = "sPenaltyReason";
            public const string FkPenaltyByUserID = "fkPenaltyByUserID";
            public const string DCreateDate = "dCreateDate";
            public const string DModifiedDate = "dModifiedDate";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[PkUserPaymentID] = _tblUserPayments.PropertyNames.PkUserPaymentID;
					ht[FkUserID] = _tblUserPayments.PropertyNames.FkUserID;
					ht[IWeekNumber] = _tblUserPayments.PropertyNames.IWeekNumber;
					ht[DWeekStartDate] = _tblUserPayments.PropertyNames.DWeekStartDate;
					ht[DWeekEndDate] = _tblUserPayments.PropertyNames.DWeekEndDate;
					ht[IDayNumber] = _tblUserPayments.PropertyNames.IDayNumber;
					ht[Salary] = _tblUserPayments.PropertyNames.Salary;
					ht[Tips] = _tblUserPayments.PropertyNames.Tips;
					ht[Bonus] = _tblUserPayments.PropertyNames.Bonus;
					ht[Advance] = _tblUserPayments.PropertyNames.Advance;
					ht[Penalty] = _tblUserPayments.PropertyNames.Penalty;
					ht[SPenaltyReason] = _tblUserPayments.PropertyNames.SPenaltyReason;
					ht[FkPenaltyByUserID] = _tblUserPayments.PropertyNames.FkPenaltyByUserID;
					ht[DCreateDate] = _tblUserPayments.PropertyNames.DCreateDate;
					ht[DModifiedDate] = _tblUserPayments.PropertyNames.DModifiedDate;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string PkUserPaymentID = "PkUserPaymentID";
            public const string FkUserID = "FkUserID";
            public const string IWeekNumber = "IWeekNumber";
            public const string DWeekStartDate = "DWeekStartDate";
            public const string DWeekEndDate = "DWeekEndDate";
            public const string IDayNumber = "IDayNumber";
            public const string Salary = "Salary";
            public const string Tips = "Tips";
            public const string Bonus = "Bonus";
            public const string Advance = "Advance";
            public const string Penalty = "Penalty";
            public const string SPenaltyReason = "SPenaltyReason";
            public const string FkPenaltyByUserID = "FkPenaltyByUserID";
            public const string DCreateDate = "DCreateDate";
            public const string DModifiedDate = "DModifiedDate";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[PkUserPaymentID] = _tblUserPayments.ColumnNames.PkUserPaymentID;
					ht[FkUserID] = _tblUserPayments.ColumnNames.FkUserID;
					ht[IWeekNumber] = _tblUserPayments.ColumnNames.IWeekNumber;
					ht[DWeekStartDate] = _tblUserPayments.ColumnNames.DWeekStartDate;
					ht[DWeekEndDate] = _tblUserPayments.ColumnNames.DWeekEndDate;
					ht[IDayNumber] = _tblUserPayments.ColumnNames.IDayNumber;
					ht[Salary] = _tblUserPayments.ColumnNames.Salary;
					ht[Tips] = _tblUserPayments.ColumnNames.Tips;
					ht[Bonus] = _tblUserPayments.ColumnNames.Bonus;
					ht[Advance] = _tblUserPayments.ColumnNames.Advance;
					ht[Penalty] = _tblUserPayments.ColumnNames.Penalty;
					ht[SPenaltyReason] = _tblUserPayments.ColumnNames.SPenaltyReason;
					ht[FkPenaltyByUserID] = _tblUserPayments.ColumnNames.FkPenaltyByUserID;
					ht[DCreateDate] = _tblUserPayments.ColumnNames.DCreateDate;
					ht[DModifiedDate] = _tblUserPayments.ColumnNames.DModifiedDate;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string PkUserPaymentID = "s_PkUserPaymentID";
            public const string FkUserID = "s_FkUserID";
            public const string IWeekNumber = "s_IWeekNumber";
            public const string DWeekStartDate = "s_DWeekStartDate";
            public const string DWeekEndDate = "s_DWeekEndDate";
            public const string IDayNumber = "s_IDayNumber";
            public const string Salary = "s_Salary";
            public const string Tips = "s_Tips";
            public const string Bonus = "s_Bonus";
            public const string Advance = "s_Advance";
            public const string Penalty = "s_Penalty";
            public const string SPenaltyReason = "s_SPenaltyReason";
            public const string FkPenaltyByUserID = "s_FkPenaltyByUserID";
            public const string DCreateDate = "s_DCreateDate";
            public const string DModifiedDate = "s_DModifiedDate";

		}
		#endregion		
		
		#region Properties
	
		public virtual int PkUserPaymentID
	    {
			get
	        {
				return base.Getint(ColumnNames.PkUserPaymentID);
			}
			set
	        {
				base.Setint(ColumnNames.PkUserPaymentID, value);
			}
		}

		public virtual int FkUserID
	    {
			get
	        {
				return base.Getint(ColumnNames.FkUserID);
			}
			set
	        {
				base.Setint(ColumnNames.FkUserID, value);
			}
		}

		public virtual int IWeekNumber
	    {
			get
	        {
				return base.Getint(ColumnNames.IWeekNumber);
			}
			set
	        {
				base.Setint(ColumnNames.IWeekNumber, value);
			}
		}

		public virtual DateTime DWeekStartDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.DWeekStartDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.DWeekStartDate, value);
			}
		}

		public virtual DateTime DWeekEndDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.DWeekEndDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.DWeekEndDate, value);
			}
		}

		public virtual int IDayNumber
	    {
			get
	        {
				return base.Getint(ColumnNames.IDayNumber);
			}
			set
	        {
				base.Setint(ColumnNames.IDayNumber, value);
			}
		}

		public virtual double Salary
	    {
			get
	        {
				return base.Getdouble(ColumnNames.Salary);
			}
			set
	        {
				base.Setdouble(ColumnNames.Salary, value);
			}
		}

		public virtual double Tips
	    {
			get
	        {
				return base.Getdouble(ColumnNames.Tips);
			}
			set
	        {
				base.Setdouble(ColumnNames.Tips, value);
			}
		}

		public virtual double Bonus
	    {
			get
	        {
				return base.Getdouble(ColumnNames.Bonus);
			}
			set
	        {
				base.Setdouble(ColumnNames.Bonus, value);
			}
		}

		public virtual double Advance
	    {
			get
	        {
				return base.Getdouble(ColumnNames.Advance);
			}
			set
	        {
				base.Setdouble(ColumnNames.Advance, value);
			}
		}

		public virtual double Penalty
	    {
			get
	        {
				return base.Getdouble(ColumnNames.Penalty);
			}
			set
	        {
				base.Setdouble(ColumnNames.Penalty, value);
			}
		}

		public virtual string SPenaltyReason
	    {
			get
	        {
				return base.Getstring(ColumnNames.SPenaltyReason);
			}
			set
	        {
				base.Setstring(ColumnNames.SPenaltyReason, value);
			}
		}

		public virtual int FkPenaltyByUserID
	    {
			get
	        {
				return base.Getint(ColumnNames.FkPenaltyByUserID);
			}
			set
	        {
				base.Setint(ColumnNames.FkPenaltyByUserID, value);
			}
		}

		public virtual DateTime DCreateDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.DCreateDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.DCreateDate, value);
			}
		}

		public virtual DateTime DModifiedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.DModifiedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.DModifiedDate, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_PkUserPaymentID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PkUserPaymentID) ? string.Empty : base.GetintAsString(ColumnNames.PkUserPaymentID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PkUserPaymentID);
				else
					this.PkUserPaymentID = base.SetintAsString(ColumnNames.PkUserPaymentID, value);
			}
		}

		public virtual string s_FkUserID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FkUserID) ? string.Empty : base.GetintAsString(ColumnNames.FkUserID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FkUserID);
				else
					this.FkUserID = base.SetintAsString(ColumnNames.FkUserID, value);
			}
		}

		public virtual string s_IWeekNumber
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IWeekNumber) ? string.Empty : base.GetintAsString(ColumnNames.IWeekNumber);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IWeekNumber);
				else
					this.IWeekNumber = base.SetintAsString(ColumnNames.IWeekNumber, value);
			}
		}

		public virtual string s_DWeekStartDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DWeekStartDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DWeekStartDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DWeekStartDate);
				else
					this.DWeekStartDate = base.SetDateTimeAsString(ColumnNames.DWeekStartDate, value);
			}
		}

		public virtual string s_DWeekEndDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DWeekEndDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DWeekEndDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DWeekEndDate);
				else
					this.DWeekEndDate = base.SetDateTimeAsString(ColumnNames.DWeekEndDate, value);
			}
		}

		public virtual string s_IDayNumber
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IDayNumber) ? string.Empty : base.GetintAsString(ColumnNames.IDayNumber);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IDayNumber);
				else
					this.IDayNumber = base.SetintAsString(ColumnNames.IDayNumber, value);
			}
		}

		public virtual string s_Salary
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Salary) ? string.Empty : base.GetdoubleAsString(ColumnNames.Salary);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Salary);
				else
					this.Salary = base.SetdoubleAsString(ColumnNames.Salary, value);
			}
		}

		public virtual string s_Tips
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Tips) ? string.Empty : base.GetdoubleAsString(ColumnNames.Tips);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Tips);
				else
					this.Tips = base.SetdoubleAsString(ColumnNames.Tips, value);
			}
		}

		public virtual string s_Bonus
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Bonus) ? string.Empty : base.GetdoubleAsString(ColumnNames.Bonus);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Bonus);
				else
					this.Bonus = base.SetdoubleAsString(ColumnNames.Bonus, value);
			}
		}

		public virtual string s_Advance
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Advance) ? string.Empty : base.GetdoubleAsString(ColumnNames.Advance);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Advance);
				else
					this.Advance = base.SetdoubleAsString(ColumnNames.Advance, value);
			}
		}

		public virtual string s_Penalty
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Penalty) ? string.Empty : base.GetdoubleAsString(ColumnNames.Penalty);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Penalty);
				else
					this.Penalty = base.SetdoubleAsString(ColumnNames.Penalty, value);
			}
		}

		public virtual string s_SPenaltyReason
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SPenaltyReason) ? string.Empty : base.GetstringAsString(ColumnNames.SPenaltyReason);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SPenaltyReason);
				else
					this.SPenaltyReason = base.SetstringAsString(ColumnNames.SPenaltyReason, value);
			}
		}

		public virtual string s_FkPenaltyByUserID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FkPenaltyByUserID) ? string.Empty : base.GetintAsString(ColumnNames.FkPenaltyByUserID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FkPenaltyByUserID);
				else
					this.FkPenaltyByUserID = base.SetintAsString(ColumnNames.FkPenaltyByUserID, value);
			}
		}

		public virtual string s_DCreateDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DCreateDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DCreateDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DCreateDate);
				else
					this.DCreateDate = base.SetDateTimeAsString(ColumnNames.DCreateDate, value);
			}
		}

		public virtual string s_DModifiedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DModifiedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DModifiedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DModifiedDate);
				else
					this.DModifiedDate = base.SetDateTimeAsString(ColumnNames.DModifiedDate, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter PkUserPaymentID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PkUserPaymentID, Parameters.PkUserPaymentID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FkUserID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FkUserID, Parameters.FkUserID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IWeekNumber
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IWeekNumber, Parameters.IWeekNumber);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DWeekStartDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DWeekStartDate, Parameters.DWeekStartDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DWeekEndDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DWeekEndDate, Parameters.DWeekEndDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IDayNumber
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IDayNumber, Parameters.IDayNumber);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Salary
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Salary, Parameters.Salary);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Tips
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Tips, Parameters.Tips);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Bonus
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Bonus, Parameters.Bonus);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Advance
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Advance, Parameters.Advance);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Penalty
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Penalty, Parameters.Penalty);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SPenaltyReason
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SPenaltyReason, Parameters.SPenaltyReason);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FkPenaltyByUserID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FkPenaltyByUserID, Parameters.FkPenaltyByUserID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DCreateDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DCreateDate, Parameters.DCreateDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DModifiedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DModifiedDate, Parameters.DModifiedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter PkUserPaymentID
		    {
				get
		        {
					if(_PkUserPaymentID_W == null)
	        	    {
						_PkUserPaymentID_W = TearOff.PkUserPaymentID;
					}
					return _PkUserPaymentID_W;
				}
			}

			public WhereParameter FkUserID
		    {
				get
		        {
					if(_FkUserID_W == null)
	        	    {
						_FkUserID_W = TearOff.FkUserID;
					}
					return _FkUserID_W;
				}
			}

			public WhereParameter IWeekNumber
		    {
				get
		        {
					if(_IWeekNumber_W == null)
	        	    {
						_IWeekNumber_W = TearOff.IWeekNumber;
					}
					return _IWeekNumber_W;
				}
			}

			public WhereParameter DWeekStartDate
		    {
				get
		        {
					if(_DWeekStartDate_W == null)
	        	    {
						_DWeekStartDate_W = TearOff.DWeekStartDate;
					}
					return _DWeekStartDate_W;
				}
			}

			public WhereParameter DWeekEndDate
		    {
				get
		        {
					if(_DWeekEndDate_W == null)
	        	    {
						_DWeekEndDate_W = TearOff.DWeekEndDate;
					}
					return _DWeekEndDate_W;
				}
			}

			public WhereParameter IDayNumber
		    {
				get
		        {
					if(_IDayNumber_W == null)
	        	    {
						_IDayNumber_W = TearOff.IDayNumber;
					}
					return _IDayNumber_W;
				}
			}

			public WhereParameter Salary
		    {
				get
		        {
					if(_Salary_W == null)
	        	    {
						_Salary_W = TearOff.Salary;
					}
					return _Salary_W;
				}
			}

			public WhereParameter Tips
		    {
				get
		        {
					if(_Tips_W == null)
	        	    {
						_Tips_W = TearOff.Tips;
					}
					return _Tips_W;
				}
			}

			public WhereParameter Bonus
		    {
				get
		        {
					if(_Bonus_W == null)
	        	    {
						_Bonus_W = TearOff.Bonus;
					}
					return _Bonus_W;
				}
			}

			public WhereParameter Advance
		    {
				get
		        {
					if(_Advance_W == null)
	        	    {
						_Advance_W = TearOff.Advance;
					}
					return _Advance_W;
				}
			}

			public WhereParameter Penalty
		    {
				get
		        {
					if(_Penalty_W == null)
	        	    {
						_Penalty_W = TearOff.Penalty;
					}
					return _Penalty_W;
				}
			}

			public WhereParameter SPenaltyReason
		    {
				get
		        {
					if(_SPenaltyReason_W == null)
	        	    {
						_SPenaltyReason_W = TearOff.SPenaltyReason;
					}
					return _SPenaltyReason_W;
				}
			}

			public WhereParameter FkPenaltyByUserID
		    {
				get
		        {
					if(_FkPenaltyByUserID_W == null)
	        	    {
						_FkPenaltyByUserID_W = TearOff.FkPenaltyByUserID;
					}
					return _FkPenaltyByUserID_W;
				}
			}

			public WhereParameter DCreateDate
		    {
				get
		        {
					if(_DCreateDate_W == null)
	        	    {
						_DCreateDate_W = TearOff.DCreateDate;
					}
					return _DCreateDate_W;
				}
			}

			public WhereParameter DModifiedDate
		    {
				get
		        {
					if(_DModifiedDate_W == null)
	        	    {
						_DModifiedDate_W = TearOff.DModifiedDate;
					}
					return _DModifiedDate_W;
				}
			}

			private WhereParameter _PkUserPaymentID_W = null;
			private WhereParameter _FkUserID_W = null;
			private WhereParameter _IWeekNumber_W = null;
			private WhereParameter _DWeekStartDate_W = null;
			private WhereParameter _DWeekEndDate_W = null;
			private WhereParameter _IDayNumber_W = null;
			private WhereParameter _Salary_W = null;
			private WhereParameter _Tips_W = null;
			private WhereParameter _Bonus_W = null;
			private WhereParameter _Advance_W = null;
			private WhereParameter _Penalty_W = null;
			private WhereParameter _SPenaltyReason_W = null;
			private WhereParameter _FkPenaltyByUserID_W = null;
			private WhereParameter _DCreateDate_W = null;
			private WhereParameter _DModifiedDate_W = null;

			public void WhereClauseReset()
			{
				_PkUserPaymentID_W = null;
				_FkUserID_W = null;
				_IWeekNumber_W = null;
				_DWeekStartDate_W = null;
				_DWeekEndDate_W = null;
				_IDayNumber_W = null;
				_Salary_W = null;
				_Tips_W = null;
				_Bonus_W = null;
				_Advance_W = null;
				_Penalty_W = null;
				_SPenaltyReason_W = null;
				_FkPenaltyByUserID_W = null;
				_DCreateDate_W = null;
				_DModifiedDate_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter PkUserPaymentID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PkUserPaymentID, Parameters.PkUserPaymentID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FkUserID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FkUserID, Parameters.FkUserID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IWeekNumber
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IWeekNumber, Parameters.IWeekNumber);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DWeekStartDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DWeekStartDate, Parameters.DWeekStartDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DWeekEndDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DWeekEndDate, Parameters.DWeekEndDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IDayNumber
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IDayNumber, Parameters.IDayNumber);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Salary
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Salary, Parameters.Salary);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Tips
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Tips, Parameters.Tips);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Bonus
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Bonus, Parameters.Bonus);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Advance
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Advance, Parameters.Advance);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Penalty
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Penalty, Parameters.Penalty);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SPenaltyReason
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SPenaltyReason, Parameters.SPenaltyReason);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FkPenaltyByUserID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FkPenaltyByUserID, Parameters.FkPenaltyByUserID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DCreateDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DCreateDate, Parameters.DCreateDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DModifiedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DModifiedDate, Parameters.DModifiedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter PkUserPaymentID
		    {
				get
		        {
					if(_PkUserPaymentID_W == null)
	        	    {
						_PkUserPaymentID_W = TearOff.PkUserPaymentID;
					}
					return _PkUserPaymentID_W;
				}
			}

			public AggregateParameter FkUserID
		    {
				get
		        {
					if(_FkUserID_W == null)
	        	    {
						_FkUserID_W = TearOff.FkUserID;
					}
					return _FkUserID_W;
				}
			}

			public AggregateParameter IWeekNumber
		    {
				get
		        {
					if(_IWeekNumber_W == null)
	        	    {
						_IWeekNumber_W = TearOff.IWeekNumber;
					}
					return _IWeekNumber_W;
				}
			}

			public AggregateParameter DWeekStartDate
		    {
				get
		        {
					if(_DWeekStartDate_W == null)
	        	    {
						_DWeekStartDate_W = TearOff.DWeekStartDate;
					}
					return _DWeekStartDate_W;
				}
			}

			public AggregateParameter DWeekEndDate
		    {
				get
		        {
					if(_DWeekEndDate_W == null)
	        	    {
						_DWeekEndDate_W = TearOff.DWeekEndDate;
					}
					return _DWeekEndDate_W;
				}
			}

			public AggregateParameter IDayNumber
		    {
				get
		        {
					if(_IDayNumber_W == null)
	        	    {
						_IDayNumber_W = TearOff.IDayNumber;
					}
					return _IDayNumber_W;
				}
			}

			public AggregateParameter Salary
		    {
				get
		        {
					if(_Salary_W == null)
	        	    {
						_Salary_W = TearOff.Salary;
					}
					return _Salary_W;
				}
			}

			public AggregateParameter Tips
		    {
				get
		        {
					if(_Tips_W == null)
	        	    {
						_Tips_W = TearOff.Tips;
					}
					return _Tips_W;
				}
			}

			public AggregateParameter Bonus
		    {
				get
		        {
					if(_Bonus_W == null)
	        	    {
						_Bonus_W = TearOff.Bonus;
					}
					return _Bonus_W;
				}
			}

			public AggregateParameter Advance
		    {
				get
		        {
					if(_Advance_W == null)
	        	    {
						_Advance_W = TearOff.Advance;
					}
					return _Advance_W;
				}
			}

			public AggregateParameter Penalty
		    {
				get
		        {
					if(_Penalty_W == null)
	        	    {
						_Penalty_W = TearOff.Penalty;
					}
					return _Penalty_W;
				}
			}

			public AggregateParameter SPenaltyReason
		    {
				get
		        {
					if(_SPenaltyReason_W == null)
	        	    {
						_SPenaltyReason_W = TearOff.SPenaltyReason;
					}
					return _SPenaltyReason_W;
				}
			}

			public AggregateParameter FkPenaltyByUserID
		    {
				get
		        {
					if(_FkPenaltyByUserID_W == null)
	        	    {
						_FkPenaltyByUserID_W = TearOff.FkPenaltyByUserID;
					}
					return _FkPenaltyByUserID_W;
				}
			}

			public AggregateParameter DCreateDate
		    {
				get
		        {
					if(_DCreateDate_W == null)
	        	    {
						_DCreateDate_W = TearOff.DCreateDate;
					}
					return _DCreateDate_W;
				}
			}

			public AggregateParameter DModifiedDate
		    {
				get
		        {
					if(_DModifiedDate_W == null)
	        	    {
						_DModifiedDate_W = TearOff.DModifiedDate;
					}
					return _DModifiedDate_W;
				}
			}

			private AggregateParameter _PkUserPaymentID_W = null;
			private AggregateParameter _FkUserID_W = null;
			private AggregateParameter _IWeekNumber_W = null;
			private AggregateParameter _DWeekStartDate_W = null;
			private AggregateParameter _DWeekEndDate_W = null;
			private AggregateParameter _IDayNumber_W = null;
			private AggregateParameter _Salary_W = null;
			private AggregateParameter _Tips_W = null;
			private AggregateParameter _Bonus_W = null;
			private AggregateParameter _Advance_W = null;
			private AggregateParameter _Penalty_W = null;
			private AggregateParameter _SPenaltyReason_W = null;
			private AggregateParameter _FkPenaltyByUserID_W = null;
			private AggregateParameter _DCreateDate_W = null;
			private AggregateParameter _DModifiedDate_W = null;

			public void AggregateClauseReset()
			{
				_PkUserPaymentID_W = null;
				_FkUserID_W = null;
				_IWeekNumber_W = null;
				_DWeekStartDate_W = null;
				_DWeekEndDate_W = null;
				_IDayNumber_W = null;
				_Salary_W = null;
				_Tips_W = null;
				_Bonus_W = null;
				_Advance_W = null;
				_Penalty_W = null;
				_SPenaltyReason_W = null;
				_FkPenaltyByUserID_W = null;
				_DCreateDate_W = null;
				_DModifiedDate_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblUserPaymentsInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.PkUserPaymentID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblUserPaymentsUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblUserPaymentsDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.PkUserPaymentID);
			p.SourceColumn = ColumnNames.PkUserPaymentID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.PkUserPaymentID);
			p.SourceColumn = ColumnNames.PkUserPaymentID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FkUserID);
			p.SourceColumn = ColumnNames.FkUserID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IWeekNumber);
			p.SourceColumn = ColumnNames.IWeekNumber;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DWeekStartDate);
			p.SourceColumn = ColumnNames.DWeekStartDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DWeekEndDate);
			p.SourceColumn = ColumnNames.DWeekEndDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IDayNumber);
			p.SourceColumn = ColumnNames.IDayNumber;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Salary);
			p.SourceColumn = ColumnNames.Salary;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Tips);
			p.SourceColumn = ColumnNames.Tips;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Bonus);
			p.SourceColumn = ColumnNames.Bonus;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Advance);
			p.SourceColumn = ColumnNames.Advance;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Penalty);
			p.SourceColumn = ColumnNames.Penalty;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SPenaltyReason);
			p.SourceColumn = ColumnNames.SPenaltyReason;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FkPenaltyByUserID);
			p.SourceColumn = ColumnNames.FkPenaltyByUserID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DCreateDate);
			p.SourceColumn = ColumnNames.DCreateDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DModifiedDate);
			p.SourceColumn = ColumnNames.DModifiedDate;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
