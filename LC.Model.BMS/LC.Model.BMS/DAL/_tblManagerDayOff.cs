
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.1.7.1)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace LC.Model.BMS.DAL
{
	public abstract class _tblManagerDayOff : SqlClientEntity
	{
		public _tblManagerDayOff()
		{
			this.QuerySource = "tblManagerDayOff";
			this.MappingName = "tblManagerDayOff";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tblManagerDayOffLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int PkManagerDayOffID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.PkManagerDayOffID, PkManagerDayOffID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tblManagerDayOffLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter PkManagerDayOffID
			{
				get
				{
					return new SqlParameter("@PkManagerDayOffID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Fkuserid
			{
				get
				{
					return new SqlParameter("@Fkuserid", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter MSingleDate
			{
				get
				{
					return new SqlParameter("@MSingleDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter MReason
			{
				get
				{
					return new SqlParameter("@MReason", SqlDbType.NText, 1073741823);
				}
			}
			
			public static SqlParameter MStartDate
			{
				get
				{
					return new SqlParameter("@MStartDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter MEndDate
			{
				get
				{
					return new SqlParameter("@MEndDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter MLongReason
			{
				get
				{
					return new SqlParameter("@MLongReason", SqlDbType.NText, 1073741823);
				}
			}
			
			public static SqlParameter DCreatedDate
			{
				get
				{
					return new SqlParameter("@DCreatedDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter DModifiedDate
			{
				get
				{
					return new SqlParameter("@DModifiedDate", SqlDbType.DateTime, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string PkManagerDayOffID = "pkManagerDayOffID";
            public const string Fkuserid = "fkuserid";
            public const string MSingleDate = "mSingleDate";
            public const string MReason = "mReason";
            public const string MStartDate = "mStartDate";
            public const string MEndDate = "mEndDate";
            public const string MLongReason = "mLongReason";
            public const string DCreatedDate = "dCreatedDate";
            public const string DModifiedDate = "dModifiedDate";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[PkManagerDayOffID] = _tblManagerDayOff.PropertyNames.PkManagerDayOffID;
					ht[Fkuserid] = _tblManagerDayOff.PropertyNames.Fkuserid;
					ht[MSingleDate] = _tblManagerDayOff.PropertyNames.MSingleDate;
					ht[MReason] = _tblManagerDayOff.PropertyNames.MReason;
					ht[MStartDate] = _tblManagerDayOff.PropertyNames.MStartDate;
					ht[MEndDate] = _tblManagerDayOff.PropertyNames.MEndDate;
					ht[MLongReason] = _tblManagerDayOff.PropertyNames.MLongReason;
					ht[DCreatedDate] = _tblManagerDayOff.PropertyNames.DCreatedDate;
					ht[DModifiedDate] = _tblManagerDayOff.PropertyNames.DModifiedDate;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string PkManagerDayOffID = "PkManagerDayOffID";
            public const string Fkuserid = "Fkuserid";
            public const string MSingleDate = "MSingleDate";
            public const string MReason = "MReason";
            public const string MStartDate = "MStartDate";
            public const string MEndDate = "MEndDate";
            public const string MLongReason = "MLongReason";
            public const string DCreatedDate = "DCreatedDate";
            public const string DModifiedDate = "DModifiedDate";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[PkManagerDayOffID] = _tblManagerDayOff.ColumnNames.PkManagerDayOffID;
					ht[Fkuserid] = _tblManagerDayOff.ColumnNames.Fkuserid;
					ht[MSingleDate] = _tblManagerDayOff.ColumnNames.MSingleDate;
					ht[MReason] = _tblManagerDayOff.ColumnNames.MReason;
					ht[MStartDate] = _tblManagerDayOff.ColumnNames.MStartDate;
					ht[MEndDate] = _tblManagerDayOff.ColumnNames.MEndDate;
					ht[MLongReason] = _tblManagerDayOff.ColumnNames.MLongReason;
					ht[DCreatedDate] = _tblManagerDayOff.ColumnNames.DCreatedDate;
					ht[DModifiedDate] = _tblManagerDayOff.ColumnNames.DModifiedDate;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string PkManagerDayOffID = "s_PkManagerDayOffID";
            public const string Fkuserid = "s_Fkuserid";
            public const string MSingleDate = "s_MSingleDate";
            public const string MReason = "s_MReason";
            public const string MStartDate = "s_MStartDate";
            public const string MEndDate = "s_MEndDate";
            public const string MLongReason = "s_MLongReason";
            public const string DCreatedDate = "s_DCreatedDate";
            public const string DModifiedDate = "s_DModifiedDate";

		}
		#endregion		
		
		#region Properties
	
		public virtual int PkManagerDayOffID
	    {
			get
	        {
				return base.Getint(ColumnNames.PkManagerDayOffID);
			}
			set
	        {
				base.Setint(ColumnNames.PkManagerDayOffID, value);
			}
		}

		public virtual int Fkuserid
	    {
			get
	        {
				return base.Getint(ColumnNames.Fkuserid);
			}
			set
	        {
				base.Setint(ColumnNames.Fkuserid, value);
			}
		}

		public virtual DateTime MSingleDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.MSingleDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.MSingleDate, value);
			}
		}

		public virtual string MReason
	    {
			get
	        {
				return base.Getstring(ColumnNames.MReason);
			}
			set
	        {
				base.Setstring(ColumnNames.MReason, value);
			}
		}

		public virtual DateTime MStartDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.MStartDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.MStartDate, value);
			}
		}

		public virtual DateTime MEndDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.MEndDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.MEndDate, value);
			}
		}

		public virtual string MLongReason
	    {
			get
	        {
				return base.Getstring(ColumnNames.MLongReason);
			}
			set
	        {
				base.Setstring(ColumnNames.MLongReason, value);
			}
		}

		public virtual DateTime DCreatedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.DCreatedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.DCreatedDate, value);
			}
		}

		public virtual DateTime DModifiedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.DModifiedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.DModifiedDate, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_PkManagerDayOffID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PkManagerDayOffID) ? string.Empty : base.GetintAsString(ColumnNames.PkManagerDayOffID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PkManagerDayOffID);
				else
					this.PkManagerDayOffID = base.SetintAsString(ColumnNames.PkManagerDayOffID, value);
			}
		}

		public virtual string s_Fkuserid
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Fkuserid) ? string.Empty : base.GetintAsString(ColumnNames.Fkuserid);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Fkuserid);
				else
					this.Fkuserid = base.SetintAsString(ColumnNames.Fkuserid, value);
			}
		}

		public virtual string s_MSingleDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MSingleDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.MSingleDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MSingleDate);
				else
					this.MSingleDate = base.SetDateTimeAsString(ColumnNames.MSingleDate, value);
			}
		}

		public virtual string s_MReason
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MReason) ? string.Empty : base.GetstringAsString(ColumnNames.MReason);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MReason);
				else
					this.MReason = base.SetstringAsString(ColumnNames.MReason, value);
			}
		}

		public virtual string s_MStartDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MStartDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.MStartDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MStartDate);
				else
					this.MStartDate = base.SetDateTimeAsString(ColumnNames.MStartDate, value);
			}
		}

		public virtual string s_MEndDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MEndDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.MEndDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MEndDate);
				else
					this.MEndDate = base.SetDateTimeAsString(ColumnNames.MEndDate, value);
			}
		}

		public virtual string s_MLongReason
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MLongReason) ? string.Empty : base.GetstringAsString(ColumnNames.MLongReason);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MLongReason);
				else
					this.MLongReason = base.SetstringAsString(ColumnNames.MLongReason, value);
			}
		}

		public virtual string s_DCreatedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DCreatedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DCreatedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DCreatedDate);
				else
					this.DCreatedDate = base.SetDateTimeAsString(ColumnNames.DCreatedDate, value);
			}
		}

		public virtual string s_DModifiedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DModifiedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DModifiedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DModifiedDate);
				else
					this.DModifiedDate = base.SetDateTimeAsString(ColumnNames.DModifiedDate, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter PkManagerDayOffID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PkManagerDayOffID, Parameters.PkManagerDayOffID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Fkuserid
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Fkuserid, Parameters.Fkuserid);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MSingleDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MSingleDate, Parameters.MSingleDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MReason
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MReason, Parameters.MReason);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MStartDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MStartDate, Parameters.MStartDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MEndDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MEndDate, Parameters.MEndDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MLongReason
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MLongReason, Parameters.MLongReason);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DCreatedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DCreatedDate, Parameters.DCreatedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DModifiedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DModifiedDate, Parameters.DModifiedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter PkManagerDayOffID
		    {
				get
		        {
					if(_PkManagerDayOffID_W == null)
	        	    {
						_PkManagerDayOffID_W = TearOff.PkManagerDayOffID;
					}
					return _PkManagerDayOffID_W;
				}
			}

			public WhereParameter Fkuserid
		    {
				get
		        {
					if(_Fkuserid_W == null)
	        	    {
						_Fkuserid_W = TearOff.Fkuserid;
					}
					return _Fkuserid_W;
				}
			}

			public WhereParameter MSingleDate
		    {
				get
		        {
					if(_MSingleDate_W == null)
	        	    {
						_MSingleDate_W = TearOff.MSingleDate;
					}
					return _MSingleDate_W;
				}
			}

			public WhereParameter MReason
		    {
				get
		        {
					if(_MReason_W == null)
	        	    {
						_MReason_W = TearOff.MReason;
					}
					return _MReason_W;
				}
			}

			public WhereParameter MStartDate
		    {
				get
		        {
					if(_MStartDate_W == null)
	        	    {
						_MStartDate_W = TearOff.MStartDate;
					}
					return _MStartDate_W;
				}
			}

			public WhereParameter MEndDate
		    {
				get
		        {
					if(_MEndDate_W == null)
	        	    {
						_MEndDate_W = TearOff.MEndDate;
					}
					return _MEndDate_W;
				}
			}

			public WhereParameter MLongReason
		    {
				get
		        {
					if(_MLongReason_W == null)
	        	    {
						_MLongReason_W = TearOff.MLongReason;
					}
					return _MLongReason_W;
				}
			}

			public WhereParameter DCreatedDate
		    {
				get
		        {
					if(_DCreatedDate_W == null)
	        	    {
						_DCreatedDate_W = TearOff.DCreatedDate;
					}
					return _DCreatedDate_W;
				}
			}

			public WhereParameter DModifiedDate
		    {
				get
		        {
					if(_DModifiedDate_W == null)
	        	    {
						_DModifiedDate_W = TearOff.DModifiedDate;
					}
					return _DModifiedDate_W;
				}
			}

			private WhereParameter _PkManagerDayOffID_W = null;
			private WhereParameter _Fkuserid_W = null;
			private WhereParameter _MSingleDate_W = null;
			private WhereParameter _MReason_W = null;
			private WhereParameter _MStartDate_W = null;
			private WhereParameter _MEndDate_W = null;
			private WhereParameter _MLongReason_W = null;
			private WhereParameter _DCreatedDate_W = null;
			private WhereParameter _DModifiedDate_W = null;

			public void WhereClauseReset()
			{
				_PkManagerDayOffID_W = null;
				_Fkuserid_W = null;
				_MSingleDate_W = null;
				_MReason_W = null;
				_MStartDate_W = null;
				_MEndDate_W = null;
				_MLongReason_W = null;
				_DCreatedDate_W = null;
				_DModifiedDate_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter PkManagerDayOffID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PkManagerDayOffID, Parameters.PkManagerDayOffID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Fkuserid
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Fkuserid, Parameters.Fkuserid);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MSingleDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MSingleDate, Parameters.MSingleDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MReason
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MReason, Parameters.MReason);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MStartDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MStartDate, Parameters.MStartDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MEndDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MEndDate, Parameters.MEndDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MLongReason
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MLongReason, Parameters.MLongReason);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DCreatedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DCreatedDate, Parameters.DCreatedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DModifiedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DModifiedDate, Parameters.DModifiedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter PkManagerDayOffID
		    {
				get
		        {
					if(_PkManagerDayOffID_W == null)
	        	    {
						_PkManagerDayOffID_W = TearOff.PkManagerDayOffID;
					}
					return _PkManagerDayOffID_W;
				}
			}

			public AggregateParameter Fkuserid
		    {
				get
		        {
					if(_Fkuserid_W == null)
	        	    {
						_Fkuserid_W = TearOff.Fkuserid;
					}
					return _Fkuserid_W;
				}
			}

			public AggregateParameter MSingleDate
		    {
				get
		        {
					if(_MSingleDate_W == null)
	        	    {
						_MSingleDate_W = TearOff.MSingleDate;
					}
					return _MSingleDate_W;
				}
			}

			public AggregateParameter MReason
		    {
				get
		        {
					if(_MReason_W == null)
	        	    {
						_MReason_W = TearOff.MReason;
					}
					return _MReason_W;
				}
			}

			public AggregateParameter MStartDate
		    {
				get
		        {
					if(_MStartDate_W == null)
	        	    {
						_MStartDate_W = TearOff.MStartDate;
					}
					return _MStartDate_W;
				}
			}

			public AggregateParameter MEndDate
		    {
				get
		        {
					if(_MEndDate_W == null)
	        	    {
						_MEndDate_W = TearOff.MEndDate;
					}
					return _MEndDate_W;
				}
			}

			public AggregateParameter MLongReason
		    {
				get
		        {
					if(_MLongReason_W == null)
	        	    {
						_MLongReason_W = TearOff.MLongReason;
					}
					return _MLongReason_W;
				}
			}

			public AggregateParameter DCreatedDate
		    {
				get
		        {
					if(_DCreatedDate_W == null)
	        	    {
						_DCreatedDate_W = TearOff.DCreatedDate;
					}
					return _DCreatedDate_W;
				}
			}

			public AggregateParameter DModifiedDate
		    {
				get
		        {
					if(_DModifiedDate_W == null)
	        	    {
						_DModifiedDate_W = TearOff.DModifiedDate;
					}
					return _DModifiedDate_W;
				}
			}

			private AggregateParameter _PkManagerDayOffID_W = null;
			private AggregateParameter _Fkuserid_W = null;
			private AggregateParameter _MSingleDate_W = null;
			private AggregateParameter _MReason_W = null;
			private AggregateParameter _MStartDate_W = null;
			private AggregateParameter _MEndDate_W = null;
			private AggregateParameter _MLongReason_W = null;
			private AggregateParameter _DCreatedDate_W = null;
			private AggregateParameter _DModifiedDate_W = null;

			public void AggregateClauseReset()
			{
				_PkManagerDayOffID_W = null;
				_Fkuserid_W = null;
				_MSingleDate_W = null;
				_MReason_W = null;
				_MStartDate_W = null;
				_MEndDate_W = null;
				_MLongReason_W = null;
				_DCreatedDate_W = null;
				_DModifiedDate_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblManagerDayOffInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.PkManagerDayOffID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblManagerDayOffUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblManagerDayOffDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.PkManagerDayOffID);
			p.SourceColumn = ColumnNames.PkManagerDayOffID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.PkManagerDayOffID);
			p.SourceColumn = ColumnNames.PkManagerDayOffID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Fkuserid);
			p.SourceColumn = ColumnNames.Fkuserid;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MSingleDate);
			p.SourceColumn = ColumnNames.MSingleDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MReason);
			p.SourceColumn = ColumnNames.MReason;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MStartDate);
			p.SourceColumn = ColumnNames.MStartDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MEndDate);
			p.SourceColumn = ColumnNames.MEndDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MLongReason);
			p.SourceColumn = ColumnNames.MLongReason;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DCreatedDate);
			p.SourceColumn = ColumnNames.DCreatedDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DModifiedDate);
			p.SourceColumn = ColumnNames.DModifiedDate;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
