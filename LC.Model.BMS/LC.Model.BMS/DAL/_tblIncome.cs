
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.1.7.1)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace LC.Model.BMS.DAL
{
	public abstract class _tblIncome : SqlClientEntity
	{
		public _tblIncome()
		{
			this.QuerySource = "tblIncome";
			this.MappingName = "tblIncome";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tblIncomeLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int PkIncomID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.PkIncomID, PkIncomID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tblIncomeLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter PkIncomID
			{
				get
				{
					return new SqlParameter("@PkIncomID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter FkUserID
			{
				get
				{
					return new SqlParameter("@FkUserID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter FkUserWorkshiftID
			{
				get
				{
					return new SqlParameter("@FkUserWorkshiftID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter UserTip
			{
				get
				{
					return new SqlParameter("@UserTip", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter FIncome
			{
				get
				{
					return new SqlParameter("@FIncome", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter NetIncome
			{
				get
				{
					return new SqlParameter("@NetIncome", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter FkIncomeTypeID
			{
				get
				{
					return new SqlParameter("@FkIncomeTypeID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter DIncomeDate
			{
				get
				{
					return new SqlParameter("@DIncomeDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter IComment
			{
				get
				{
					return new SqlParameter("@IComment", SqlDbType.NText, 1073741823);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string PkIncomID = "pkIncomID";
            public const string FkUserID = "fkUserID";
            public const string FkUserWorkshiftID = "fkUserWorkshiftID";
            public const string UserTip = "userTip";
            public const string FIncome = "fIncome";
            public const string NetIncome = "netIncome";
            public const string FkIncomeTypeID = "fkIncomeTypeID";
            public const string DIncomeDate = "dIncomeDate";
            public const string IComment = "iComment";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[PkIncomID] = _tblIncome.PropertyNames.PkIncomID;
					ht[FkUserID] = _tblIncome.PropertyNames.FkUserID;
					ht[FkUserWorkshiftID] = _tblIncome.PropertyNames.FkUserWorkshiftID;
					ht[UserTip] = _tblIncome.PropertyNames.UserTip;
					ht[FIncome] = _tblIncome.PropertyNames.FIncome;
					ht[NetIncome] = _tblIncome.PropertyNames.NetIncome;
					ht[FkIncomeTypeID] = _tblIncome.PropertyNames.FkIncomeTypeID;
					ht[DIncomeDate] = _tblIncome.PropertyNames.DIncomeDate;
					ht[IComment] = _tblIncome.PropertyNames.IComment;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string PkIncomID = "PkIncomID";
            public const string FkUserID = "FkUserID";
            public const string FkUserWorkshiftID = "FkUserWorkshiftID";
            public const string UserTip = "UserTip";
            public const string FIncome = "FIncome";
            public const string NetIncome = "NetIncome";
            public const string FkIncomeTypeID = "FkIncomeTypeID";
            public const string DIncomeDate = "DIncomeDate";
            public const string IComment = "IComment";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[PkIncomID] = _tblIncome.ColumnNames.PkIncomID;
					ht[FkUserID] = _tblIncome.ColumnNames.FkUserID;
					ht[FkUserWorkshiftID] = _tblIncome.ColumnNames.FkUserWorkshiftID;
					ht[UserTip] = _tblIncome.ColumnNames.UserTip;
					ht[FIncome] = _tblIncome.ColumnNames.FIncome;
					ht[NetIncome] = _tblIncome.ColumnNames.NetIncome;
					ht[FkIncomeTypeID] = _tblIncome.ColumnNames.FkIncomeTypeID;
					ht[DIncomeDate] = _tblIncome.ColumnNames.DIncomeDate;
					ht[IComment] = _tblIncome.ColumnNames.IComment;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string PkIncomID = "s_PkIncomID";
            public const string FkUserID = "s_FkUserID";
            public const string FkUserWorkshiftID = "s_FkUserWorkshiftID";
            public const string UserTip = "s_UserTip";
            public const string FIncome = "s_FIncome";
            public const string NetIncome = "s_NetIncome";
            public const string FkIncomeTypeID = "s_FkIncomeTypeID";
            public const string DIncomeDate = "s_DIncomeDate";
            public const string IComment = "s_IComment";

		}
		#endregion		
		
		#region Properties
	
		public virtual int PkIncomID
	    {
			get
	        {
				return base.Getint(ColumnNames.PkIncomID);
			}
			set
	        {
				base.Setint(ColumnNames.PkIncomID, value);
			}
		}

		public virtual int FkUserID
	    {
			get
	        {
				return base.Getint(ColumnNames.FkUserID);
			}
			set
	        {
				base.Setint(ColumnNames.FkUserID, value);
			}
		}

		public virtual int FkUserWorkshiftID
	    {
			get
	        {
				return base.Getint(ColumnNames.FkUserWorkshiftID);
			}
			set
	        {
				base.Setint(ColumnNames.FkUserWorkshiftID, value);
			}
		}

		public virtual double UserTip
	    {
			get
	        {
				return base.Getdouble(ColumnNames.UserTip);
			}
			set
	        {
				base.Setdouble(ColumnNames.UserTip, value);
			}
		}

		public virtual double FIncome
	    {
			get
	        {
				return base.Getdouble(ColumnNames.FIncome);
			}
			set
	        {
				base.Setdouble(ColumnNames.FIncome, value);
			}
		}

		public virtual double NetIncome
	    {
			get
	        {
				return base.Getdouble(ColumnNames.NetIncome);
			}
			set
	        {
				base.Setdouble(ColumnNames.NetIncome, value);
			}
		}

		public virtual int FkIncomeTypeID
	    {
			get
	        {
				return base.Getint(ColumnNames.FkIncomeTypeID);
			}
			set
	        {
				base.Setint(ColumnNames.FkIncomeTypeID, value);
			}
		}

		public virtual DateTime DIncomeDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.DIncomeDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.DIncomeDate, value);
			}
		}

		public virtual string IComment
	    {
			get
	        {
				return base.Getstring(ColumnNames.IComment);
			}
			set
	        {
				base.Setstring(ColumnNames.IComment, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_PkIncomID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PkIncomID) ? string.Empty : base.GetintAsString(ColumnNames.PkIncomID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PkIncomID);
				else
					this.PkIncomID = base.SetintAsString(ColumnNames.PkIncomID, value);
			}
		}

		public virtual string s_FkUserID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FkUserID) ? string.Empty : base.GetintAsString(ColumnNames.FkUserID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FkUserID);
				else
					this.FkUserID = base.SetintAsString(ColumnNames.FkUserID, value);
			}
		}

		public virtual string s_FkUserWorkshiftID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FkUserWorkshiftID) ? string.Empty : base.GetintAsString(ColumnNames.FkUserWorkshiftID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FkUserWorkshiftID);
				else
					this.FkUserWorkshiftID = base.SetintAsString(ColumnNames.FkUserWorkshiftID, value);
			}
		}

		public virtual string s_UserTip
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UserTip) ? string.Empty : base.GetdoubleAsString(ColumnNames.UserTip);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UserTip);
				else
					this.UserTip = base.SetdoubleAsString(ColumnNames.UserTip, value);
			}
		}

		public virtual string s_FIncome
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FIncome) ? string.Empty : base.GetdoubleAsString(ColumnNames.FIncome);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FIncome);
				else
					this.FIncome = base.SetdoubleAsString(ColumnNames.FIncome, value);
			}
		}

		public virtual string s_NetIncome
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.NetIncome) ? string.Empty : base.GetdoubleAsString(ColumnNames.NetIncome);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.NetIncome);
				else
					this.NetIncome = base.SetdoubleAsString(ColumnNames.NetIncome, value);
			}
		}

		public virtual string s_FkIncomeTypeID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FkIncomeTypeID) ? string.Empty : base.GetintAsString(ColumnNames.FkIncomeTypeID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FkIncomeTypeID);
				else
					this.FkIncomeTypeID = base.SetintAsString(ColumnNames.FkIncomeTypeID, value);
			}
		}

		public virtual string s_DIncomeDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DIncomeDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DIncomeDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DIncomeDate);
				else
					this.DIncomeDate = base.SetDateTimeAsString(ColumnNames.DIncomeDate, value);
			}
		}

		public virtual string s_IComment
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IComment) ? string.Empty : base.GetstringAsString(ColumnNames.IComment);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IComment);
				else
					this.IComment = base.SetstringAsString(ColumnNames.IComment, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter PkIncomID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PkIncomID, Parameters.PkIncomID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FkUserID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FkUserID, Parameters.FkUserID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FkUserWorkshiftID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FkUserWorkshiftID, Parameters.FkUserWorkshiftID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter UserTip
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UserTip, Parameters.UserTip);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FIncome
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FIncome, Parameters.FIncome);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter NetIncome
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.NetIncome, Parameters.NetIncome);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FkIncomeTypeID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FkIncomeTypeID, Parameters.FkIncomeTypeID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DIncomeDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DIncomeDate, Parameters.DIncomeDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IComment
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IComment, Parameters.IComment);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter PkIncomID
		    {
				get
		        {
					if(_PkIncomID_W == null)
	        	    {
						_PkIncomID_W = TearOff.PkIncomID;
					}
					return _PkIncomID_W;
				}
			}

			public WhereParameter FkUserID
		    {
				get
		        {
					if(_FkUserID_W == null)
	        	    {
						_FkUserID_W = TearOff.FkUserID;
					}
					return _FkUserID_W;
				}
			}

			public WhereParameter FkUserWorkshiftID
		    {
				get
		        {
					if(_FkUserWorkshiftID_W == null)
	        	    {
						_FkUserWorkshiftID_W = TearOff.FkUserWorkshiftID;
					}
					return _FkUserWorkshiftID_W;
				}
			}

			public WhereParameter UserTip
		    {
				get
		        {
					if(_UserTip_W == null)
	        	    {
						_UserTip_W = TearOff.UserTip;
					}
					return _UserTip_W;
				}
			}

			public WhereParameter FIncome
		    {
				get
		        {
					if(_FIncome_W == null)
	        	    {
						_FIncome_W = TearOff.FIncome;
					}
					return _FIncome_W;
				}
			}

			public WhereParameter NetIncome
		    {
				get
		        {
					if(_NetIncome_W == null)
	        	    {
						_NetIncome_W = TearOff.NetIncome;
					}
					return _NetIncome_W;
				}
			}

			public WhereParameter FkIncomeTypeID
		    {
				get
		        {
					if(_FkIncomeTypeID_W == null)
	        	    {
						_FkIncomeTypeID_W = TearOff.FkIncomeTypeID;
					}
					return _FkIncomeTypeID_W;
				}
			}

			public WhereParameter DIncomeDate
		    {
				get
		        {
					if(_DIncomeDate_W == null)
	        	    {
						_DIncomeDate_W = TearOff.DIncomeDate;
					}
					return _DIncomeDate_W;
				}
			}

			public WhereParameter IComment
		    {
				get
		        {
					if(_IComment_W == null)
	        	    {
						_IComment_W = TearOff.IComment;
					}
					return _IComment_W;
				}
			}

			private WhereParameter _PkIncomID_W = null;
			private WhereParameter _FkUserID_W = null;
			private WhereParameter _FkUserWorkshiftID_W = null;
			private WhereParameter _UserTip_W = null;
			private WhereParameter _FIncome_W = null;
			private WhereParameter _NetIncome_W = null;
			private WhereParameter _FkIncomeTypeID_W = null;
			private WhereParameter _DIncomeDate_W = null;
			private WhereParameter _IComment_W = null;

			public void WhereClauseReset()
			{
				_PkIncomID_W = null;
				_FkUserID_W = null;
				_FkUserWorkshiftID_W = null;
				_UserTip_W = null;
				_FIncome_W = null;
				_NetIncome_W = null;
				_FkIncomeTypeID_W = null;
				_DIncomeDate_W = null;
				_IComment_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter PkIncomID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PkIncomID, Parameters.PkIncomID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FkUserID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FkUserID, Parameters.FkUserID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FkUserWorkshiftID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FkUserWorkshiftID, Parameters.FkUserWorkshiftID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter UserTip
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UserTip, Parameters.UserTip);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FIncome
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FIncome, Parameters.FIncome);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter NetIncome
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.NetIncome, Parameters.NetIncome);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FkIncomeTypeID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FkIncomeTypeID, Parameters.FkIncomeTypeID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DIncomeDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DIncomeDate, Parameters.DIncomeDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IComment
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IComment, Parameters.IComment);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter PkIncomID
		    {
				get
		        {
					if(_PkIncomID_W == null)
	        	    {
						_PkIncomID_W = TearOff.PkIncomID;
					}
					return _PkIncomID_W;
				}
			}

			public AggregateParameter FkUserID
		    {
				get
		        {
					if(_FkUserID_W == null)
	        	    {
						_FkUserID_W = TearOff.FkUserID;
					}
					return _FkUserID_W;
				}
			}

			public AggregateParameter FkUserWorkshiftID
		    {
				get
		        {
					if(_FkUserWorkshiftID_W == null)
	        	    {
						_FkUserWorkshiftID_W = TearOff.FkUserWorkshiftID;
					}
					return _FkUserWorkshiftID_W;
				}
			}

			public AggregateParameter UserTip
		    {
				get
		        {
					if(_UserTip_W == null)
	        	    {
						_UserTip_W = TearOff.UserTip;
					}
					return _UserTip_W;
				}
			}

			public AggregateParameter FIncome
		    {
				get
		        {
					if(_FIncome_W == null)
	        	    {
						_FIncome_W = TearOff.FIncome;
					}
					return _FIncome_W;
				}
			}

			public AggregateParameter NetIncome
		    {
				get
		        {
					if(_NetIncome_W == null)
	        	    {
						_NetIncome_W = TearOff.NetIncome;
					}
					return _NetIncome_W;
				}
			}

			public AggregateParameter FkIncomeTypeID
		    {
				get
		        {
					if(_FkIncomeTypeID_W == null)
	        	    {
						_FkIncomeTypeID_W = TearOff.FkIncomeTypeID;
					}
					return _FkIncomeTypeID_W;
				}
			}

			public AggregateParameter DIncomeDate
		    {
				get
		        {
					if(_DIncomeDate_W == null)
	        	    {
						_DIncomeDate_W = TearOff.DIncomeDate;
					}
					return _DIncomeDate_W;
				}
			}

			public AggregateParameter IComment
		    {
				get
		        {
					if(_IComment_W == null)
	        	    {
						_IComment_W = TearOff.IComment;
					}
					return _IComment_W;
				}
			}

			private AggregateParameter _PkIncomID_W = null;
			private AggregateParameter _FkUserID_W = null;
			private AggregateParameter _FkUserWorkshiftID_W = null;
			private AggregateParameter _UserTip_W = null;
			private AggregateParameter _FIncome_W = null;
			private AggregateParameter _NetIncome_W = null;
			private AggregateParameter _FkIncomeTypeID_W = null;
			private AggregateParameter _DIncomeDate_W = null;
			private AggregateParameter _IComment_W = null;

			public void AggregateClauseReset()
			{
				_PkIncomID_W = null;
				_FkUserID_W = null;
				_FkUserWorkshiftID_W = null;
				_UserTip_W = null;
				_FIncome_W = null;
				_NetIncome_W = null;
				_FkIncomeTypeID_W = null;
				_DIncomeDate_W = null;
				_IComment_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblIncomeInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.PkIncomID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblIncomeUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblIncomeDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.PkIncomID);
			p.SourceColumn = ColumnNames.PkIncomID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.PkIncomID);
			p.SourceColumn = ColumnNames.PkIncomID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FkUserID);
			p.SourceColumn = ColumnNames.FkUserID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FkUserWorkshiftID);
			p.SourceColumn = ColumnNames.FkUserWorkshiftID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.UserTip);
			p.SourceColumn = ColumnNames.UserTip;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FIncome);
			p.SourceColumn = ColumnNames.FIncome;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.NetIncome);
			p.SourceColumn = ColumnNames.NetIncome;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FkIncomeTypeID);
			p.SourceColumn = ColumnNames.FkIncomeTypeID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DIncomeDate);
			p.SourceColumn = ColumnNames.DIncomeDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IComment);
			p.SourceColumn = ColumnNames.IComment;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
