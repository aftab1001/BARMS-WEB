
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.1.7.1)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace LC.Model.BMS.DAL
{
	public abstract class _tblUserContract : SqlClientEntity
	{
		public _tblUserContract()
		{
			this.QuerySource = "tblUserContract";
			this.MappingName = "tblUserContract";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tblUserContractLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int PkUserContratctID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.PkUserContratctID, PkUserContratctID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tblUserContractLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter PkUserContratctID
			{
				get
				{
					return new SqlParameter("@PkUserContratctID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter FkUserID
			{
				get
				{
					return new SqlParameter("@FkUserID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter FkSalaryTypeID
			{
				get
				{
					return new SqlParameter("@FkSalaryTypeID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter DEmploymentFromDate
			{
				get
				{
					return new SqlParameter("@DEmploymentFromDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter DEmploymentEndDate
			{
				get
				{
					return new SqlParameter("@DEmploymentEndDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter LowSeasonSalary
			{
				get
				{
					return new SqlParameter("@LowSeasonSalary", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter HighSeasonSalary
			{
				get
				{
					return new SqlParameter("@HighSeasonSalary", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter StandardSalary
			{
				get
				{
					return new SqlParameter("@StandardSalary", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter FSalaryPercentage
			{
				get
				{
					return new SqlParameter("@FSalaryPercentage", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter MinimumPerday
			{
				get
				{
					return new SqlParameter("@MinimumPerday", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter PercentageOver
			{
				get
				{
					return new SqlParameter("@PercentageOver", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter BContractAgreed
			{
				get
				{
					return new SqlParameter("@BContractAgreed", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter DCreateDate
			{
				get
				{
					return new SqlParameter("@DCreateDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter DModifiedDate
			{
				get
				{
					return new SqlParameter("@DModifiedDate", SqlDbType.DateTime, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string PkUserContratctID = "pkUserContratctID";
            public const string FkUserID = "fkUserID";
            public const string FkSalaryTypeID = "fkSalaryTypeID";
            public const string DEmploymentFromDate = "dEmploymentFromDate";
            public const string DEmploymentEndDate = "dEmploymentEndDate";
            public const string LowSeasonSalary = "LowSeasonSalary";
            public const string HighSeasonSalary = "HighSeasonSalary";
            public const string StandardSalary = "StandardSalary";
            public const string FSalaryPercentage = "fSalaryPercentage";
            public const string MinimumPerday = "MinimumPerday";
            public const string PercentageOver = "PercentageOver";
            public const string BContractAgreed = "bContractAgreed";
            public const string DCreateDate = "dCreateDate";
            public const string DModifiedDate = "dModifiedDate";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[PkUserContratctID] = _tblUserContract.PropertyNames.PkUserContratctID;
					ht[FkUserID] = _tblUserContract.PropertyNames.FkUserID;
					ht[FkSalaryTypeID] = _tblUserContract.PropertyNames.FkSalaryTypeID;
					ht[DEmploymentFromDate] = _tblUserContract.PropertyNames.DEmploymentFromDate;
					ht[DEmploymentEndDate] = _tblUserContract.PropertyNames.DEmploymentEndDate;
					ht[LowSeasonSalary] = _tblUserContract.PropertyNames.LowSeasonSalary;
					ht[HighSeasonSalary] = _tblUserContract.PropertyNames.HighSeasonSalary;
					ht[StandardSalary] = _tblUserContract.PropertyNames.StandardSalary;
					ht[FSalaryPercentage] = _tblUserContract.PropertyNames.FSalaryPercentage;
					ht[MinimumPerday] = _tblUserContract.PropertyNames.MinimumPerday;
					ht[PercentageOver] = _tblUserContract.PropertyNames.PercentageOver;
					ht[BContractAgreed] = _tblUserContract.PropertyNames.BContractAgreed;
					ht[DCreateDate] = _tblUserContract.PropertyNames.DCreateDate;
					ht[DModifiedDate] = _tblUserContract.PropertyNames.DModifiedDate;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string PkUserContratctID = "PkUserContratctID";
            public const string FkUserID = "FkUserID";
            public const string FkSalaryTypeID = "FkSalaryTypeID";
            public const string DEmploymentFromDate = "DEmploymentFromDate";
            public const string DEmploymentEndDate = "DEmploymentEndDate";
            public const string LowSeasonSalary = "LowSeasonSalary";
            public const string HighSeasonSalary = "HighSeasonSalary";
            public const string StandardSalary = "StandardSalary";
            public const string FSalaryPercentage = "FSalaryPercentage";
            public const string MinimumPerday = "MinimumPerday";
            public const string PercentageOver = "PercentageOver";
            public const string BContractAgreed = "BContractAgreed";
            public const string DCreateDate = "DCreateDate";
            public const string DModifiedDate = "DModifiedDate";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[PkUserContratctID] = _tblUserContract.ColumnNames.PkUserContratctID;
					ht[FkUserID] = _tblUserContract.ColumnNames.FkUserID;
					ht[FkSalaryTypeID] = _tblUserContract.ColumnNames.FkSalaryTypeID;
					ht[DEmploymentFromDate] = _tblUserContract.ColumnNames.DEmploymentFromDate;
					ht[DEmploymentEndDate] = _tblUserContract.ColumnNames.DEmploymentEndDate;
					ht[LowSeasonSalary] = _tblUserContract.ColumnNames.LowSeasonSalary;
					ht[HighSeasonSalary] = _tblUserContract.ColumnNames.HighSeasonSalary;
					ht[StandardSalary] = _tblUserContract.ColumnNames.StandardSalary;
					ht[FSalaryPercentage] = _tblUserContract.ColumnNames.FSalaryPercentage;
					ht[MinimumPerday] = _tblUserContract.ColumnNames.MinimumPerday;
					ht[PercentageOver] = _tblUserContract.ColumnNames.PercentageOver;
					ht[BContractAgreed] = _tblUserContract.ColumnNames.BContractAgreed;
					ht[DCreateDate] = _tblUserContract.ColumnNames.DCreateDate;
					ht[DModifiedDate] = _tblUserContract.ColumnNames.DModifiedDate;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string PkUserContratctID = "s_PkUserContratctID";
            public const string FkUserID = "s_FkUserID";
            public const string FkSalaryTypeID = "s_FkSalaryTypeID";
            public const string DEmploymentFromDate = "s_DEmploymentFromDate";
            public const string DEmploymentEndDate = "s_DEmploymentEndDate";
            public const string LowSeasonSalary = "s_LowSeasonSalary";
            public const string HighSeasonSalary = "s_HighSeasonSalary";
            public const string StandardSalary = "s_StandardSalary";
            public const string FSalaryPercentage = "s_FSalaryPercentage";
            public const string MinimumPerday = "s_MinimumPerday";
            public const string PercentageOver = "s_PercentageOver";
            public const string BContractAgreed = "s_BContractAgreed";
            public const string DCreateDate = "s_DCreateDate";
            public const string DModifiedDate = "s_DModifiedDate";

		}
		#endregion		
		
		#region Properties
	
		public virtual int PkUserContratctID
	    {
			get
	        {
				return base.Getint(ColumnNames.PkUserContratctID);
			}
			set
	        {
				base.Setint(ColumnNames.PkUserContratctID, value);
			}
		}

		public virtual int FkUserID
	    {
			get
	        {
				return base.Getint(ColumnNames.FkUserID);
			}
			set
	        {
				base.Setint(ColumnNames.FkUserID, value);
			}
		}

		public virtual int FkSalaryTypeID
	    {
			get
	        {
				return base.Getint(ColumnNames.FkSalaryTypeID);
			}
			set
	        {
				base.Setint(ColumnNames.FkSalaryTypeID, value);
			}
		}

		public virtual DateTime DEmploymentFromDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.DEmploymentFromDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.DEmploymentFromDate, value);
			}
		}

		public virtual DateTime DEmploymentEndDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.DEmploymentEndDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.DEmploymentEndDate, value);
			}
		}

		public virtual double LowSeasonSalary
	    {
			get
	        {
				return base.Getdouble(ColumnNames.LowSeasonSalary);
			}
			set
	        {
				base.Setdouble(ColumnNames.LowSeasonSalary, value);
			}
		}

		public virtual double HighSeasonSalary
	    {
			get
	        {
				return base.Getdouble(ColumnNames.HighSeasonSalary);
			}
			set
	        {
				base.Setdouble(ColumnNames.HighSeasonSalary, value);
			}
		}

		public virtual double StandardSalary
	    {
			get
	        {
				return base.Getdouble(ColumnNames.StandardSalary);
			}
			set
	        {
				base.Setdouble(ColumnNames.StandardSalary, value);
			}
		}

		public virtual double FSalaryPercentage
	    {
			get
	        {
				return base.Getdouble(ColumnNames.FSalaryPercentage);
			}
			set
	        {
				base.Setdouble(ColumnNames.FSalaryPercentage, value);
			}
		}

		public virtual double MinimumPerday
	    {
			get
	        {
				return base.Getdouble(ColumnNames.MinimumPerday);
			}
			set
	        {
				base.Setdouble(ColumnNames.MinimumPerday, value);
			}
		}

		public virtual double PercentageOver
	    {
			get
	        {
				return base.Getdouble(ColumnNames.PercentageOver);
			}
			set
	        {
				base.Setdouble(ColumnNames.PercentageOver, value);
			}
		}

		public virtual bool BContractAgreed
	    {
			get
	        {
				return base.Getbool(ColumnNames.BContractAgreed);
			}
			set
	        {
				base.Setbool(ColumnNames.BContractAgreed, value);
			}
		}

		public virtual DateTime DCreateDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.DCreateDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.DCreateDate, value);
			}
		}

		public virtual DateTime DModifiedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.DModifiedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.DModifiedDate, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_PkUserContratctID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PkUserContratctID) ? string.Empty : base.GetintAsString(ColumnNames.PkUserContratctID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PkUserContratctID);
				else
					this.PkUserContratctID = base.SetintAsString(ColumnNames.PkUserContratctID, value);
			}
		}

		public virtual string s_FkUserID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FkUserID) ? string.Empty : base.GetintAsString(ColumnNames.FkUserID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FkUserID);
				else
					this.FkUserID = base.SetintAsString(ColumnNames.FkUserID, value);
			}
		}

		public virtual string s_FkSalaryTypeID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FkSalaryTypeID) ? string.Empty : base.GetintAsString(ColumnNames.FkSalaryTypeID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FkSalaryTypeID);
				else
					this.FkSalaryTypeID = base.SetintAsString(ColumnNames.FkSalaryTypeID, value);
			}
		}

		public virtual string s_DEmploymentFromDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DEmploymentFromDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DEmploymentFromDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DEmploymentFromDate);
				else
					this.DEmploymentFromDate = base.SetDateTimeAsString(ColumnNames.DEmploymentFromDate, value);
			}
		}

		public virtual string s_DEmploymentEndDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DEmploymentEndDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DEmploymentEndDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DEmploymentEndDate);
				else
					this.DEmploymentEndDate = base.SetDateTimeAsString(ColumnNames.DEmploymentEndDate, value);
			}
		}

		public virtual string s_LowSeasonSalary
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.LowSeasonSalary) ? string.Empty : base.GetdoubleAsString(ColumnNames.LowSeasonSalary);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LowSeasonSalary);
				else
					this.LowSeasonSalary = base.SetdoubleAsString(ColumnNames.LowSeasonSalary, value);
			}
		}

		public virtual string s_HighSeasonSalary
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.HighSeasonSalary) ? string.Empty : base.GetdoubleAsString(ColumnNames.HighSeasonSalary);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.HighSeasonSalary);
				else
					this.HighSeasonSalary = base.SetdoubleAsString(ColumnNames.HighSeasonSalary, value);
			}
		}

		public virtual string s_StandardSalary
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.StandardSalary) ? string.Empty : base.GetdoubleAsString(ColumnNames.StandardSalary);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.StandardSalary);
				else
					this.StandardSalary = base.SetdoubleAsString(ColumnNames.StandardSalary, value);
			}
		}

		public virtual string s_FSalaryPercentage
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FSalaryPercentage) ? string.Empty : base.GetdoubleAsString(ColumnNames.FSalaryPercentage);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FSalaryPercentage);
				else
					this.FSalaryPercentage = base.SetdoubleAsString(ColumnNames.FSalaryPercentage, value);
			}
		}

		public virtual string s_MinimumPerday
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MinimumPerday) ? string.Empty : base.GetdoubleAsString(ColumnNames.MinimumPerday);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MinimumPerday);
				else
					this.MinimumPerday = base.SetdoubleAsString(ColumnNames.MinimumPerday, value);
			}
		}

		public virtual string s_PercentageOver
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PercentageOver) ? string.Empty : base.GetdoubleAsString(ColumnNames.PercentageOver);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PercentageOver);
				else
					this.PercentageOver = base.SetdoubleAsString(ColumnNames.PercentageOver, value);
			}
		}

		public virtual string s_BContractAgreed
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BContractAgreed) ? string.Empty : base.GetboolAsString(ColumnNames.BContractAgreed);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BContractAgreed);
				else
					this.BContractAgreed = base.SetboolAsString(ColumnNames.BContractAgreed, value);
			}
		}

		public virtual string s_DCreateDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DCreateDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DCreateDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DCreateDate);
				else
					this.DCreateDate = base.SetDateTimeAsString(ColumnNames.DCreateDate, value);
			}
		}

		public virtual string s_DModifiedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DModifiedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DModifiedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DModifiedDate);
				else
					this.DModifiedDate = base.SetDateTimeAsString(ColumnNames.DModifiedDate, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter PkUserContratctID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PkUserContratctID, Parameters.PkUserContratctID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FkUserID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FkUserID, Parameters.FkUserID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FkSalaryTypeID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FkSalaryTypeID, Parameters.FkSalaryTypeID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DEmploymentFromDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DEmploymentFromDate, Parameters.DEmploymentFromDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DEmploymentEndDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DEmploymentEndDate, Parameters.DEmploymentEndDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter LowSeasonSalary
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LowSeasonSalary, Parameters.LowSeasonSalary);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter HighSeasonSalary
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.HighSeasonSalary, Parameters.HighSeasonSalary);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter StandardSalary
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.StandardSalary, Parameters.StandardSalary);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FSalaryPercentage
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FSalaryPercentage, Parameters.FSalaryPercentage);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MinimumPerday
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MinimumPerday, Parameters.MinimumPerday);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PercentageOver
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PercentageOver, Parameters.PercentageOver);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter BContractAgreed
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BContractAgreed, Parameters.BContractAgreed);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DCreateDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DCreateDate, Parameters.DCreateDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DModifiedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DModifiedDate, Parameters.DModifiedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter PkUserContratctID
		    {
				get
		        {
					if(_PkUserContratctID_W == null)
	        	    {
						_PkUserContratctID_W = TearOff.PkUserContratctID;
					}
					return _PkUserContratctID_W;
				}
			}

			public WhereParameter FkUserID
		    {
				get
		        {
					if(_FkUserID_W == null)
	        	    {
						_FkUserID_W = TearOff.FkUserID;
					}
					return _FkUserID_W;
				}
			}

			public WhereParameter FkSalaryTypeID
		    {
				get
		        {
					if(_FkSalaryTypeID_W == null)
	        	    {
						_FkSalaryTypeID_W = TearOff.FkSalaryTypeID;
					}
					return _FkSalaryTypeID_W;
				}
			}

			public WhereParameter DEmploymentFromDate
		    {
				get
		        {
					if(_DEmploymentFromDate_W == null)
	        	    {
						_DEmploymentFromDate_W = TearOff.DEmploymentFromDate;
					}
					return _DEmploymentFromDate_W;
				}
			}

			public WhereParameter DEmploymentEndDate
		    {
				get
		        {
					if(_DEmploymentEndDate_W == null)
	        	    {
						_DEmploymentEndDate_W = TearOff.DEmploymentEndDate;
					}
					return _DEmploymentEndDate_W;
				}
			}

			public WhereParameter LowSeasonSalary
		    {
				get
		        {
					if(_LowSeasonSalary_W == null)
	        	    {
						_LowSeasonSalary_W = TearOff.LowSeasonSalary;
					}
					return _LowSeasonSalary_W;
				}
			}

			public WhereParameter HighSeasonSalary
		    {
				get
		        {
					if(_HighSeasonSalary_W == null)
	        	    {
						_HighSeasonSalary_W = TearOff.HighSeasonSalary;
					}
					return _HighSeasonSalary_W;
				}
			}

			public WhereParameter StandardSalary
		    {
				get
		        {
					if(_StandardSalary_W == null)
	        	    {
						_StandardSalary_W = TearOff.StandardSalary;
					}
					return _StandardSalary_W;
				}
			}

			public WhereParameter FSalaryPercentage
		    {
				get
		        {
					if(_FSalaryPercentage_W == null)
	        	    {
						_FSalaryPercentage_W = TearOff.FSalaryPercentage;
					}
					return _FSalaryPercentage_W;
				}
			}

			public WhereParameter MinimumPerday
		    {
				get
		        {
					if(_MinimumPerday_W == null)
	        	    {
						_MinimumPerday_W = TearOff.MinimumPerday;
					}
					return _MinimumPerday_W;
				}
			}

			public WhereParameter PercentageOver
		    {
				get
		        {
					if(_PercentageOver_W == null)
	        	    {
						_PercentageOver_W = TearOff.PercentageOver;
					}
					return _PercentageOver_W;
				}
			}

			public WhereParameter BContractAgreed
		    {
				get
		        {
					if(_BContractAgreed_W == null)
	        	    {
						_BContractAgreed_W = TearOff.BContractAgreed;
					}
					return _BContractAgreed_W;
				}
			}

			public WhereParameter DCreateDate
		    {
				get
		        {
					if(_DCreateDate_W == null)
	        	    {
						_DCreateDate_W = TearOff.DCreateDate;
					}
					return _DCreateDate_W;
				}
			}

			public WhereParameter DModifiedDate
		    {
				get
		        {
					if(_DModifiedDate_W == null)
	        	    {
						_DModifiedDate_W = TearOff.DModifiedDate;
					}
					return _DModifiedDate_W;
				}
			}

			private WhereParameter _PkUserContratctID_W = null;
			private WhereParameter _FkUserID_W = null;
			private WhereParameter _FkSalaryTypeID_W = null;
			private WhereParameter _DEmploymentFromDate_W = null;
			private WhereParameter _DEmploymentEndDate_W = null;
			private WhereParameter _LowSeasonSalary_W = null;
			private WhereParameter _HighSeasonSalary_W = null;
			private WhereParameter _StandardSalary_W = null;
			private WhereParameter _FSalaryPercentage_W = null;
			private WhereParameter _MinimumPerday_W = null;
			private WhereParameter _PercentageOver_W = null;
			private WhereParameter _BContractAgreed_W = null;
			private WhereParameter _DCreateDate_W = null;
			private WhereParameter _DModifiedDate_W = null;

			public void WhereClauseReset()
			{
				_PkUserContratctID_W = null;
				_FkUserID_W = null;
				_FkSalaryTypeID_W = null;
				_DEmploymentFromDate_W = null;
				_DEmploymentEndDate_W = null;
				_LowSeasonSalary_W = null;
				_HighSeasonSalary_W = null;
				_StandardSalary_W = null;
				_FSalaryPercentage_W = null;
				_MinimumPerday_W = null;
				_PercentageOver_W = null;
				_BContractAgreed_W = null;
				_DCreateDate_W = null;
				_DModifiedDate_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter PkUserContratctID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PkUserContratctID, Parameters.PkUserContratctID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FkUserID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FkUserID, Parameters.FkUserID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FkSalaryTypeID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FkSalaryTypeID, Parameters.FkSalaryTypeID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DEmploymentFromDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DEmploymentFromDate, Parameters.DEmploymentFromDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DEmploymentEndDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DEmploymentEndDate, Parameters.DEmploymentEndDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter LowSeasonSalary
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LowSeasonSalary, Parameters.LowSeasonSalary);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter HighSeasonSalary
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.HighSeasonSalary, Parameters.HighSeasonSalary);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter StandardSalary
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.StandardSalary, Parameters.StandardSalary);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FSalaryPercentage
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FSalaryPercentage, Parameters.FSalaryPercentage);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MinimumPerday
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MinimumPerday, Parameters.MinimumPerday);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PercentageOver
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PercentageOver, Parameters.PercentageOver);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter BContractAgreed
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BContractAgreed, Parameters.BContractAgreed);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DCreateDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DCreateDate, Parameters.DCreateDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DModifiedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DModifiedDate, Parameters.DModifiedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter PkUserContratctID
		    {
				get
		        {
					if(_PkUserContratctID_W == null)
	        	    {
						_PkUserContratctID_W = TearOff.PkUserContratctID;
					}
					return _PkUserContratctID_W;
				}
			}

			public AggregateParameter FkUserID
		    {
				get
		        {
					if(_FkUserID_W == null)
	        	    {
						_FkUserID_W = TearOff.FkUserID;
					}
					return _FkUserID_W;
				}
			}

			public AggregateParameter FkSalaryTypeID
		    {
				get
		        {
					if(_FkSalaryTypeID_W == null)
	        	    {
						_FkSalaryTypeID_W = TearOff.FkSalaryTypeID;
					}
					return _FkSalaryTypeID_W;
				}
			}

			public AggregateParameter DEmploymentFromDate
		    {
				get
		        {
					if(_DEmploymentFromDate_W == null)
	        	    {
						_DEmploymentFromDate_W = TearOff.DEmploymentFromDate;
					}
					return _DEmploymentFromDate_W;
				}
			}

			public AggregateParameter DEmploymentEndDate
		    {
				get
		        {
					if(_DEmploymentEndDate_W == null)
	        	    {
						_DEmploymentEndDate_W = TearOff.DEmploymentEndDate;
					}
					return _DEmploymentEndDate_W;
				}
			}

			public AggregateParameter LowSeasonSalary
		    {
				get
		        {
					if(_LowSeasonSalary_W == null)
	        	    {
						_LowSeasonSalary_W = TearOff.LowSeasonSalary;
					}
					return _LowSeasonSalary_W;
				}
			}

			public AggregateParameter HighSeasonSalary
		    {
				get
		        {
					if(_HighSeasonSalary_W == null)
	        	    {
						_HighSeasonSalary_W = TearOff.HighSeasonSalary;
					}
					return _HighSeasonSalary_W;
				}
			}

			public AggregateParameter StandardSalary
		    {
				get
		        {
					if(_StandardSalary_W == null)
	        	    {
						_StandardSalary_W = TearOff.StandardSalary;
					}
					return _StandardSalary_W;
				}
			}

			public AggregateParameter FSalaryPercentage
		    {
				get
		        {
					if(_FSalaryPercentage_W == null)
	        	    {
						_FSalaryPercentage_W = TearOff.FSalaryPercentage;
					}
					return _FSalaryPercentage_W;
				}
			}

			public AggregateParameter MinimumPerday
		    {
				get
		        {
					if(_MinimumPerday_W == null)
	        	    {
						_MinimumPerday_W = TearOff.MinimumPerday;
					}
					return _MinimumPerday_W;
				}
			}

			public AggregateParameter PercentageOver
		    {
				get
		        {
					if(_PercentageOver_W == null)
	        	    {
						_PercentageOver_W = TearOff.PercentageOver;
					}
					return _PercentageOver_W;
				}
			}

			public AggregateParameter BContractAgreed
		    {
				get
		        {
					if(_BContractAgreed_W == null)
	        	    {
						_BContractAgreed_W = TearOff.BContractAgreed;
					}
					return _BContractAgreed_W;
				}
			}

			public AggregateParameter DCreateDate
		    {
				get
		        {
					if(_DCreateDate_W == null)
	        	    {
						_DCreateDate_W = TearOff.DCreateDate;
					}
					return _DCreateDate_W;
				}
			}

			public AggregateParameter DModifiedDate
		    {
				get
		        {
					if(_DModifiedDate_W == null)
	        	    {
						_DModifiedDate_W = TearOff.DModifiedDate;
					}
					return _DModifiedDate_W;
				}
			}

			private AggregateParameter _PkUserContratctID_W = null;
			private AggregateParameter _FkUserID_W = null;
			private AggregateParameter _FkSalaryTypeID_W = null;
			private AggregateParameter _DEmploymentFromDate_W = null;
			private AggregateParameter _DEmploymentEndDate_W = null;
			private AggregateParameter _LowSeasonSalary_W = null;
			private AggregateParameter _HighSeasonSalary_W = null;
			private AggregateParameter _StandardSalary_W = null;
			private AggregateParameter _FSalaryPercentage_W = null;
			private AggregateParameter _MinimumPerday_W = null;
			private AggregateParameter _PercentageOver_W = null;
			private AggregateParameter _BContractAgreed_W = null;
			private AggregateParameter _DCreateDate_W = null;
			private AggregateParameter _DModifiedDate_W = null;

			public void AggregateClauseReset()
			{
				_PkUserContratctID_W = null;
				_FkUserID_W = null;
				_FkSalaryTypeID_W = null;
				_DEmploymentFromDate_W = null;
				_DEmploymentEndDate_W = null;
				_LowSeasonSalary_W = null;
				_HighSeasonSalary_W = null;
				_StandardSalary_W = null;
				_FSalaryPercentage_W = null;
				_MinimumPerday_W = null;
				_PercentageOver_W = null;
				_BContractAgreed_W = null;
				_DCreateDate_W = null;
				_DModifiedDate_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblUserContractInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.PkUserContratctID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblUserContractUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblUserContractDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.PkUserContratctID);
			p.SourceColumn = ColumnNames.PkUserContratctID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.PkUserContratctID);
			p.SourceColumn = ColumnNames.PkUserContratctID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FkUserID);
			p.SourceColumn = ColumnNames.FkUserID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FkSalaryTypeID);
			p.SourceColumn = ColumnNames.FkSalaryTypeID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DEmploymentFromDate);
			p.SourceColumn = ColumnNames.DEmploymentFromDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DEmploymentEndDate);
			p.SourceColumn = ColumnNames.DEmploymentEndDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.LowSeasonSalary);
			p.SourceColumn = ColumnNames.LowSeasonSalary;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.HighSeasonSalary);
			p.SourceColumn = ColumnNames.HighSeasonSalary;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.StandardSalary);
			p.SourceColumn = ColumnNames.StandardSalary;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FSalaryPercentage);
			p.SourceColumn = ColumnNames.FSalaryPercentage;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MinimumPerday);
			p.SourceColumn = ColumnNames.MinimumPerday;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PercentageOver);
			p.SourceColumn = ColumnNames.PercentageOver;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.BContractAgreed);
			p.SourceColumn = ColumnNames.BContractAgreed;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DCreateDate);
			p.SourceColumn = ColumnNames.DCreateDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DModifiedDate);
			p.SourceColumn = ColumnNames.DModifiedDate;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
