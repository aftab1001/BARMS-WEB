
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.1.7.1)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace LC.Model.BMS.DAL
{
	public abstract class _tblRegisterHistory : SqlClientEntity
	{
		public _tblRegisterHistory()
		{
			this.QuerySource = "tblRegisterHistory";
			this.MappingName = "tblRegisterHistory";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tblRegisterHistoryLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int PkRegisterHistoryID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.PkRegisterHistoryID, PkRegisterHistoryID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tblRegisterHistoryLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter PkRegisterHistoryID
			{
				get
				{
					return new SqlParameter("@PkRegisterHistoryID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter FkRegisterID
			{
				get
				{
					return new SqlParameter("@FkRegisterID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter RValue
			{
				get
				{
					return new SqlParameter("@RValue", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter RDay
			{
				get
				{
					return new SqlParameter("@RDay", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter RMonth
			{
				get
				{
					return new SqlParameter("@RMonth", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter RYear
			{
				get
				{
					return new SqlParameter("@RYear", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Iweeknumber
			{
				get
				{
					return new SqlParameter("@Iweeknumber", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Idaynumber
			{
				get
				{
					return new SqlParameter("@Idaynumber", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Dweekstart
			{
				get
				{
					return new SqlParameter("@Dweekstart", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter Dweekend
			{
				get
				{
					return new SqlParameter("@Dweekend", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter VatPer
			{
				get
				{
					return new SqlParameter("@VatPer", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter RNote
			{
				get
				{
					return new SqlParameter("@RNote", SqlDbType.NText, 1073741823);
				}
			}
			
			public static SqlParameter DCreatedDate
			{
				get
				{
					return new SqlParameter("@DCreatedDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter DModifiedDate
			{
				get
				{
					return new SqlParameter("@DModifiedDate", SqlDbType.DateTime, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string PkRegisterHistoryID = "pkRegisterHistoryID";
            public const string FkRegisterID = "fkRegisterID";
            public const string RValue = "rValue";
            public const string RDay = "rDay";
            public const string RMonth = "rMonth";
            public const string RYear = "rYear";
            public const string Iweeknumber = "iweeknumber";
            public const string Idaynumber = "idaynumber";
            public const string Dweekstart = "dweekstart";
            public const string Dweekend = "dweekend";
            public const string VatPer = "vatPer";
            public const string RNote = "rNote";
            public const string DCreatedDate = "dCreatedDate";
            public const string DModifiedDate = "dModifiedDate";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[PkRegisterHistoryID] = _tblRegisterHistory.PropertyNames.PkRegisterHistoryID;
					ht[FkRegisterID] = _tblRegisterHistory.PropertyNames.FkRegisterID;
					ht[RValue] = _tblRegisterHistory.PropertyNames.RValue;
					ht[RDay] = _tblRegisterHistory.PropertyNames.RDay;
					ht[RMonth] = _tblRegisterHistory.PropertyNames.RMonth;
					ht[RYear] = _tblRegisterHistory.PropertyNames.RYear;
					ht[Iweeknumber] = _tblRegisterHistory.PropertyNames.Iweeknumber;
					ht[Idaynumber] = _tblRegisterHistory.PropertyNames.Idaynumber;
					ht[Dweekstart] = _tblRegisterHistory.PropertyNames.Dweekstart;
					ht[Dweekend] = _tblRegisterHistory.PropertyNames.Dweekend;
					ht[VatPer] = _tblRegisterHistory.PropertyNames.VatPer;
					ht[RNote] = _tblRegisterHistory.PropertyNames.RNote;
					ht[DCreatedDate] = _tblRegisterHistory.PropertyNames.DCreatedDate;
					ht[DModifiedDate] = _tblRegisterHistory.PropertyNames.DModifiedDate;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string PkRegisterHistoryID = "PkRegisterHistoryID";
            public const string FkRegisterID = "FkRegisterID";
            public const string RValue = "RValue";
            public const string RDay = "RDay";
            public const string RMonth = "RMonth";
            public const string RYear = "RYear";
            public const string Iweeknumber = "Iweeknumber";
            public const string Idaynumber = "Idaynumber";
            public const string Dweekstart = "Dweekstart";
            public const string Dweekend = "Dweekend";
            public const string VatPer = "VatPer";
            public const string RNote = "RNote";
            public const string DCreatedDate = "DCreatedDate";
            public const string DModifiedDate = "DModifiedDate";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[PkRegisterHistoryID] = _tblRegisterHistory.ColumnNames.PkRegisterHistoryID;
					ht[FkRegisterID] = _tblRegisterHistory.ColumnNames.FkRegisterID;
					ht[RValue] = _tblRegisterHistory.ColumnNames.RValue;
					ht[RDay] = _tblRegisterHistory.ColumnNames.RDay;
					ht[RMonth] = _tblRegisterHistory.ColumnNames.RMonth;
					ht[RYear] = _tblRegisterHistory.ColumnNames.RYear;
					ht[Iweeknumber] = _tblRegisterHistory.ColumnNames.Iweeknumber;
					ht[Idaynumber] = _tblRegisterHistory.ColumnNames.Idaynumber;
					ht[Dweekstart] = _tblRegisterHistory.ColumnNames.Dweekstart;
					ht[Dweekend] = _tblRegisterHistory.ColumnNames.Dweekend;
					ht[VatPer] = _tblRegisterHistory.ColumnNames.VatPer;
					ht[RNote] = _tblRegisterHistory.ColumnNames.RNote;
					ht[DCreatedDate] = _tblRegisterHistory.ColumnNames.DCreatedDate;
					ht[DModifiedDate] = _tblRegisterHistory.ColumnNames.DModifiedDate;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string PkRegisterHistoryID = "s_PkRegisterHistoryID";
            public const string FkRegisterID = "s_FkRegisterID";
            public const string RValue = "s_RValue";
            public const string RDay = "s_RDay";
            public const string RMonth = "s_RMonth";
            public const string RYear = "s_RYear";
            public const string Iweeknumber = "s_Iweeknumber";
            public const string Idaynumber = "s_Idaynumber";
            public const string Dweekstart = "s_Dweekstart";
            public const string Dweekend = "s_Dweekend";
            public const string VatPer = "s_VatPer";
            public const string RNote = "s_RNote";
            public const string DCreatedDate = "s_DCreatedDate";
            public const string DModifiedDate = "s_DModifiedDate";

		}
		#endregion		
		
		#region Properties
	
		public virtual int PkRegisterHistoryID
	    {
			get
	        {
				return base.Getint(ColumnNames.PkRegisterHistoryID);
			}
			set
	        {
				base.Setint(ColumnNames.PkRegisterHistoryID, value);
			}
		}

		public virtual int FkRegisterID
	    {
			get
	        {
				return base.Getint(ColumnNames.FkRegisterID);
			}
			set
	        {
				base.Setint(ColumnNames.FkRegisterID, value);
			}
		}

		public virtual double RValue
	    {
			get
	        {
				return base.Getdouble(ColumnNames.RValue);
			}
			set
	        {
				base.Setdouble(ColumnNames.RValue, value);
			}
		}

		public virtual int RDay
	    {
			get
	        {
				return base.Getint(ColumnNames.RDay);
			}
			set
	        {
				base.Setint(ColumnNames.RDay, value);
			}
		}

		public virtual int RMonth
	    {
			get
	        {
				return base.Getint(ColumnNames.RMonth);
			}
			set
	        {
				base.Setint(ColumnNames.RMonth, value);
			}
		}

		public virtual int RYear
	    {
			get
	        {
				return base.Getint(ColumnNames.RYear);
			}
			set
	        {
				base.Setint(ColumnNames.RYear, value);
			}
		}

		public virtual int Iweeknumber
	    {
			get
	        {
				return base.Getint(ColumnNames.Iweeknumber);
			}
			set
	        {
				base.Setint(ColumnNames.Iweeknumber, value);
			}
		}

		public virtual int Idaynumber
	    {
			get
	        {
				return base.Getint(ColumnNames.Idaynumber);
			}
			set
	        {
				base.Setint(ColumnNames.Idaynumber, value);
			}
		}

		public virtual DateTime Dweekstart
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.Dweekstart);
			}
			set
	        {
				base.SetDateTime(ColumnNames.Dweekstart, value);
			}
		}

		public virtual DateTime Dweekend
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.Dweekend);
			}
			set
	        {
				base.SetDateTime(ColumnNames.Dweekend, value);
			}
		}

		public virtual double VatPer
	    {
			get
	        {
				return base.Getdouble(ColumnNames.VatPer);
			}
			set
	        {
				base.Setdouble(ColumnNames.VatPer, value);
			}
		}

		public virtual string RNote
	    {
			get
	        {
				return base.Getstring(ColumnNames.RNote);
			}
			set
	        {
				base.Setstring(ColumnNames.RNote, value);
			}
		}

		public virtual DateTime DCreatedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.DCreatedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.DCreatedDate, value);
			}
		}

		public virtual DateTime DModifiedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.DModifiedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.DModifiedDate, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_PkRegisterHistoryID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PkRegisterHistoryID) ? string.Empty : base.GetintAsString(ColumnNames.PkRegisterHistoryID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PkRegisterHistoryID);
				else
					this.PkRegisterHistoryID = base.SetintAsString(ColumnNames.PkRegisterHistoryID, value);
			}
		}

		public virtual string s_FkRegisterID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FkRegisterID) ? string.Empty : base.GetintAsString(ColumnNames.FkRegisterID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FkRegisterID);
				else
					this.FkRegisterID = base.SetintAsString(ColumnNames.FkRegisterID, value);
			}
		}

		public virtual string s_RValue
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RValue) ? string.Empty : base.GetdoubleAsString(ColumnNames.RValue);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RValue);
				else
					this.RValue = base.SetdoubleAsString(ColumnNames.RValue, value);
			}
		}

		public virtual string s_RDay
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RDay) ? string.Empty : base.GetintAsString(ColumnNames.RDay);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RDay);
				else
					this.RDay = base.SetintAsString(ColumnNames.RDay, value);
			}
		}

		public virtual string s_RMonth
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RMonth) ? string.Empty : base.GetintAsString(ColumnNames.RMonth);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RMonth);
				else
					this.RMonth = base.SetintAsString(ColumnNames.RMonth, value);
			}
		}

		public virtual string s_RYear
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RYear) ? string.Empty : base.GetintAsString(ColumnNames.RYear);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RYear);
				else
					this.RYear = base.SetintAsString(ColumnNames.RYear, value);
			}
		}

		public virtual string s_Iweeknumber
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Iweeknumber) ? string.Empty : base.GetintAsString(ColumnNames.Iweeknumber);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Iweeknumber);
				else
					this.Iweeknumber = base.SetintAsString(ColumnNames.Iweeknumber, value);
			}
		}

		public virtual string s_Idaynumber
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Idaynumber) ? string.Empty : base.GetintAsString(ColumnNames.Idaynumber);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Idaynumber);
				else
					this.Idaynumber = base.SetintAsString(ColumnNames.Idaynumber, value);
			}
		}

		public virtual string s_Dweekstart
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Dweekstart) ? string.Empty : base.GetDateTimeAsString(ColumnNames.Dweekstart);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Dweekstart);
				else
					this.Dweekstart = base.SetDateTimeAsString(ColumnNames.Dweekstart, value);
			}
		}

		public virtual string s_Dweekend
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Dweekend) ? string.Empty : base.GetDateTimeAsString(ColumnNames.Dweekend);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Dweekend);
				else
					this.Dweekend = base.SetDateTimeAsString(ColumnNames.Dweekend, value);
			}
		}

		public virtual string s_VatPer
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.VatPer) ? string.Empty : base.GetdoubleAsString(ColumnNames.VatPer);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.VatPer);
				else
					this.VatPer = base.SetdoubleAsString(ColumnNames.VatPer, value);
			}
		}

		public virtual string s_RNote
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RNote) ? string.Empty : base.GetstringAsString(ColumnNames.RNote);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RNote);
				else
					this.RNote = base.SetstringAsString(ColumnNames.RNote, value);
			}
		}

		public virtual string s_DCreatedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DCreatedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DCreatedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DCreatedDate);
				else
					this.DCreatedDate = base.SetDateTimeAsString(ColumnNames.DCreatedDate, value);
			}
		}

		public virtual string s_DModifiedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DModifiedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DModifiedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DModifiedDate);
				else
					this.DModifiedDate = base.SetDateTimeAsString(ColumnNames.DModifiedDate, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter PkRegisterHistoryID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PkRegisterHistoryID, Parameters.PkRegisterHistoryID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FkRegisterID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FkRegisterID, Parameters.FkRegisterID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter RValue
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RValue, Parameters.RValue);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter RDay
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RDay, Parameters.RDay);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter RMonth
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RMonth, Parameters.RMonth);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter RYear
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RYear, Parameters.RYear);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Iweeknumber
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Iweeknumber, Parameters.Iweeknumber);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Idaynumber
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Idaynumber, Parameters.Idaynumber);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Dweekstart
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Dweekstart, Parameters.Dweekstart);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Dweekend
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Dweekend, Parameters.Dweekend);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter VatPer
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.VatPer, Parameters.VatPer);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter RNote
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RNote, Parameters.RNote);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DCreatedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DCreatedDate, Parameters.DCreatedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DModifiedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DModifiedDate, Parameters.DModifiedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter PkRegisterHistoryID
		    {
				get
		        {
					if(_PkRegisterHistoryID_W == null)
	        	    {
						_PkRegisterHistoryID_W = TearOff.PkRegisterHistoryID;
					}
					return _PkRegisterHistoryID_W;
				}
			}

			public WhereParameter FkRegisterID
		    {
				get
		        {
					if(_FkRegisterID_W == null)
	        	    {
						_FkRegisterID_W = TearOff.FkRegisterID;
					}
					return _FkRegisterID_W;
				}
			}

			public WhereParameter RValue
		    {
				get
		        {
					if(_RValue_W == null)
	        	    {
						_RValue_W = TearOff.RValue;
					}
					return _RValue_W;
				}
			}

			public WhereParameter RDay
		    {
				get
		        {
					if(_RDay_W == null)
	        	    {
						_RDay_W = TearOff.RDay;
					}
					return _RDay_W;
				}
			}

			public WhereParameter RMonth
		    {
				get
		        {
					if(_RMonth_W == null)
	        	    {
						_RMonth_W = TearOff.RMonth;
					}
					return _RMonth_W;
				}
			}

			public WhereParameter RYear
		    {
				get
		        {
					if(_RYear_W == null)
	        	    {
						_RYear_W = TearOff.RYear;
					}
					return _RYear_W;
				}
			}

			public WhereParameter Iweeknumber
		    {
				get
		        {
					if(_Iweeknumber_W == null)
	        	    {
						_Iweeknumber_W = TearOff.Iweeknumber;
					}
					return _Iweeknumber_W;
				}
			}

			public WhereParameter Idaynumber
		    {
				get
		        {
					if(_Idaynumber_W == null)
	        	    {
						_Idaynumber_W = TearOff.Idaynumber;
					}
					return _Idaynumber_W;
				}
			}

			public WhereParameter Dweekstart
		    {
				get
		        {
					if(_Dweekstart_W == null)
	        	    {
						_Dweekstart_W = TearOff.Dweekstart;
					}
					return _Dweekstart_W;
				}
			}

			public WhereParameter Dweekend
		    {
				get
		        {
					if(_Dweekend_W == null)
	        	    {
						_Dweekend_W = TearOff.Dweekend;
					}
					return _Dweekend_W;
				}
			}

			public WhereParameter VatPer
		    {
				get
		        {
					if(_VatPer_W == null)
	        	    {
						_VatPer_W = TearOff.VatPer;
					}
					return _VatPer_W;
				}
			}

			public WhereParameter RNote
		    {
				get
		        {
					if(_RNote_W == null)
	        	    {
						_RNote_W = TearOff.RNote;
					}
					return _RNote_W;
				}
			}

			public WhereParameter DCreatedDate
		    {
				get
		        {
					if(_DCreatedDate_W == null)
	        	    {
						_DCreatedDate_W = TearOff.DCreatedDate;
					}
					return _DCreatedDate_W;
				}
			}

			public WhereParameter DModifiedDate
		    {
				get
		        {
					if(_DModifiedDate_W == null)
	        	    {
						_DModifiedDate_W = TearOff.DModifiedDate;
					}
					return _DModifiedDate_W;
				}
			}

			private WhereParameter _PkRegisterHistoryID_W = null;
			private WhereParameter _FkRegisterID_W = null;
			private WhereParameter _RValue_W = null;
			private WhereParameter _RDay_W = null;
			private WhereParameter _RMonth_W = null;
			private WhereParameter _RYear_W = null;
			private WhereParameter _Iweeknumber_W = null;
			private WhereParameter _Idaynumber_W = null;
			private WhereParameter _Dweekstart_W = null;
			private WhereParameter _Dweekend_W = null;
			private WhereParameter _VatPer_W = null;
			private WhereParameter _RNote_W = null;
			private WhereParameter _DCreatedDate_W = null;
			private WhereParameter _DModifiedDate_W = null;

			public void WhereClauseReset()
			{
				_PkRegisterHistoryID_W = null;
				_FkRegisterID_W = null;
				_RValue_W = null;
				_RDay_W = null;
				_RMonth_W = null;
				_RYear_W = null;
				_Iweeknumber_W = null;
				_Idaynumber_W = null;
				_Dweekstart_W = null;
				_Dweekend_W = null;
				_VatPer_W = null;
				_RNote_W = null;
				_DCreatedDate_W = null;
				_DModifiedDate_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter PkRegisterHistoryID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PkRegisterHistoryID, Parameters.PkRegisterHistoryID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FkRegisterID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FkRegisterID, Parameters.FkRegisterID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter RValue
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RValue, Parameters.RValue);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter RDay
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RDay, Parameters.RDay);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter RMonth
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RMonth, Parameters.RMonth);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter RYear
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RYear, Parameters.RYear);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Iweeknumber
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Iweeknumber, Parameters.Iweeknumber);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Idaynumber
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Idaynumber, Parameters.Idaynumber);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Dweekstart
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Dweekstart, Parameters.Dweekstart);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Dweekend
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Dweekend, Parameters.Dweekend);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter VatPer
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.VatPer, Parameters.VatPer);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter RNote
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RNote, Parameters.RNote);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DCreatedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DCreatedDate, Parameters.DCreatedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DModifiedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DModifiedDate, Parameters.DModifiedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter PkRegisterHistoryID
		    {
				get
		        {
					if(_PkRegisterHistoryID_W == null)
	        	    {
						_PkRegisterHistoryID_W = TearOff.PkRegisterHistoryID;
					}
					return _PkRegisterHistoryID_W;
				}
			}

			public AggregateParameter FkRegisterID
		    {
				get
		        {
					if(_FkRegisterID_W == null)
	        	    {
						_FkRegisterID_W = TearOff.FkRegisterID;
					}
					return _FkRegisterID_W;
				}
			}

			public AggregateParameter RValue
		    {
				get
		        {
					if(_RValue_W == null)
	        	    {
						_RValue_W = TearOff.RValue;
					}
					return _RValue_W;
				}
			}

			public AggregateParameter RDay
		    {
				get
		        {
					if(_RDay_W == null)
	        	    {
						_RDay_W = TearOff.RDay;
					}
					return _RDay_W;
				}
			}

			public AggregateParameter RMonth
		    {
				get
		        {
					if(_RMonth_W == null)
	        	    {
						_RMonth_W = TearOff.RMonth;
					}
					return _RMonth_W;
				}
			}

			public AggregateParameter RYear
		    {
				get
		        {
					if(_RYear_W == null)
	        	    {
						_RYear_W = TearOff.RYear;
					}
					return _RYear_W;
				}
			}

			public AggregateParameter Iweeknumber
		    {
				get
		        {
					if(_Iweeknumber_W == null)
	        	    {
						_Iweeknumber_W = TearOff.Iweeknumber;
					}
					return _Iweeknumber_W;
				}
			}

			public AggregateParameter Idaynumber
		    {
				get
		        {
					if(_Idaynumber_W == null)
	        	    {
						_Idaynumber_W = TearOff.Idaynumber;
					}
					return _Idaynumber_W;
				}
			}

			public AggregateParameter Dweekstart
		    {
				get
		        {
					if(_Dweekstart_W == null)
	        	    {
						_Dweekstart_W = TearOff.Dweekstart;
					}
					return _Dweekstart_W;
				}
			}

			public AggregateParameter Dweekend
		    {
				get
		        {
					if(_Dweekend_W == null)
	        	    {
						_Dweekend_W = TearOff.Dweekend;
					}
					return _Dweekend_W;
				}
			}

			public AggregateParameter VatPer
		    {
				get
		        {
					if(_VatPer_W == null)
	        	    {
						_VatPer_W = TearOff.VatPer;
					}
					return _VatPer_W;
				}
			}

			public AggregateParameter RNote
		    {
				get
		        {
					if(_RNote_W == null)
	        	    {
						_RNote_W = TearOff.RNote;
					}
					return _RNote_W;
				}
			}

			public AggregateParameter DCreatedDate
		    {
				get
		        {
					if(_DCreatedDate_W == null)
	        	    {
						_DCreatedDate_W = TearOff.DCreatedDate;
					}
					return _DCreatedDate_W;
				}
			}

			public AggregateParameter DModifiedDate
		    {
				get
		        {
					if(_DModifiedDate_W == null)
	        	    {
						_DModifiedDate_W = TearOff.DModifiedDate;
					}
					return _DModifiedDate_W;
				}
			}

			private AggregateParameter _PkRegisterHistoryID_W = null;
			private AggregateParameter _FkRegisterID_W = null;
			private AggregateParameter _RValue_W = null;
			private AggregateParameter _RDay_W = null;
			private AggregateParameter _RMonth_W = null;
			private AggregateParameter _RYear_W = null;
			private AggregateParameter _Iweeknumber_W = null;
			private AggregateParameter _Idaynumber_W = null;
			private AggregateParameter _Dweekstart_W = null;
			private AggregateParameter _Dweekend_W = null;
			private AggregateParameter _VatPer_W = null;
			private AggregateParameter _RNote_W = null;
			private AggregateParameter _DCreatedDate_W = null;
			private AggregateParameter _DModifiedDate_W = null;

			public void AggregateClauseReset()
			{
				_PkRegisterHistoryID_W = null;
				_FkRegisterID_W = null;
				_RValue_W = null;
				_RDay_W = null;
				_RMonth_W = null;
				_RYear_W = null;
				_Iweeknumber_W = null;
				_Idaynumber_W = null;
				_Dweekstart_W = null;
				_Dweekend_W = null;
				_VatPer_W = null;
				_RNote_W = null;
				_DCreatedDate_W = null;
				_DModifiedDate_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblRegisterHistoryInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.PkRegisterHistoryID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblRegisterHistoryUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblRegisterHistoryDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.PkRegisterHistoryID);
			p.SourceColumn = ColumnNames.PkRegisterHistoryID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.PkRegisterHistoryID);
			p.SourceColumn = ColumnNames.PkRegisterHistoryID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FkRegisterID);
			p.SourceColumn = ColumnNames.FkRegisterID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.RValue);
			p.SourceColumn = ColumnNames.RValue;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.RDay);
			p.SourceColumn = ColumnNames.RDay;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.RMonth);
			p.SourceColumn = ColumnNames.RMonth;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.RYear);
			p.SourceColumn = ColumnNames.RYear;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Iweeknumber);
			p.SourceColumn = ColumnNames.Iweeknumber;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Idaynumber);
			p.SourceColumn = ColumnNames.Idaynumber;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Dweekstart);
			p.SourceColumn = ColumnNames.Dweekstart;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Dweekend);
			p.SourceColumn = ColumnNames.Dweekend;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.VatPer);
			p.SourceColumn = ColumnNames.VatPer;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.RNote);
			p.SourceColumn = ColumnNames.RNote;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DCreatedDate);
			p.SourceColumn = ColumnNames.DCreatedDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DModifiedDate);
			p.SourceColumn = ColumnNames.DModifiedDate;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
