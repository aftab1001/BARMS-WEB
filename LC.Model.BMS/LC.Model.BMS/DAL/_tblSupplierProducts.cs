
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.1.7.1)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace LC.Model.BMS.DAL
{
	public abstract class _tblSupplierProducts : SqlClientEntity
	{
		public _tblSupplierProducts()
		{
			this.QuerySource = "tblSupplierProducts";
			this.MappingName = "tblSupplierProducts";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tblSupplierProductsLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int PkSupplierProductID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.PkSupplierProductID, PkSupplierProductID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tblSupplierProductsLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter PkSupplierProductID
			{
				get
				{
					return new SqlParameter("@PkSupplierProductID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter FkSupplierID
			{
				get
				{
					return new SqlParameter("@FkSupplierID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter FkProductID
			{
				get
				{
					return new SqlParameter("@FkProductID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter UnitPrice
			{
				get
				{
					return new SqlParameter("@UnitPrice", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter Packaging
			{
				get
				{
					return new SqlParameter("@Packaging", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Qty
			{
				get
				{
					return new SqlParameter("@Qty", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter DCreatedDate
			{
				get
				{
					return new SqlParameter("@DCreatedDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter DModifiedDate
			{
				get
				{
					return new SqlParameter("@DModifiedDate", SqlDbType.DateTime, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string PkSupplierProductID = "pkSupplierProductID";
            public const string FkSupplierID = "fkSupplierID";
            public const string FkProductID = "fkProductID";
            public const string UnitPrice = "UnitPrice";
            public const string Packaging = "Packaging";
            public const string Qty = "Qty";
            public const string DCreatedDate = "dCreatedDate";
            public const string DModifiedDate = "dModifiedDate";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[PkSupplierProductID] = _tblSupplierProducts.PropertyNames.PkSupplierProductID;
					ht[FkSupplierID] = _tblSupplierProducts.PropertyNames.FkSupplierID;
					ht[FkProductID] = _tblSupplierProducts.PropertyNames.FkProductID;
					ht[UnitPrice] = _tblSupplierProducts.PropertyNames.UnitPrice;
					ht[Packaging] = _tblSupplierProducts.PropertyNames.Packaging;
					ht[Qty] = _tblSupplierProducts.PropertyNames.Qty;
					ht[DCreatedDate] = _tblSupplierProducts.PropertyNames.DCreatedDate;
					ht[DModifiedDate] = _tblSupplierProducts.PropertyNames.DModifiedDate;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string PkSupplierProductID = "PkSupplierProductID";
            public const string FkSupplierID = "FkSupplierID";
            public const string FkProductID = "FkProductID";
            public const string UnitPrice = "UnitPrice";
            public const string Packaging = "Packaging";
            public const string Qty = "Qty";
            public const string DCreatedDate = "DCreatedDate";
            public const string DModifiedDate = "DModifiedDate";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[PkSupplierProductID] = _tblSupplierProducts.ColumnNames.PkSupplierProductID;
					ht[FkSupplierID] = _tblSupplierProducts.ColumnNames.FkSupplierID;
					ht[FkProductID] = _tblSupplierProducts.ColumnNames.FkProductID;
					ht[UnitPrice] = _tblSupplierProducts.ColumnNames.UnitPrice;
					ht[Packaging] = _tblSupplierProducts.ColumnNames.Packaging;
					ht[Qty] = _tblSupplierProducts.ColumnNames.Qty;
					ht[DCreatedDate] = _tblSupplierProducts.ColumnNames.DCreatedDate;
					ht[DModifiedDate] = _tblSupplierProducts.ColumnNames.DModifiedDate;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string PkSupplierProductID = "s_PkSupplierProductID";
            public const string FkSupplierID = "s_FkSupplierID";
            public const string FkProductID = "s_FkProductID";
            public const string UnitPrice = "s_UnitPrice";
            public const string Packaging = "s_Packaging";
            public const string Qty = "s_Qty";
            public const string DCreatedDate = "s_DCreatedDate";
            public const string DModifiedDate = "s_DModifiedDate";

		}
		#endregion		
		
		#region Properties
	
		public virtual int PkSupplierProductID
	    {
			get
	        {
				return base.Getint(ColumnNames.PkSupplierProductID);
			}
			set
	        {
				base.Setint(ColumnNames.PkSupplierProductID, value);
			}
		}

		public virtual int FkSupplierID
	    {
			get
	        {
				return base.Getint(ColumnNames.FkSupplierID);
			}
			set
	        {
				base.Setint(ColumnNames.FkSupplierID, value);
			}
		}

		public virtual int FkProductID
	    {
			get
	        {
				return base.Getint(ColumnNames.FkProductID);
			}
			set
	        {
				base.Setint(ColumnNames.FkProductID, value);
			}
		}

		public virtual double UnitPrice
	    {
			get
	        {
				return base.Getdouble(ColumnNames.UnitPrice);
			}
			set
	        {
				base.Setdouble(ColumnNames.UnitPrice, value);
			}
		}

		public virtual string Packaging
	    {
			get
	        {
				return base.Getstring(ColumnNames.Packaging);
			}
			set
	        {
				base.Setstring(ColumnNames.Packaging, value);
			}
		}

		public virtual string Qty
	    {
			get
	        {
				return base.Getstring(ColumnNames.Qty);
			}
			set
	        {
				base.Setstring(ColumnNames.Qty, value);
			}
		}

		public virtual DateTime DCreatedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.DCreatedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.DCreatedDate, value);
			}
		}

		public virtual DateTime DModifiedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.DModifiedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.DModifiedDate, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_PkSupplierProductID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PkSupplierProductID) ? string.Empty : base.GetintAsString(ColumnNames.PkSupplierProductID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PkSupplierProductID);
				else
					this.PkSupplierProductID = base.SetintAsString(ColumnNames.PkSupplierProductID, value);
			}
		}

		public virtual string s_FkSupplierID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FkSupplierID) ? string.Empty : base.GetintAsString(ColumnNames.FkSupplierID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FkSupplierID);
				else
					this.FkSupplierID = base.SetintAsString(ColumnNames.FkSupplierID, value);
			}
		}

		public virtual string s_FkProductID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FkProductID) ? string.Empty : base.GetintAsString(ColumnNames.FkProductID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FkProductID);
				else
					this.FkProductID = base.SetintAsString(ColumnNames.FkProductID, value);
			}
		}

		public virtual string s_UnitPrice
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UnitPrice) ? string.Empty : base.GetdoubleAsString(ColumnNames.UnitPrice);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UnitPrice);
				else
					this.UnitPrice = base.SetdoubleAsString(ColumnNames.UnitPrice, value);
			}
		}

		public virtual string s_Packaging
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Packaging) ? string.Empty : base.GetstringAsString(ColumnNames.Packaging);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Packaging);
				else
					this.Packaging = base.SetstringAsString(ColumnNames.Packaging, value);
			}
		}

		public virtual string s_Qty
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Qty) ? string.Empty : base.GetstringAsString(ColumnNames.Qty);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Qty);
				else
					this.Qty = base.SetstringAsString(ColumnNames.Qty, value);
			}
		}

		public virtual string s_DCreatedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DCreatedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DCreatedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DCreatedDate);
				else
					this.DCreatedDate = base.SetDateTimeAsString(ColumnNames.DCreatedDate, value);
			}
		}

		public virtual string s_DModifiedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DModifiedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DModifiedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DModifiedDate);
				else
					this.DModifiedDate = base.SetDateTimeAsString(ColumnNames.DModifiedDate, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter PkSupplierProductID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PkSupplierProductID, Parameters.PkSupplierProductID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FkSupplierID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FkSupplierID, Parameters.FkSupplierID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FkProductID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FkProductID, Parameters.FkProductID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter UnitPrice
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UnitPrice, Parameters.UnitPrice);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Packaging
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Packaging, Parameters.Packaging);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Qty
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Qty, Parameters.Qty);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DCreatedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DCreatedDate, Parameters.DCreatedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DModifiedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DModifiedDate, Parameters.DModifiedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter PkSupplierProductID
		    {
				get
		        {
					if(_PkSupplierProductID_W == null)
	        	    {
						_PkSupplierProductID_W = TearOff.PkSupplierProductID;
					}
					return _PkSupplierProductID_W;
				}
			}

			public WhereParameter FkSupplierID
		    {
				get
		        {
					if(_FkSupplierID_W == null)
	        	    {
						_FkSupplierID_W = TearOff.FkSupplierID;
					}
					return _FkSupplierID_W;
				}
			}

			public WhereParameter FkProductID
		    {
				get
		        {
					if(_FkProductID_W == null)
	        	    {
						_FkProductID_W = TearOff.FkProductID;
					}
					return _FkProductID_W;
				}
			}

			public WhereParameter UnitPrice
		    {
				get
		        {
					if(_UnitPrice_W == null)
	        	    {
						_UnitPrice_W = TearOff.UnitPrice;
					}
					return _UnitPrice_W;
				}
			}

			public WhereParameter Packaging
		    {
				get
		        {
					if(_Packaging_W == null)
	        	    {
						_Packaging_W = TearOff.Packaging;
					}
					return _Packaging_W;
				}
			}

			public WhereParameter Qty
		    {
				get
		        {
					if(_Qty_W == null)
	        	    {
						_Qty_W = TearOff.Qty;
					}
					return _Qty_W;
				}
			}

			public WhereParameter DCreatedDate
		    {
				get
		        {
					if(_DCreatedDate_W == null)
	        	    {
						_DCreatedDate_W = TearOff.DCreatedDate;
					}
					return _DCreatedDate_W;
				}
			}

			public WhereParameter DModifiedDate
		    {
				get
		        {
					if(_DModifiedDate_W == null)
	        	    {
						_DModifiedDate_W = TearOff.DModifiedDate;
					}
					return _DModifiedDate_W;
				}
			}

			private WhereParameter _PkSupplierProductID_W = null;
			private WhereParameter _FkSupplierID_W = null;
			private WhereParameter _FkProductID_W = null;
			private WhereParameter _UnitPrice_W = null;
			private WhereParameter _Packaging_W = null;
			private WhereParameter _Qty_W = null;
			private WhereParameter _DCreatedDate_W = null;
			private WhereParameter _DModifiedDate_W = null;

			public void WhereClauseReset()
			{
				_PkSupplierProductID_W = null;
				_FkSupplierID_W = null;
				_FkProductID_W = null;
				_UnitPrice_W = null;
				_Packaging_W = null;
				_Qty_W = null;
				_DCreatedDate_W = null;
				_DModifiedDate_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter PkSupplierProductID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PkSupplierProductID, Parameters.PkSupplierProductID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FkSupplierID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FkSupplierID, Parameters.FkSupplierID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FkProductID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FkProductID, Parameters.FkProductID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter UnitPrice
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UnitPrice, Parameters.UnitPrice);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Packaging
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Packaging, Parameters.Packaging);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Qty
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Qty, Parameters.Qty);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DCreatedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DCreatedDate, Parameters.DCreatedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DModifiedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DModifiedDate, Parameters.DModifiedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter PkSupplierProductID
		    {
				get
		        {
					if(_PkSupplierProductID_W == null)
	        	    {
						_PkSupplierProductID_W = TearOff.PkSupplierProductID;
					}
					return _PkSupplierProductID_W;
				}
			}

			public AggregateParameter FkSupplierID
		    {
				get
		        {
					if(_FkSupplierID_W == null)
	        	    {
						_FkSupplierID_W = TearOff.FkSupplierID;
					}
					return _FkSupplierID_W;
				}
			}

			public AggregateParameter FkProductID
		    {
				get
		        {
					if(_FkProductID_W == null)
	        	    {
						_FkProductID_W = TearOff.FkProductID;
					}
					return _FkProductID_W;
				}
			}

			public AggregateParameter UnitPrice
		    {
				get
		        {
					if(_UnitPrice_W == null)
	        	    {
						_UnitPrice_W = TearOff.UnitPrice;
					}
					return _UnitPrice_W;
				}
			}

			public AggregateParameter Packaging
		    {
				get
		        {
					if(_Packaging_W == null)
	        	    {
						_Packaging_W = TearOff.Packaging;
					}
					return _Packaging_W;
				}
			}

			public AggregateParameter Qty
		    {
				get
		        {
					if(_Qty_W == null)
	        	    {
						_Qty_W = TearOff.Qty;
					}
					return _Qty_W;
				}
			}

			public AggregateParameter DCreatedDate
		    {
				get
		        {
					if(_DCreatedDate_W == null)
	        	    {
						_DCreatedDate_W = TearOff.DCreatedDate;
					}
					return _DCreatedDate_W;
				}
			}

			public AggregateParameter DModifiedDate
		    {
				get
		        {
					if(_DModifiedDate_W == null)
	        	    {
						_DModifiedDate_W = TearOff.DModifiedDate;
					}
					return _DModifiedDate_W;
				}
			}

			private AggregateParameter _PkSupplierProductID_W = null;
			private AggregateParameter _FkSupplierID_W = null;
			private AggregateParameter _FkProductID_W = null;
			private AggregateParameter _UnitPrice_W = null;
			private AggregateParameter _Packaging_W = null;
			private AggregateParameter _Qty_W = null;
			private AggregateParameter _DCreatedDate_W = null;
			private AggregateParameter _DModifiedDate_W = null;

			public void AggregateClauseReset()
			{
				_PkSupplierProductID_W = null;
				_FkSupplierID_W = null;
				_FkProductID_W = null;
				_UnitPrice_W = null;
				_Packaging_W = null;
				_Qty_W = null;
				_DCreatedDate_W = null;
				_DModifiedDate_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblSupplierProductsInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.PkSupplierProductID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblSupplierProductsUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblSupplierProductsDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.PkSupplierProductID);
			p.SourceColumn = ColumnNames.PkSupplierProductID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.PkSupplierProductID);
			p.SourceColumn = ColumnNames.PkSupplierProductID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FkSupplierID);
			p.SourceColumn = ColumnNames.FkSupplierID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FkProductID);
			p.SourceColumn = ColumnNames.FkProductID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.UnitPrice);
			p.SourceColumn = ColumnNames.UnitPrice;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Packaging);
			p.SourceColumn = ColumnNames.Packaging;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Qty);
			p.SourceColumn = ColumnNames.Qty;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DCreatedDate);
			p.SourceColumn = ColumnNames.DCreatedDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DModifiedDate);
			p.SourceColumn = ColumnNames.DModifiedDate;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
