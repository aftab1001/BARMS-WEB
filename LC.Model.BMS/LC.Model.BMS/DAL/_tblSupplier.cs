
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.1.7.1)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace LC.Model.BMS.DAL
{
	public abstract class _tblSupplier : SqlClientEntity
	{
		public _tblSupplier()
		{
			this.QuerySource = "tblSupplier";
			this.MappingName = "tblSupplier";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tblSupplierLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int PkSupplierID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.PkSupplierID, PkSupplierID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tblSupplierLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter PkSupplierID
			{
				get
				{
					return new SqlParameter("@PkSupplierID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter SBrandName
			{
				get
				{
					return new SqlParameter("@SBrandName", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter SCard
			{
				get
				{
					return new SqlParameter("@SCard", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter SLogo
			{
				get
				{
					return new SqlParameter("@SLogo", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Website
			{
				get
				{
					return new SqlParameter("@Website", SqlDbType.NText, 1073741823);
				}
			}
			
			public static SqlParameter SocialProfile1
			{
				get
				{
					return new SqlParameter("@SocialProfile1", SqlDbType.NText, 1073741823);
				}
			}
			
			public static SqlParameter SocialProfile2
			{
				get
				{
					return new SqlParameter("@SocialProfile2", SqlDbType.NText, 1073741823);
				}
			}
			
			public static SqlParameter SContactMethod_Email
			{
				get
				{
					return new SqlParameter("@SContactMethod_Email", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter SContactMethod_Fax
			{
				get
				{
					return new SqlParameter("@SContactMethod_Fax", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter SContactMethod_Phone
			{
				get
				{
					return new SqlParameter("@SContactMethod_Phone", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter IsActive
			{
				get
				{
					return new SqlParameter("@IsActive", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter DModifiedDate
			{
				get
				{
					return new SqlParameter("@DModifiedDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter DCreatedDate
			{
				get
				{
					return new SqlParameter("@DCreatedDate", SqlDbType.DateTime, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string PkSupplierID = "pkSupplierID";
            public const string SBrandName = "sBrandName";
            public const string SCard = "sCard";
            public const string SLogo = "sLogo";
            public const string Website = "Website";
            public const string SocialProfile1 = "SocialProfile1";
            public const string SocialProfile2 = "SocialProfile2";
            public const string SContactMethod_Email = "sContactMethod_Email";
            public const string SContactMethod_Fax = "sContactMethod_Fax";
            public const string SContactMethod_Phone = "sContactMethod_Phone";
            public const string IsActive = "isActive";
            public const string DModifiedDate = "dModifiedDate";
            public const string DCreatedDate = "dCreatedDate";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[PkSupplierID] = _tblSupplier.PropertyNames.PkSupplierID;
					ht[SBrandName] = _tblSupplier.PropertyNames.SBrandName;
					ht[SCard] = _tblSupplier.PropertyNames.SCard;
					ht[SLogo] = _tblSupplier.PropertyNames.SLogo;
					ht[Website] = _tblSupplier.PropertyNames.Website;
					ht[SocialProfile1] = _tblSupplier.PropertyNames.SocialProfile1;
					ht[SocialProfile2] = _tblSupplier.PropertyNames.SocialProfile2;
					ht[SContactMethod_Email] = _tblSupplier.PropertyNames.SContactMethod_Email;
					ht[SContactMethod_Fax] = _tblSupplier.PropertyNames.SContactMethod_Fax;
					ht[SContactMethod_Phone] = _tblSupplier.PropertyNames.SContactMethod_Phone;
					ht[IsActive] = _tblSupplier.PropertyNames.IsActive;
					ht[DModifiedDate] = _tblSupplier.PropertyNames.DModifiedDate;
					ht[DCreatedDate] = _tblSupplier.PropertyNames.DCreatedDate;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string PkSupplierID = "PkSupplierID";
            public const string SBrandName = "SBrandName";
            public const string SCard = "SCard";
            public const string SLogo = "SLogo";
            public const string Website = "Website";
            public const string SocialProfile1 = "SocialProfile1";
            public const string SocialProfile2 = "SocialProfile2";
            public const string SContactMethod_Email = "SContactMethod_Email";
            public const string SContactMethod_Fax = "SContactMethod_Fax";
            public const string SContactMethod_Phone = "SContactMethod_Phone";
            public const string IsActive = "IsActive";
            public const string DModifiedDate = "DModifiedDate";
            public const string DCreatedDate = "DCreatedDate";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[PkSupplierID] = _tblSupplier.ColumnNames.PkSupplierID;
					ht[SBrandName] = _tblSupplier.ColumnNames.SBrandName;
					ht[SCard] = _tblSupplier.ColumnNames.SCard;
					ht[SLogo] = _tblSupplier.ColumnNames.SLogo;
					ht[Website] = _tblSupplier.ColumnNames.Website;
					ht[SocialProfile1] = _tblSupplier.ColumnNames.SocialProfile1;
					ht[SocialProfile2] = _tblSupplier.ColumnNames.SocialProfile2;
					ht[SContactMethod_Email] = _tblSupplier.ColumnNames.SContactMethod_Email;
					ht[SContactMethod_Fax] = _tblSupplier.ColumnNames.SContactMethod_Fax;
					ht[SContactMethod_Phone] = _tblSupplier.ColumnNames.SContactMethod_Phone;
					ht[IsActive] = _tblSupplier.ColumnNames.IsActive;
					ht[DModifiedDate] = _tblSupplier.ColumnNames.DModifiedDate;
					ht[DCreatedDate] = _tblSupplier.ColumnNames.DCreatedDate;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string PkSupplierID = "s_PkSupplierID";
            public const string SBrandName = "s_SBrandName";
            public const string SCard = "s_SCard";
            public const string SLogo = "s_SLogo";
            public const string Website = "s_Website";
            public const string SocialProfile1 = "s_SocialProfile1";
            public const string SocialProfile2 = "s_SocialProfile2";
            public const string SContactMethod_Email = "s_SContactMethod_Email";
            public const string SContactMethod_Fax = "s_SContactMethod_Fax";
            public const string SContactMethod_Phone = "s_SContactMethod_Phone";
            public const string IsActive = "s_IsActive";
            public const string DModifiedDate = "s_DModifiedDate";
            public const string DCreatedDate = "s_DCreatedDate";

		}
		#endregion		
		
		#region Properties
	
		public virtual int PkSupplierID
	    {
			get
	        {
				return base.Getint(ColumnNames.PkSupplierID);
			}
			set
	        {
				base.Setint(ColumnNames.PkSupplierID, value);
			}
		}

		public virtual string SBrandName
	    {
			get
	        {
				return base.Getstring(ColumnNames.SBrandName);
			}
			set
	        {
				base.Setstring(ColumnNames.SBrandName, value);
			}
		}

		public virtual string SCard
	    {
			get
	        {
				return base.Getstring(ColumnNames.SCard);
			}
			set
	        {
				base.Setstring(ColumnNames.SCard, value);
			}
		}

		public virtual string SLogo
	    {
			get
	        {
				return base.Getstring(ColumnNames.SLogo);
			}
			set
	        {
				base.Setstring(ColumnNames.SLogo, value);
			}
		}

		public virtual string Website
	    {
			get
	        {
				return base.Getstring(ColumnNames.Website);
			}
			set
	        {
				base.Setstring(ColumnNames.Website, value);
			}
		}

		public virtual string SocialProfile1
	    {
			get
	        {
				return base.Getstring(ColumnNames.SocialProfile1);
			}
			set
	        {
				base.Setstring(ColumnNames.SocialProfile1, value);
			}
		}

		public virtual string SocialProfile2
	    {
			get
	        {
				return base.Getstring(ColumnNames.SocialProfile2);
			}
			set
	        {
				base.Setstring(ColumnNames.SocialProfile2, value);
			}
		}

		public virtual bool SContactMethod_Email
	    {
			get
	        {
				return base.Getbool(ColumnNames.SContactMethod_Email);
			}
			set
	        {
				base.Setbool(ColumnNames.SContactMethod_Email, value);
			}
		}

		public virtual bool SContactMethod_Fax
	    {
			get
	        {
				return base.Getbool(ColumnNames.SContactMethod_Fax);
			}
			set
	        {
				base.Setbool(ColumnNames.SContactMethod_Fax, value);
			}
		}

		public virtual bool SContactMethod_Phone
	    {
			get
	        {
				return base.Getbool(ColumnNames.SContactMethod_Phone);
			}
			set
	        {
				base.Setbool(ColumnNames.SContactMethod_Phone, value);
			}
		}

		public virtual bool IsActive
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsActive);
			}
			set
	        {
				base.Setbool(ColumnNames.IsActive, value);
			}
		}

		public virtual DateTime DModifiedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.DModifiedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.DModifiedDate, value);
			}
		}

		public virtual DateTime DCreatedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.DCreatedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.DCreatedDate, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_PkSupplierID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PkSupplierID) ? string.Empty : base.GetintAsString(ColumnNames.PkSupplierID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PkSupplierID);
				else
					this.PkSupplierID = base.SetintAsString(ColumnNames.PkSupplierID, value);
			}
		}

		public virtual string s_SBrandName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SBrandName) ? string.Empty : base.GetstringAsString(ColumnNames.SBrandName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SBrandName);
				else
					this.SBrandName = base.SetstringAsString(ColumnNames.SBrandName, value);
			}
		}

		public virtual string s_SCard
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SCard) ? string.Empty : base.GetstringAsString(ColumnNames.SCard);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SCard);
				else
					this.SCard = base.SetstringAsString(ColumnNames.SCard, value);
			}
		}

		public virtual string s_SLogo
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SLogo) ? string.Empty : base.GetstringAsString(ColumnNames.SLogo);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SLogo);
				else
					this.SLogo = base.SetstringAsString(ColumnNames.SLogo, value);
			}
		}

		public virtual string s_Website
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Website) ? string.Empty : base.GetstringAsString(ColumnNames.Website);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Website);
				else
					this.Website = base.SetstringAsString(ColumnNames.Website, value);
			}
		}

		public virtual string s_SocialProfile1
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SocialProfile1) ? string.Empty : base.GetstringAsString(ColumnNames.SocialProfile1);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SocialProfile1);
				else
					this.SocialProfile1 = base.SetstringAsString(ColumnNames.SocialProfile1, value);
			}
		}

		public virtual string s_SocialProfile2
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SocialProfile2) ? string.Empty : base.GetstringAsString(ColumnNames.SocialProfile2);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SocialProfile2);
				else
					this.SocialProfile2 = base.SetstringAsString(ColumnNames.SocialProfile2, value);
			}
		}

		public virtual string s_SContactMethod_Email
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SContactMethod_Email) ? string.Empty : base.GetboolAsString(ColumnNames.SContactMethod_Email);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SContactMethod_Email);
				else
					this.SContactMethod_Email = base.SetboolAsString(ColumnNames.SContactMethod_Email, value);
			}
		}

		public virtual string s_SContactMethod_Fax
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SContactMethod_Fax) ? string.Empty : base.GetboolAsString(ColumnNames.SContactMethod_Fax);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SContactMethod_Fax);
				else
					this.SContactMethod_Fax = base.SetboolAsString(ColumnNames.SContactMethod_Fax, value);
			}
		}

		public virtual string s_SContactMethod_Phone
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SContactMethod_Phone) ? string.Empty : base.GetboolAsString(ColumnNames.SContactMethod_Phone);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SContactMethod_Phone);
				else
					this.SContactMethod_Phone = base.SetboolAsString(ColumnNames.SContactMethod_Phone, value);
			}
		}

		public virtual string s_IsActive
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsActive) ? string.Empty : base.GetboolAsString(ColumnNames.IsActive);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsActive);
				else
					this.IsActive = base.SetboolAsString(ColumnNames.IsActive, value);
			}
		}

		public virtual string s_DModifiedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DModifiedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DModifiedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DModifiedDate);
				else
					this.DModifiedDate = base.SetDateTimeAsString(ColumnNames.DModifiedDate, value);
			}
		}

		public virtual string s_DCreatedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DCreatedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DCreatedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DCreatedDate);
				else
					this.DCreatedDate = base.SetDateTimeAsString(ColumnNames.DCreatedDate, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter PkSupplierID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PkSupplierID, Parameters.PkSupplierID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SBrandName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SBrandName, Parameters.SBrandName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SCard
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SCard, Parameters.SCard);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SLogo
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SLogo, Parameters.SLogo);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Website
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Website, Parameters.Website);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SocialProfile1
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SocialProfile1, Parameters.SocialProfile1);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SocialProfile2
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SocialProfile2, Parameters.SocialProfile2);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SContactMethod_Email
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SContactMethod_Email, Parameters.SContactMethod_Email);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SContactMethod_Fax
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SContactMethod_Fax, Parameters.SContactMethod_Fax);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SContactMethod_Phone
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SContactMethod_Phone, Parameters.SContactMethod_Phone);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsActive
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsActive, Parameters.IsActive);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DModifiedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DModifiedDate, Parameters.DModifiedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DCreatedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DCreatedDate, Parameters.DCreatedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter PkSupplierID
		    {
				get
		        {
					if(_PkSupplierID_W == null)
	        	    {
						_PkSupplierID_W = TearOff.PkSupplierID;
					}
					return _PkSupplierID_W;
				}
			}

			public WhereParameter SBrandName
		    {
				get
		        {
					if(_SBrandName_W == null)
	        	    {
						_SBrandName_W = TearOff.SBrandName;
					}
					return _SBrandName_W;
				}
			}

			public WhereParameter SCard
		    {
				get
		        {
					if(_SCard_W == null)
	        	    {
						_SCard_W = TearOff.SCard;
					}
					return _SCard_W;
				}
			}

			public WhereParameter SLogo
		    {
				get
		        {
					if(_SLogo_W == null)
	        	    {
						_SLogo_W = TearOff.SLogo;
					}
					return _SLogo_W;
				}
			}

			public WhereParameter Website
		    {
				get
		        {
					if(_Website_W == null)
	        	    {
						_Website_W = TearOff.Website;
					}
					return _Website_W;
				}
			}

			public WhereParameter SocialProfile1
		    {
				get
		        {
					if(_SocialProfile1_W == null)
	        	    {
						_SocialProfile1_W = TearOff.SocialProfile1;
					}
					return _SocialProfile1_W;
				}
			}

			public WhereParameter SocialProfile2
		    {
				get
		        {
					if(_SocialProfile2_W == null)
	        	    {
						_SocialProfile2_W = TearOff.SocialProfile2;
					}
					return _SocialProfile2_W;
				}
			}

			public WhereParameter SContactMethod_Email
		    {
				get
		        {
					if(_SContactMethod_Email_W == null)
	        	    {
						_SContactMethod_Email_W = TearOff.SContactMethod_Email;
					}
					return _SContactMethod_Email_W;
				}
			}

			public WhereParameter SContactMethod_Fax
		    {
				get
		        {
					if(_SContactMethod_Fax_W == null)
	        	    {
						_SContactMethod_Fax_W = TearOff.SContactMethod_Fax;
					}
					return _SContactMethod_Fax_W;
				}
			}

			public WhereParameter SContactMethod_Phone
		    {
				get
		        {
					if(_SContactMethod_Phone_W == null)
	        	    {
						_SContactMethod_Phone_W = TearOff.SContactMethod_Phone;
					}
					return _SContactMethod_Phone_W;
				}
			}

			public WhereParameter IsActive
		    {
				get
		        {
					if(_IsActive_W == null)
	        	    {
						_IsActive_W = TearOff.IsActive;
					}
					return _IsActive_W;
				}
			}

			public WhereParameter DModifiedDate
		    {
				get
		        {
					if(_DModifiedDate_W == null)
	        	    {
						_DModifiedDate_W = TearOff.DModifiedDate;
					}
					return _DModifiedDate_W;
				}
			}

			public WhereParameter DCreatedDate
		    {
				get
		        {
					if(_DCreatedDate_W == null)
	        	    {
						_DCreatedDate_W = TearOff.DCreatedDate;
					}
					return _DCreatedDate_W;
				}
			}

			private WhereParameter _PkSupplierID_W = null;
			private WhereParameter _SBrandName_W = null;
			private WhereParameter _SCard_W = null;
			private WhereParameter _SLogo_W = null;
			private WhereParameter _Website_W = null;
			private WhereParameter _SocialProfile1_W = null;
			private WhereParameter _SocialProfile2_W = null;
			private WhereParameter _SContactMethod_Email_W = null;
			private WhereParameter _SContactMethod_Fax_W = null;
			private WhereParameter _SContactMethod_Phone_W = null;
			private WhereParameter _IsActive_W = null;
			private WhereParameter _DModifiedDate_W = null;
			private WhereParameter _DCreatedDate_W = null;

			public void WhereClauseReset()
			{
				_PkSupplierID_W = null;
				_SBrandName_W = null;
				_SCard_W = null;
				_SLogo_W = null;
				_Website_W = null;
				_SocialProfile1_W = null;
				_SocialProfile2_W = null;
				_SContactMethod_Email_W = null;
				_SContactMethod_Fax_W = null;
				_SContactMethod_Phone_W = null;
				_IsActive_W = null;
				_DModifiedDate_W = null;
				_DCreatedDate_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter PkSupplierID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PkSupplierID, Parameters.PkSupplierID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SBrandName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SBrandName, Parameters.SBrandName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SCard
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SCard, Parameters.SCard);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SLogo
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SLogo, Parameters.SLogo);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Website
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Website, Parameters.Website);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SocialProfile1
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SocialProfile1, Parameters.SocialProfile1);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SocialProfile2
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SocialProfile2, Parameters.SocialProfile2);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SContactMethod_Email
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SContactMethod_Email, Parameters.SContactMethod_Email);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SContactMethod_Fax
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SContactMethod_Fax, Parameters.SContactMethod_Fax);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SContactMethod_Phone
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SContactMethod_Phone, Parameters.SContactMethod_Phone);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsActive
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsActive, Parameters.IsActive);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DModifiedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DModifiedDate, Parameters.DModifiedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DCreatedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DCreatedDate, Parameters.DCreatedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter PkSupplierID
		    {
				get
		        {
					if(_PkSupplierID_W == null)
	        	    {
						_PkSupplierID_W = TearOff.PkSupplierID;
					}
					return _PkSupplierID_W;
				}
			}

			public AggregateParameter SBrandName
		    {
				get
		        {
					if(_SBrandName_W == null)
	        	    {
						_SBrandName_W = TearOff.SBrandName;
					}
					return _SBrandName_W;
				}
			}

			public AggregateParameter SCard
		    {
				get
		        {
					if(_SCard_W == null)
	        	    {
						_SCard_W = TearOff.SCard;
					}
					return _SCard_W;
				}
			}

			public AggregateParameter SLogo
		    {
				get
		        {
					if(_SLogo_W == null)
	        	    {
						_SLogo_W = TearOff.SLogo;
					}
					return _SLogo_W;
				}
			}

			public AggregateParameter Website
		    {
				get
		        {
					if(_Website_W == null)
	        	    {
						_Website_W = TearOff.Website;
					}
					return _Website_W;
				}
			}

			public AggregateParameter SocialProfile1
		    {
				get
		        {
					if(_SocialProfile1_W == null)
	        	    {
						_SocialProfile1_W = TearOff.SocialProfile1;
					}
					return _SocialProfile1_W;
				}
			}

			public AggregateParameter SocialProfile2
		    {
				get
		        {
					if(_SocialProfile2_W == null)
	        	    {
						_SocialProfile2_W = TearOff.SocialProfile2;
					}
					return _SocialProfile2_W;
				}
			}

			public AggregateParameter SContactMethod_Email
		    {
				get
		        {
					if(_SContactMethod_Email_W == null)
	        	    {
						_SContactMethod_Email_W = TearOff.SContactMethod_Email;
					}
					return _SContactMethod_Email_W;
				}
			}

			public AggregateParameter SContactMethod_Fax
		    {
				get
		        {
					if(_SContactMethod_Fax_W == null)
	        	    {
						_SContactMethod_Fax_W = TearOff.SContactMethod_Fax;
					}
					return _SContactMethod_Fax_W;
				}
			}

			public AggregateParameter SContactMethod_Phone
		    {
				get
		        {
					if(_SContactMethod_Phone_W == null)
	        	    {
						_SContactMethod_Phone_W = TearOff.SContactMethod_Phone;
					}
					return _SContactMethod_Phone_W;
				}
			}

			public AggregateParameter IsActive
		    {
				get
		        {
					if(_IsActive_W == null)
	        	    {
						_IsActive_W = TearOff.IsActive;
					}
					return _IsActive_W;
				}
			}

			public AggregateParameter DModifiedDate
		    {
				get
		        {
					if(_DModifiedDate_W == null)
	        	    {
						_DModifiedDate_W = TearOff.DModifiedDate;
					}
					return _DModifiedDate_W;
				}
			}

			public AggregateParameter DCreatedDate
		    {
				get
		        {
					if(_DCreatedDate_W == null)
	        	    {
						_DCreatedDate_W = TearOff.DCreatedDate;
					}
					return _DCreatedDate_W;
				}
			}

			private AggregateParameter _PkSupplierID_W = null;
			private AggregateParameter _SBrandName_W = null;
			private AggregateParameter _SCard_W = null;
			private AggregateParameter _SLogo_W = null;
			private AggregateParameter _Website_W = null;
			private AggregateParameter _SocialProfile1_W = null;
			private AggregateParameter _SocialProfile2_W = null;
			private AggregateParameter _SContactMethod_Email_W = null;
			private AggregateParameter _SContactMethod_Fax_W = null;
			private AggregateParameter _SContactMethod_Phone_W = null;
			private AggregateParameter _IsActive_W = null;
			private AggregateParameter _DModifiedDate_W = null;
			private AggregateParameter _DCreatedDate_W = null;

			public void AggregateClauseReset()
			{
				_PkSupplierID_W = null;
				_SBrandName_W = null;
				_SCard_W = null;
				_SLogo_W = null;
				_Website_W = null;
				_SocialProfile1_W = null;
				_SocialProfile2_W = null;
				_SContactMethod_Email_W = null;
				_SContactMethod_Fax_W = null;
				_SContactMethod_Phone_W = null;
				_IsActive_W = null;
				_DModifiedDate_W = null;
				_DCreatedDate_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblSupplierInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.PkSupplierID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblSupplierUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblSupplierDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.PkSupplierID);
			p.SourceColumn = ColumnNames.PkSupplierID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.PkSupplierID);
			p.SourceColumn = ColumnNames.PkSupplierID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SBrandName);
			p.SourceColumn = ColumnNames.SBrandName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SCard);
			p.SourceColumn = ColumnNames.SCard;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SLogo);
			p.SourceColumn = ColumnNames.SLogo;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Website);
			p.SourceColumn = ColumnNames.Website;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SocialProfile1);
			p.SourceColumn = ColumnNames.SocialProfile1;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SocialProfile2);
			p.SourceColumn = ColumnNames.SocialProfile2;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SContactMethod_Email);
			p.SourceColumn = ColumnNames.SContactMethod_Email;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SContactMethod_Fax);
			p.SourceColumn = ColumnNames.SContactMethod_Fax;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SContactMethod_Phone);
			p.SourceColumn = ColumnNames.SContactMethod_Phone;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsActive);
			p.SourceColumn = ColumnNames.IsActive;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DModifiedDate);
			p.SourceColumn = ColumnNames.DModifiedDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DCreatedDate);
			p.SourceColumn = ColumnNames.DCreatedDate;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
