
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.1.7.1)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace LC.Model.BMS.DAL
{
	public abstract class _tblSupplierAddresses : SqlClientEntity
	{
		public _tblSupplierAddresses()
		{
			this.QuerySource = "tblSupplierAddresses";
			this.MappingName = "tblSupplierAddresses";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tblSupplierAddressesLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int PkSupplierAddressID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.PkSupplierAddressID, PkSupplierAddressID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tblSupplierAddressesLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter PkSupplierAddressID
			{
				get
				{
					return new SqlParameter("@PkSupplierAddressID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter FkSupplierID
			{
				get
				{
					return new SqlParameter("@FkSupplierID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter SAddressStreet
			{
				get
				{
					return new SqlParameter("@SAddressStreet", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter SAddressTown
			{
				get
				{
					return new SqlParameter("@SAddressTown", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter SAddressPostCode
			{
				get
				{
					return new SqlParameter("@SAddressPostCode", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter SAddressRegion
			{
				get
				{
					return new SqlParameter("@SAddressRegion", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter FkAddressCountry
			{
				get
				{
					return new SqlParameter("@FkAddressCountry", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter BIsPrimary
			{
				get
				{
					return new SqlParameter("@BIsPrimary", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter DModifiedDate
			{
				get
				{
					return new SqlParameter("@DModifiedDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter DCreatedDatae
			{
				get
				{
					return new SqlParameter("@DCreatedDatae", SqlDbType.DateTime, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string PkSupplierAddressID = "pkSupplierAddressID";
            public const string FkSupplierID = "fkSupplierID";
            public const string SAddressStreet = "sAddressStreet";
            public const string SAddressTown = "sAddressTown";
            public const string SAddressPostCode = "sAddressPostCode";
            public const string SAddressRegion = "sAddressRegion";
            public const string FkAddressCountry = "fkAddressCountry";
            public const string BIsPrimary = "bIsPrimary";
            public const string DModifiedDate = "dModifiedDate";
            public const string DCreatedDatae = "dCreatedDatae";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[PkSupplierAddressID] = _tblSupplierAddresses.PropertyNames.PkSupplierAddressID;
					ht[FkSupplierID] = _tblSupplierAddresses.PropertyNames.FkSupplierID;
					ht[SAddressStreet] = _tblSupplierAddresses.PropertyNames.SAddressStreet;
					ht[SAddressTown] = _tblSupplierAddresses.PropertyNames.SAddressTown;
					ht[SAddressPostCode] = _tblSupplierAddresses.PropertyNames.SAddressPostCode;
					ht[SAddressRegion] = _tblSupplierAddresses.PropertyNames.SAddressRegion;
					ht[FkAddressCountry] = _tblSupplierAddresses.PropertyNames.FkAddressCountry;
					ht[BIsPrimary] = _tblSupplierAddresses.PropertyNames.BIsPrimary;
					ht[DModifiedDate] = _tblSupplierAddresses.PropertyNames.DModifiedDate;
					ht[DCreatedDatae] = _tblSupplierAddresses.PropertyNames.DCreatedDatae;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string PkSupplierAddressID = "PkSupplierAddressID";
            public const string FkSupplierID = "FkSupplierID";
            public const string SAddressStreet = "SAddressStreet";
            public const string SAddressTown = "SAddressTown";
            public const string SAddressPostCode = "SAddressPostCode";
            public const string SAddressRegion = "SAddressRegion";
            public const string FkAddressCountry = "FkAddressCountry";
            public const string BIsPrimary = "BIsPrimary";
            public const string DModifiedDate = "DModifiedDate";
            public const string DCreatedDatae = "DCreatedDatae";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[PkSupplierAddressID] = _tblSupplierAddresses.ColumnNames.PkSupplierAddressID;
					ht[FkSupplierID] = _tblSupplierAddresses.ColumnNames.FkSupplierID;
					ht[SAddressStreet] = _tblSupplierAddresses.ColumnNames.SAddressStreet;
					ht[SAddressTown] = _tblSupplierAddresses.ColumnNames.SAddressTown;
					ht[SAddressPostCode] = _tblSupplierAddresses.ColumnNames.SAddressPostCode;
					ht[SAddressRegion] = _tblSupplierAddresses.ColumnNames.SAddressRegion;
					ht[FkAddressCountry] = _tblSupplierAddresses.ColumnNames.FkAddressCountry;
					ht[BIsPrimary] = _tblSupplierAddresses.ColumnNames.BIsPrimary;
					ht[DModifiedDate] = _tblSupplierAddresses.ColumnNames.DModifiedDate;
					ht[DCreatedDatae] = _tblSupplierAddresses.ColumnNames.DCreatedDatae;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string PkSupplierAddressID = "s_PkSupplierAddressID";
            public const string FkSupplierID = "s_FkSupplierID";
            public const string SAddressStreet = "s_SAddressStreet";
            public const string SAddressTown = "s_SAddressTown";
            public const string SAddressPostCode = "s_SAddressPostCode";
            public const string SAddressRegion = "s_SAddressRegion";
            public const string FkAddressCountry = "s_FkAddressCountry";
            public const string BIsPrimary = "s_BIsPrimary";
            public const string DModifiedDate = "s_DModifiedDate";
            public const string DCreatedDatae = "s_DCreatedDatae";

		}
		#endregion		
		
		#region Properties
	
		public virtual int PkSupplierAddressID
	    {
			get
	        {
				return base.Getint(ColumnNames.PkSupplierAddressID);
			}
			set
	        {
				base.Setint(ColumnNames.PkSupplierAddressID, value);
			}
		}

		public virtual int FkSupplierID
	    {
			get
	        {
				return base.Getint(ColumnNames.FkSupplierID);
			}
			set
	        {
				base.Setint(ColumnNames.FkSupplierID, value);
			}
		}

		public virtual string SAddressStreet
	    {
			get
	        {
				return base.Getstring(ColumnNames.SAddressStreet);
			}
			set
	        {
				base.Setstring(ColumnNames.SAddressStreet, value);
			}
		}

		public virtual string SAddressTown
	    {
			get
	        {
				return base.Getstring(ColumnNames.SAddressTown);
			}
			set
	        {
				base.Setstring(ColumnNames.SAddressTown, value);
			}
		}

		public virtual string SAddressPostCode
	    {
			get
	        {
				return base.Getstring(ColumnNames.SAddressPostCode);
			}
			set
	        {
				base.Setstring(ColumnNames.SAddressPostCode, value);
			}
		}

		public virtual string SAddressRegion
	    {
			get
	        {
				return base.Getstring(ColumnNames.SAddressRegion);
			}
			set
	        {
				base.Setstring(ColumnNames.SAddressRegion, value);
			}
		}

		public virtual int FkAddressCountry
	    {
			get
	        {
				return base.Getint(ColumnNames.FkAddressCountry);
			}
			set
	        {
				base.Setint(ColumnNames.FkAddressCountry, value);
			}
		}

		public virtual bool BIsPrimary
	    {
			get
	        {
				return base.Getbool(ColumnNames.BIsPrimary);
			}
			set
	        {
				base.Setbool(ColumnNames.BIsPrimary, value);
			}
		}

		public virtual DateTime DModifiedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.DModifiedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.DModifiedDate, value);
			}
		}

		public virtual DateTime DCreatedDatae
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.DCreatedDatae);
			}
			set
	        {
				base.SetDateTime(ColumnNames.DCreatedDatae, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_PkSupplierAddressID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PkSupplierAddressID) ? string.Empty : base.GetintAsString(ColumnNames.PkSupplierAddressID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PkSupplierAddressID);
				else
					this.PkSupplierAddressID = base.SetintAsString(ColumnNames.PkSupplierAddressID, value);
			}
		}

		public virtual string s_FkSupplierID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FkSupplierID) ? string.Empty : base.GetintAsString(ColumnNames.FkSupplierID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FkSupplierID);
				else
					this.FkSupplierID = base.SetintAsString(ColumnNames.FkSupplierID, value);
			}
		}

		public virtual string s_SAddressStreet
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SAddressStreet) ? string.Empty : base.GetstringAsString(ColumnNames.SAddressStreet);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SAddressStreet);
				else
					this.SAddressStreet = base.SetstringAsString(ColumnNames.SAddressStreet, value);
			}
		}

		public virtual string s_SAddressTown
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SAddressTown) ? string.Empty : base.GetstringAsString(ColumnNames.SAddressTown);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SAddressTown);
				else
					this.SAddressTown = base.SetstringAsString(ColumnNames.SAddressTown, value);
			}
		}

		public virtual string s_SAddressPostCode
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SAddressPostCode) ? string.Empty : base.GetstringAsString(ColumnNames.SAddressPostCode);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SAddressPostCode);
				else
					this.SAddressPostCode = base.SetstringAsString(ColumnNames.SAddressPostCode, value);
			}
		}

		public virtual string s_SAddressRegion
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SAddressRegion) ? string.Empty : base.GetstringAsString(ColumnNames.SAddressRegion);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SAddressRegion);
				else
					this.SAddressRegion = base.SetstringAsString(ColumnNames.SAddressRegion, value);
			}
		}

		public virtual string s_FkAddressCountry
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FkAddressCountry) ? string.Empty : base.GetintAsString(ColumnNames.FkAddressCountry);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FkAddressCountry);
				else
					this.FkAddressCountry = base.SetintAsString(ColumnNames.FkAddressCountry, value);
			}
		}

		public virtual string s_BIsPrimary
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BIsPrimary) ? string.Empty : base.GetboolAsString(ColumnNames.BIsPrimary);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BIsPrimary);
				else
					this.BIsPrimary = base.SetboolAsString(ColumnNames.BIsPrimary, value);
			}
		}

		public virtual string s_DModifiedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DModifiedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DModifiedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DModifiedDate);
				else
					this.DModifiedDate = base.SetDateTimeAsString(ColumnNames.DModifiedDate, value);
			}
		}

		public virtual string s_DCreatedDatae
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DCreatedDatae) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DCreatedDatae);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DCreatedDatae);
				else
					this.DCreatedDatae = base.SetDateTimeAsString(ColumnNames.DCreatedDatae, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter PkSupplierAddressID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PkSupplierAddressID, Parameters.PkSupplierAddressID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FkSupplierID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FkSupplierID, Parameters.FkSupplierID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SAddressStreet
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SAddressStreet, Parameters.SAddressStreet);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SAddressTown
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SAddressTown, Parameters.SAddressTown);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SAddressPostCode
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SAddressPostCode, Parameters.SAddressPostCode);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SAddressRegion
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SAddressRegion, Parameters.SAddressRegion);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FkAddressCountry
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FkAddressCountry, Parameters.FkAddressCountry);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter BIsPrimary
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BIsPrimary, Parameters.BIsPrimary);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DModifiedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DModifiedDate, Parameters.DModifiedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DCreatedDatae
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DCreatedDatae, Parameters.DCreatedDatae);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter PkSupplierAddressID
		    {
				get
		        {
					if(_PkSupplierAddressID_W == null)
	        	    {
						_PkSupplierAddressID_W = TearOff.PkSupplierAddressID;
					}
					return _PkSupplierAddressID_W;
				}
			}

			public WhereParameter FkSupplierID
		    {
				get
		        {
					if(_FkSupplierID_W == null)
	        	    {
						_FkSupplierID_W = TearOff.FkSupplierID;
					}
					return _FkSupplierID_W;
				}
			}

			public WhereParameter SAddressStreet
		    {
				get
		        {
					if(_SAddressStreet_W == null)
	        	    {
						_SAddressStreet_W = TearOff.SAddressStreet;
					}
					return _SAddressStreet_W;
				}
			}

			public WhereParameter SAddressTown
		    {
				get
		        {
					if(_SAddressTown_W == null)
	        	    {
						_SAddressTown_W = TearOff.SAddressTown;
					}
					return _SAddressTown_W;
				}
			}

			public WhereParameter SAddressPostCode
		    {
				get
		        {
					if(_SAddressPostCode_W == null)
	        	    {
						_SAddressPostCode_W = TearOff.SAddressPostCode;
					}
					return _SAddressPostCode_W;
				}
			}

			public WhereParameter SAddressRegion
		    {
				get
		        {
					if(_SAddressRegion_W == null)
	        	    {
						_SAddressRegion_W = TearOff.SAddressRegion;
					}
					return _SAddressRegion_W;
				}
			}

			public WhereParameter FkAddressCountry
		    {
				get
		        {
					if(_FkAddressCountry_W == null)
	        	    {
						_FkAddressCountry_W = TearOff.FkAddressCountry;
					}
					return _FkAddressCountry_W;
				}
			}

			public WhereParameter BIsPrimary
		    {
				get
		        {
					if(_BIsPrimary_W == null)
	        	    {
						_BIsPrimary_W = TearOff.BIsPrimary;
					}
					return _BIsPrimary_W;
				}
			}

			public WhereParameter DModifiedDate
		    {
				get
		        {
					if(_DModifiedDate_W == null)
	        	    {
						_DModifiedDate_W = TearOff.DModifiedDate;
					}
					return _DModifiedDate_W;
				}
			}

			public WhereParameter DCreatedDatae
		    {
				get
		        {
					if(_DCreatedDatae_W == null)
	        	    {
						_DCreatedDatae_W = TearOff.DCreatedDatae;
					}
					return _DCreatedDatae_W;
				}
			}

			private WhereParameter _PkSupplierAddressID_W = null;
			private WhereParameter _FkSupplierID_W = null;
			private WhereParameter _SAddressStreet_W = null;
			private WhereParameter _SAddressTown_W = null;
			private WhereParameter _SAddressPostCode_W = null;
			private WhereParameter _SAddressRegion_W = null;
			private WhereParameter _FkAddressCountry_W = null;
			private WhereParameter _BIsPrimary_W = null;
			private WhereParameter _DModifiedDate_W = null;
			private WhereParameter _DCreatedDatae_W = null;

			public void WhereClauseReset()
			{
				_PkSupplierAddressID_W = null;
				_FkSupplierID_W = null;
				_SAddressStreet_W = null;
				_SAddressTown_W = null;
				_SAddressPostCode_W = null;
				_SAddressRegion_W = null;
				_FkAddressCountry_W = null;
				_BIsPrimary_W = null;
				_DModifiedDate_W = null;
				_DCreatedDatae_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter PkSupplierAddressID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PkSupplierAddressID, Parameters.PkSupplierAddressID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FkSupplierID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FkSupplierID, Parameters.FkSupplierID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SAddressStreet
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SAddressStreet, Parameters.SAddressStreet);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SAddressTown
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SAddressTown, Parameters.SAddressTown);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SAddressPostCode
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SAddressPostCode, Parameters.SAddressPostCode);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SAddressRegion
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SAddressRegion, Parameters.SAddressRegion);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FkAddressCountry
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FkAddressCountry, Parameters.FkAddressCountry);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter BIsPrimary
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BIsPrimary, Parameters.BIsPrimary);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DModifiedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DModifiedDate, Parameters.DModifiedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DCreatedDatae
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DCreatedDatae, Parameters.DCreatedDatae);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter PkSupplierAddressID
		    {
				get
		        {
					if(_PkSupplierAddressID_W == null)
	        	    {
						_PkSupplierAddressID_W = TearOff.PkSupplierAddressID;
					}
					return _PkSupplierAddressID_W;
				}
			}

			public AggregateParameter FkSupplierID
		    {
				get
		        {
					if(_FkSupplierID_W == null)
	        	    {
						_FkSupplierID_W = TearOff.FkSupplierID;
					}
					return _FkSupplierID_W;
				}
			}

			public AggregateParameter SAddressStreet
		    {
				get
		        {
					if(_SAddressStreet_W == null)
	        	    {
						_SAddressStreet_W = TearOff.SAddressStreet;
					}
					return _SAddressStreet_W;
				}
			}

			public AggregateParameter SAddressTown
		    {
				get
		        {
					if(_SAddressTown_W == null)
	        	    {
						_SAddressTown_W = TearOff.SAddressTown;
					}
					return _SAddressTown_W;
				}
			}

			public AggregateParameter SAddressPostCode
		    {
				get
		        {
					if(_SAddressPostCode_W == null)
	        	    {
						_SAddressPostCode_W = TearOff.SAddressPostCode;
					}
					return _SAddressPostCode_W;
				}
			}

			public AggregateParameter SAddressRegion
		    {
				get
		        {
					if(_SAddressRegion_W == null)
	        	    {
						_SAddressRegion_W = TearOff.SAddressRegion;
					}
					return _SAddressRegion_W;
				}
			}

			public AggregateParameter FkAddressCountry
		    {
				get
		        {
					if(_FkAddressCountry_W == null)
	        	    {
						_FkAddressCountry_W = TearOff.FkAddressCountry;
					}
					return _FkAddressCountry_W;
				}
			}

			public AggregateParameter BIsPrimary
		    {
				get
		        {
					if(_BIsPrimary_W == null)
	        	    {
						_BIsPrimary_W = TearOff.BIsPrimary;
					}
					return _BIsPrimary_W;
				}
			}

			public AggregateParameter DModifiedDate
		    {
				get
		        {
					if(_DModifiedDate_W == null)
	        	    {
						_DModifiedDate_W = TearOff.DModifiedDate;
					}
					return _DModifiedDate_W;
				}
			}

			public AggregateParameter DCreatedDatae
		    {
				get
		        {
					if(_DCreatedDatae_W == null)
	        	    {
						_DCreatedDatae_W = TearOff.DCreatedDatae;
					}
					return _DCreatedDatae_W;
				}
			}

			private AggregateParameter _PkSupplierAddressID_W = null;
			private AggregateParameter _FkSupplierID_W = null;
			private AggregateParameter _SAddressStreet_W = null;
			private AggregateParameter _SAddressTown_W = null;
			private AggregateParameter _SAddressPostCode_W = null;
			private AggregateParameter _SAddressRegion_W = null;
			private AggregateParameter _FkAddressCountry_W = null;
			private AggregateParameter _BIsPrimary_W = null;
			private AggregateParameter _DModifiedDate_W = null;
			private AggregateParameter _DCreatedDatae_W = null;

			public void AggregateClauseReset()
			{
				_PkSupplierAddressID_W = null;
				_FkSupplierID_W = null;
				_SAddressStreet_W = null;
				_SAddressTown_W = null;
				_SAddressPostCode_W = null;
				_SAddressRegion_W = null;
				_FkAddressCountry_W = null;
				_BIsPrimary_W = null;
				_DModifiedDate_W = null;
				_DCreatedDatae_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblSupplierAddressesInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.PkSupplierAddressID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblSupplierAddressesUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblSupplierAddressesDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.PkSupplierAddressID);
			p.SourceColumn = ColumnNames.PkSupplierAddressID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.PkSupplierAddressID);
			p.SourceColumn = ColumnNames.PkSupplierAddressID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FkSupplierID);
			p.SourceColumn = ColumnNames.FkSupplierID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SAddressStreet);
			p.SourceColumn = ColumnNames.SAddressStreet;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SAddressTown);
			p.SourceColumn = ColumnNames.SAddressTown;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SAddressPostCode);
			p.SourceColumn = ColumnNames.SAddressPostCode;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SAddressRegion);
			p.SourceColumn = ColumnNames.SAddressRegion;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FkAddressCountry);
			p.SourceColumn = ColumnNames.FkAddressCountry;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.BIsPrimary);
			p.SourceColumn = ColumnNames.BIsPrimary;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DModifiedDate);
			p.SourceColumn = ColumnNames.DModifiedDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DCreatedDatae);
			p.SourceColumn = ColumnNames.DCreatedDatae;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
