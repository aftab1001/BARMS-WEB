
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.1.7.1)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace LC.Model.BMS.DAL
{
    public abstract class _tblDays : SqlClientEntity
    {
        public _tblDays()
        {
            this.QuerySource = "tblDays";
            this.MappingName = "tblDays";

        }

        //=================================================================
        //  public Overrides void AddNew()
        //=================================================================
        //
        //=================================================================
        public override void AddNew()
        {
            base.AddNew();

        }


        public override void FlushData()
        {
            this._whereClause = null;
            this._aggregateClause = null;
            base.FlushData();
        }

        //=================================================================
        //  	public Function LoadAll() As Boolean
        //=================================================================
        //  Loads all of the records in the database, and sets the currentRow to the first row
        //=================================================================
        public bool LoadAll()
        {
            ListDictionary parameters = null;

            return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tblDaysLoadAll]", parameters);
        }

        //=================================================================
        // public Overridable Function LoadByPrimaryKey()  As Boolean
        //=================================================================
        //  Loads a single row of via the primary key
        //=================================================================
        public virtual bool LoadByPrimaryKey(int DepartmentDaysId)
        {
            ListDictionary parameters = new ListDictionary();
            parameters.Add(Parameters.DepartmentDaysId, DepartmentDaysId);


            return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tblDaysLoadByPrimaryKey]", parameters);
        }

        #region Parameters
        protected class Parameters
        {

            public static SqlParameter DepartmentDaysId
            {
                get
                {
                    return new SqlParameter("@DepartmentDaysId", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter DaysName
            {
                get
                {
                    return new SqlParameter("@DaysName", SqlDbType.VarChar, 50);
                }
            }

            public static SqlParameter DateDay
            {
                get
                {
                    return new SqlParameter("@DateDay", SqlDbType.DateTime, 0);
                }
            }

            public static SqlParameter YearDay
            {
                get
                {
                    return new SqlParameter("@YearDay", SqlDbType.VarChar, 50);
                }
            }

            public static SqlParameter WeekNumber
            {
                get
                {
                    return new SqlParameter("@WeekNumber", SqlDbType.VarChar, 50);
                }
            }

            public static SqlParameter FkManagerUserID
            {
                get
                {
                    return new SqlParameter("@FkManagerUserID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter PkDepartmentID
            {
                get
                {
                    return new SqlParameter("@PkDepartmentID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter DayStartTime
            {
                get
                {
                    return new SqlParameter("@DayStartTime", SqlDbType.VarChar, 50);
                }
            }

            public static SqlParameter DayEndTime
            {
                get
                {
                    return new SqlParameter("@DayEndTime", SqlDbType.VarChar, 50);
                }
            }

            public static SqlParameter CreatedDate
            {
                get
                {
                    return new SqlParameter("@CreatedDate", SqlDbType.DateTime, 0);
                }
            }

            public static SqlParameter ModifyDate
            {
                get
                {
                    return new SqlParameter("@ModifyDate", SqlDbType.DateTime, 0);
                }
            }

        }
        #endregion

        #region ColumnNames
        public class ColumnNames
        {
            public const string DepartmentDaysId = "DepartmentDaysId";
            public const string DaysName = "DaysName";
            public const string DateDay = "DateDay";
            public const string YearDay = "YearDay";
            public const string WeekNumber = "WeekNumber";
            public const string FkManagerUserID = "fkManagerUserID";
            public const string PkDepartmentID = "pkDepartmentID";
            public const string DayStartTime = "DayStartTime";
            public const string DayEndTime = "DayEndTime";
            public const string CreatedDate = "CreatedDate";
            public const string ModifyDate = "ModifyDate";

            static public string ToPropertyName(string columnName)
            {
                if (ht == null)
                {
                    ht = new Hashtable();

                    ht[DepartmentDaysId] = _tblDays.PropertyNames.DepartmentDaysId;
                    ht[DaysName] = _tblDays.PropertyNames.DaysName;
                    ht[DateDay] = _tblDays.PropertyNames.DateDay;
                    ht[YearDay] = _tblDays.PropertyNames.YearDay;
                    ht[WeekNumber] = _tblDays.PropertyNames.WeekNumber;
                    ht[FkManagerUserID] = _tblDays.PropertyNames.FkManagerUserID;
                    ht[PkDepartmentID] = _tblDays.PropertyNames.PkDepartmentID;
                    ht[DayStartTime] = _tblDays.PropertyNames.DayStartTime;
                    ht[DayEndTime] = _tblDays.PropertyNames.DayEndTime;
                    ht[CreatedDate] = _tblDays.PropertyNames.CreatedDate;
                    ht[ModifyDate] = _tblDays.PropertyNames.ModifyDate;

                }
                return (string)ht[columnName];
            }

            static private Hashtable ht = null;
        }
        #endregion

        #region PropertyNames
        public class PropertyNames
        {
            public const string DepartmentDaysId = "DepartmentDaysId";
            public const string DaysName = "DaysName";
            public const string DateDay = "DateDay";
            public const string YearDay = "YearDay";
            public const string WeekNumber = "WeekNumber";
            public const string FkManagerUserID = "FkManagerUserID";
            public const string PkDepartmentID = "PkDepartmentID";
            public const string DayStartTime = "DayStartTime";
            public const string DayEndTime = "DayEndTime";
            public const string CreatedDate = "CreatedDate";
            public const string ModifyDate = "ModifyDate";

            static public string ToColumnName(string propertyName)
            {
                if (ht == null)
                {
                    ht = new Hashtable();

                    ht[DepartmentDaysId] = _tblDays.ColumnNames.DepartmentDaysId;
                    ht[DaysName] = _tblDays.ColumnNames.DaysName;
                    ht[DateDay] = _tblDays.ColumnNames.DateDay;
                    ht[YearDay] = _tblDays.ColumnNames.YearDay;
                    ht[WeekNumber] = _tblDays.ColumnNames.WeekNumber;
                    ht[FkManagerUserID] = _tblDays.ColumnNames.FkManagerUserID;
                    ht[PkDepartmentID] = _tblDays.ColumnNames.PkDepartmentID;
                    ht[DayStartTime] = _tblDays.ColumnNames.DayStartTime;
                    ht[DayEndTime] = _tblDays.ColumnNames.DayEndTime;
                    ht[CreatedDate] = _tblDays.ColumnNames.CreatedDate;
                    ht[ModifyDate] = _tblDays.ColumnNames.ModifyDate;

                }
                return (string)ht[propertyName];
            }

            static private Hashtable ht = null;
        }
        #endregion

        #region StringPropertyNames
        public class StringPropertyNames
        {
            public const string DepartmentDaysId = "s_DepartmentDaysId";
            public const string DaysName = "s_DaysName";
            public const string DateDay = "s_DateDay";
            public const string YearDay = "s_YearDay";
            public const string WeekNumber = "s_WeekNumber";
            public const string FkManagerUserID = "s_FkManagerUserID";
            public const string PkDepartmentID = "s_PkDepartmentID";
            public const string DayStartTime = "s_DayStartTime";
            public const string DayEndTime = "s_DayEndTime";
            public const string CreatedDate = "s_CreatedDate";
            public const string ModifyDate = "s_ModifyDate";

        }
        #endregion

        #region Properties

        public virtual int DepartmentDaysId
        {
            get
            {
                return base.Getint(ColumnNames.DepartmentDaysId);
            }
            set
            {
                base.Setint(ColumnNames.DepartmentDaysId, value);
            }
        }

        public virtual string DaysName
        {
            get
            {
                return base.Getstring(ColumnNames.DaysName);
            }
            set
            {
                base.Setstring(ColumnNames.DaysName, value);
            }
        }

        public virtual DateTime DateDay
        {
            get
            {
                return base.GetDateTime(ColumnNames.DateDay);
            }
            set
            {
                base.SetDateTime(ColumnNames.DateDay, value);
            }
        }

        public virtual string YearDay
        {
            get
            {
                return base.Getstring(ColumnNames.YearDay);
            }
            set
            {
                base.Setstring(ColumnNames.YearDay, value);
            }
        }

        public virtual string WeekNumber
        {
            get
            {
                return base.Getstring(ColumnNames.WeekNumber);
            }
            set
            {
                base.Setstring(ColumnNames.WeekNumber, value);
            }
        }

        public virtual int FkManagerUserID
        {
            get
            {
                return base.Getint(ColumnNames.FkManagerUserID);
            }
            set
            {
                base.Setint(ColumnNames.FkManagerUserID, value);
            }
        }

        public virtual int PkDepartmentID
        {
            get
            {
                return base.Getint(ColumnNames.PkDepartmentID);
            }
            set
            {
                base.Setint(ColumnNames.PkDepartmentID, value);
            }
        }

        public virtual string DayStartTime
        {
            get
            {
                return base.Getstring(ColumnNames.DayStartTime);
            }
            set
            {
                base.Setstring(ColumnNames.DayStartTime, value);
            }
        }

        public virtual string DayEndTime
        {
            get
            {
                return base.Getstring(ColumnNames.DayEndTime);
            }
            set
            {
                base.Setstring(ColumnNames.DayEndTime, value);
            }
        }

        public virtual DateTime CreatedDate
        {
            get
            {
                return base.GetDateTime(ColumnNames.CreatedDate);
            }
            set
            {
                base.SetDateTime(ColumnNames.CreatedDate, value);
            }
        }

        public virtual DateTime ModifyDate
        {
            get
            {
                return base.GetDateTime(ColumnNames.ModifyDate);
            }
            set
            {
                base.SetDateTime(ColumnNames.ModifyDate, value);
            }
        }


        #endregion

        #region String Properties

        public virtual string s_DepartmentDaysId
        {
            get
            {
                return this.IsColumnNull(ColumnNames.DepartmentDaysId) ? string.Empty : base.GetintAsString(ColumnNames.DepartmentDaysId);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.DepartmentDaysId);
                else
                    this.DepartmentDaysId = base.SetintAsString(ColumnNames.DepartmentDaysId, value);
            }
        }

        public virtual string s_DaysName
        {
            get
            {
                return this.IsColumnNull(ColumnNames.DaysName) ? string.Empty : base.GetstringAsString(ColumnNames.DaysName);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.DaysName);
                else
                    this.DaysName = base.SetstringAsString(ColumnNames.DaysName, value);
            }
        }

        public virtual string s_DateDay
        {
            get
            {
                return this.IsColumnNull(ColumnNames.DateDay) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DateDay);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.DateDay);
                else
                    this.DateDay = base.SetDateTimeAsString(ColumnNames.DateDay, value);
            }
        }

        public virtual string s_YearDay
        {
            get
            {
                return this.IsColumnNull(ColumnNames.YearDay) ? string.Empty : base.GetstringAsString(ColumnNames.YearDay);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.YearDay);
                else
                    this.YearDay = base.SetstringAsString(ColumnNames.YearDay, value);
            }
        }

        public virtual string s_WeekNumber
        {
            get
            {
                return this.IsColumnNull(ColumnNames.WeekNumber) ? string.Empty : base.GetstringAsString(ColumnNames.WeekNumber);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.WeekNumber);
                else
                    this.WeekNumber = base.SetstringAsString(ColumnNames.WeekNumber, value);
            }
        }

        public virtual string s_FkManagerUserID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.FkManagerUserID) ? string.Empty : base.GetintAsString(ColumnNames.FkManagerUserID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.FkManagerUserID);
                else
                    this.FkManagerUserID = base.SetintAsString(ColumnNames.FkManagerUserID, value);
            }
        }

        public virtual string s_PkDepartmentID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.PkDepartmentID) ? string.Empty : base.GetintAsString(ColumnNames.PkDepartmentID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.PkDepartmentID);
                else
                    this.PkDepartmentID = base.SetintAsString(ColumnNames.PkDepartmentID, value);
            }
        }

        public virtual string s_DayStartTime
        {
            get
            {
                return this.IsColumnNull(ColumnNames.DayStartTime) ? string.Empty : base.GetstringAsString(ColumnNames.DayStartTime);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.DayStartTime);
                else
                    this.DayStartTime = base.SetstringAsString(ColumnNames.DayStartTime, value);
            }
        }

        public virtual string s_DayEndTime
        {
            get
            {
                return this.IsColumnNull(ColumnNames.DayEndTime) ? string.Empty : base.GetstringAsString(ColumnNames.DayEndTime);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.DayEndTime);
                else
                    this.DayEndTime = base.SetstringAsString(ColumnNames.DayEndTime, value);
            }
        }

        public virtual string s_CreatedDate
        {
            get
            {
                return this.IsColumnNull(ColumnNames.CreatedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.CreatedDate);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.CreatedDate);
                else
                    this.CreatedDate = base.SetDateTimeAsString(ColumnNames.CreatedDate, value);
            }
        }

        public virtual string s_ModifyDate
        {
            get
            {
                return this.IsColumnNull(ColumnNames.ModifyDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.ModifyDate);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.ModifyDate);
                else
                    this.ModifyDate = base.SetDateTimeAsString(ColumnNames.ModifyDate, value);
            }
        }


        #endregion

        #region Where Clause
        public class WhereClause
        {
            public WhereClause(BusinessEntity entity)
            {
                this._entity = entity;
            }

            public TearOffWhereParameter TearOff
            {
                get
                {
                    if (_tearOff == null)
                    {
                        _tearOff = new TearOffWhereParameter(this);
                    }

                    return _tearOff;
                }
            }

            #region WhereParameter TearOff's
            public class TearOffWhereParameter
            {
                public TearOffWhereParameter(WhereClause clause)
                {
                    this._clause = clause;
                }


                public WhereParameter DepartmentDaysId
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.DepartmentDaysId, Parameters.DepartmentDaysId);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter DaysName
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.DaysName, Parameters.DaysName);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter DateDay
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.DateDay, Parameters.DateDay);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter YearDay
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.YearDay, Parameters.YearDay);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter WeekNumber
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.WeekNumber, Parameters.WeekNumber);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter FkManagerUserID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.FkManagerUserID, Parameters.FkManagerUserID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter PkDepartmentID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.PkDepartmentID, Parameters.PkDepartmentID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter DayStartTime
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.DayStartTime, Parameters.DayStartTime);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter DayEndTime
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.DayEndTime, Parameters.DayEndTime);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter CreatedDate
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.CreatedDate, Parameters.CreatedDate);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter ModifyDate
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.ModifyDate, Parameters.ModifyDate);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }


                private WhereClause _clause;
            }
            #endregion

            public WhereParameter DepartmentDaysId
            {
                get
                {
                    if (_DepartmentDaysId_W == null)
                    {
                        _DepartmentDaysId_W = TearOff.DepartmentDaysId;
                    }
                    return _DepartmentDaysId_W;
                }
            }

            public WhereParameter DaysName
            {
                get
                {
                    if (_DaysName_W == null)
                    {
                        _DaysName_W = TearOff.DaysName;
                    }
                    return _DaysName_W;
                }
            }

            public WhereParameter DateDay
            {
                get
                {
                    if (_DateDay_W == null)
                    {
                        _DateDay_W = TearOff.DateDay;
                    }
                    return _DateDay_W;
                }
            }

            public WhereParameter YearDay
            {
                get
                {
                    if (_YearDay_W == null)
                    {
                        _YearDay_W = TearOff.YearDay;
                    }
                    return _YearDay_W;
                }
            }

            public WhereParameter WeekNumber
            {
                get
                {
                    if (_WeekNumber_W == null)
                    {
                        _WeekNumber_W = TearOff.WeekNumber;
                    }
                    return _WeekNumber_W;
                }
            }

            public WhereParameter FkManagerUserID
            {
                get
                {
                    if (_FkManagerUserID_W == null)
                    {
                        _FkManagerUserID_W = TearOff.FkManagerUserID;
                    }
                    return _FkManagerUserID_W;
                }
            }

            public WhereParameter PkDepartmentID
            {
                get
                {
                    if (_PkDepartmentID_W == null)
                    {
                        _PkDepartmentID_W = TearOff.PkDepartmentID;
                    }
                    return _PkDepartmentID_W;
                }
            }

            public WhereParameter DayStartTime
            {
                get
                {
                    if (_DayStartTime_W == null)
                    {
                        _DayStartTime_W = TearOff.DayStartTime;
                    }
                    return _DayStartTime_W;
                }
            }

            public WhereParameter DayEndTime
            {
                get
                {
                    if (_DayEndTime_W == null)
                    {
                        _DayEndTime_W = TearOff.DayEndTime;
                    }
                    return _DayEndTime_W;
                }
            }

            public WhereParameter CreatedDate
            {
                get
                {
                    if (_CreatedDate_W == null)
                    {
                        _CreatedDate_W = TearOff.CreatedDate;
                    }
                    return _CreatedDate_W;
                }
            }

            public WhereParameter ModifyDate
            {
                get
                {
                    if (_ModifyDate_W == null)
                    {
                        _ModifyDate_W = TearOff.ModifyDate;
                    }
                    return _ModifyDate_W;
                }
            }

            private WhereParameter _DepartmentDaysId_W = null;
            private WhereParameter _DaysName_W = null;
            private WhereParameter _DateDay_W = null;
            private WhereParameter _YearDay_W = null;
            private WhereParameter _WeekNumber_W = null;
            private WhereParameter _FkManagerUserID_W = null;
            private WhereParameter _PkDepartmentID_W = null;
            private WhereParameter _DayStartTime_W = null;
            private WhereParameter _DayEndTime_W = null;
            private WhereParameter _CreatedDate_W = null;
            private WhereParameter _ModifyDate_W = null;

            public void WhereClauseReset()
            {
                _DepartmentDaysId_W = null;
                _DaysName_W = null;
                _DateDay_W = null;
                _YearDay_W = null;
                _WeekNumber_W = null;
                _FkManagerUserID_W = null;
                _PkDepartmentID_W = null;
                _DayStartTime_W = null;
                _DayEndTime_W = null;
                _CreatedDate_W = null;
                _ModifyDate_W = null;

                this._entity.Query.FlushWhereParameters();

            }

            private BusinessEntity _entity;
            private TearOffWhereParameter _tearOff;

        }

        public WhereClause Where
        {
            get
            {
                if (_whereClause == null)
                {
                    _whereClause = new WhereClause(this);
                }

                return _whereClause;
            }
        }

        private WhereClause _whereClause = null;
        #endregion

        #region Aggregate Clause
        public class AggregateClause
        {
            public AggregateClause(BusinessEntity entity)
            {
                this._entity = entity;
            }

            public TearOffAggregateParameter TearOff
            {
                get
                {
                    if (_tearOff == null)
                    {
                        _tearOff = new TearOffAggregateParameter(this);
                    }

                    return _tearOff;
                }
            }

            #region AggregateParameter TearOff's
            public class TearOffAggregateParameter
            {
                public TearOffAggregateParameter(AggregateClause clause)
                {
                    this._clause = clause;
                }


                public AggregateParameter DepartmentDaysId
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.DepartmentDaysId, Parameters.DepartmentDaysId);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter DaysName
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.DaysName, Parameters.DaysName);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter DateDay
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.DateDay, Parameters.DateDay);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter YearDay
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.YearDay, Parameters.YearDay);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter WeekNumber
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.WeekNumber, Parameters.WeekNumber);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter FkManagerUserID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.FkManagerUserID, Parameters.FkManagerUserID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter PkDepartmentID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.PkDepartmentID, Parameters.PkDepartmentID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter DayStartTime
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.DayStartTime, Parameters.DayStartTime);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter DayEndTime
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.DayEndTime, Parameters.DayEndTime);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter CreatedDate
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.CreatedDate, Parameters.CreatedDate);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter ModifyDate
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.ModifyDate, Parameters.ModifyDate);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }


                private AggregateClause _clause;
            }
            #endregion

            public AggregateParameter DepartmentDaysId
            {
                get
                {
                    if (_DepartmentDaysId_W == null)
                    {
                        _DepartmentDaysId_W = TearOff.DepartmentDaysId;
                    }
                    return _DepartmentDaysId_W;
                }
            }

            public AggregateParameter DaysName
            {
                get
                {
                    if (_DaysName_W == null)
                    {
                        _DaysName_W = TearOff.DaysName;
                    }
                    return _DaysName_W;
                }
            }

            public AggregateParameter DateDay
            {
                get
                {
                    if (_DateDay_W == null)
                    {
                        _DateDay_W = TearOff.DateDay;
                    }
                    return _DateDay_W;
                }
            }

            public AggregateParameter YearDay
            {
                get
                {
                    if (_YearDay_W == null)
                    {
                        _YearDay_W = TearOff.YearDay;
                    }
                    return _YearDay_W;
                }
            }

            public AggregateParameter WeekNumber
            {
                get
                {
                    if (_WeekNumber_W == null)
                    {
                        _WeekNumber_W = TearOff.WeekNumber;
                    }
                    return _WeekNumber_W;
                }
            }

            public AggregateParameter FkManagerUserID
            {
                get
                {
                    if (_FkManagerUserID_W == null)
                    {
                        _FkManagerUserID_W = TearOff.FkManagerUserID;
                    }
                    return _FkManagerUserID_W;
                }
            }

            public AggregateParameter PkDepartmentID
            {
                get
                {
                    if (_PkDepartmentID_W == null)
                    {
                        _PkDepartmentID_W = TearOff.PkDepartmentID;
                    }
                    return _PkDepartmentID_W;
                }
            }

            public AggregateParameter DayStartTime
            {
                get
                {
                    if (_DayStartTime_W == null)
                    {
                        _DayStartTime_W = TearOff.DayStartTime;
                    }
                    return _DayStartTime_W;
                }
            }

            public AggregateParameter DayEndTime
            {
                get
                {
                    if (_DayEndTime_W == null)
                    {
                        _DayEndTime_W = TearOff.DayEndTime;
                    }
                    return _DayEndTime_W;
                }
            }

            public AggregateParameter CreatedDate
            {
                get
                {
                    if (_CreatedDate_W == null)
                    {
                        _CreatedDate_W = TearOff.CreatedDate;
                    }
                    return _CreatedDate_W;
                }
            }

            public AggregateParameter ModifyDate
            {
                get
                {
                    if (_ModifyDate_W == null)
                    {
                        _ModifyDate_W = TearOff.ModifyDate;
                    }
                    return _ModifyDate_W;
                }
            }

            private AggregateParameter _DepartmentDaysId_W = null;
            private AggregateParameter _DaysName_W = null;
            private AggregateParameter _DateDay_W = null;
            private AggregateParameter _YearDay_W = null;
            private AggregateParameter _WeekNumber_W = null;
            private AggregateParameter _FkManagerUserID_W = null;
            private AggregateParameter _PkDepartmentID_W = null;
            private AggregateParameter _DayStartTime_W = null;
            private AggregateParameter _DayEndTime_W = null;
            private AggregateParameter _CreatedDate_W = null;
            private AggregateParameter _ModifyDate_W = null;

            public void AggregateClauseReset()
            {
                _DepartmentDaysId_W = null;
                _DaysName_W = null;
                _DateDay_W = null;
                _YearDay_W = null;
                _WeekNumber_W = null;
                _FkManagerUserID_W = null;
                _PkDepartmentID_W = null;
                _DayStartTime_W = null;
                _DayEndTime_W = null;
                _CreatedDate_W = null;
                _ModifyDate_W = null;

                this._entity.Query.FlushAggregateParameters();

            }

            private BusinessEntity _entity;
            private TearOffAggregateParameter _tearOff;

        }

        public AggregateClause Aggregate
        {
            get
            {
                if (_aggregateClause == null)
                {
                    _aggregateClause = new AggregateClause(this);
                }

                return _aggregateClause;
            }
        }

        private AggregateClause _aggregateClause = null;
        #endregion

        protected override IDbCommand GetInsertCommand()
        {

            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblDaysInsert]";

            CreateParameters(cmd);

            SqlParameter p;
            p = cmd.Parameters[Parameters.DepartmentDaysId.ParameterName];
            p.Direction = ParameterDirection.Output;

            return cmd;
        }

        protected override IDbCommand GetUpdateCommand()
        {

            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblDaysUpdate]";

            CreateParameters(cmd);

            return cmd;
        }

        protected override IDbCommand GetDeleteCommand()
        {

            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblDaysDelete]";

            SqlParameter p;
            p = cmd.Parameters.Add(Parameters.DepartmentDaysId);
            p.SourceColumn = ColumnNames.DepartmentDaysId;
            p.SourceVersion = DataRowVersion.Current;


            return cmd;
        }

        private IDbCommand CreateParameters(SqlCommand cmd)
        {
            SqlParameter p;

            p = cmd.Parameters.Add(Parameters.DepartmentDaysId);
            p.SourceColumn = ColumnNames.DepartmentDaysId;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.DaysName);
            p.SourceColumn = ColumnNames.DaysName;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.DateDay);
            p.SourceColumn = ColumnNames.DateDay;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.YearDay);
            p.SourceColumn = ColumnNames.YearDay;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.WeekNumber);
            p.SourceColumn = ColumnNames.WeekNumber;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.FkManagerUserID);
            p.SourceColumn = ColumnNames.FkManagerUserID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.PkDepartmentID);
            p.SourceColumn = ColumnNames.PkDepartmentID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.DayStartTime);
            p.SourceColumn = ColumnNames.DayStartTime;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.DayEndTime);
            p.SourceColumn = ColumnNames.DayEndTime;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.CreatedDate);
            p.SourceColumn = ColumnNames.CreatedDate;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.ModifyDate);
            p.SourceColumn = ColumnNames.ModifyDate;
            p.SourceVersion = DataRowVersion.Current;


            return cmd;
        }
    }
}
