
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.1.7.1)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace LC.Model.BMS.DAL
{
    public abstract class _tblDayComments : SqlClientEntity
    {
        public _tblDayComments()
        {
            this.QuerySource = "tblDayComments";
            this.MappingName = "tblDayComments";

        }

        //=================================================================
        //  public Overrides void AddNew()
        //=================================================================
        //
        //=================================================================
        public override void AddNew()
        {
            base.AddNew();

        }


        public override void FlushData()
        {
            this._whereClause = null;
            this._aggregateClause = null;
            base.FlushData();
        }

        //=================================================================
        //  	public Function LoadAll() As Boolean
        //=================================================================
        //  Loads all of the records in the database, and sets the currentRow to the first row
        //=================================================================
        public bool LoadAll()
        {
            ListDictionary parameters = null;

            return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tblDayCommentsLoadAll]", parameters);
        }

        //=================================================================
        // public Overridable Function LoadByPrimaryKey()  As Boolean
        //=================================================================
        //  Loads a single row of via the primary key
        //=================================================================
        public virtual bool LoadByPrimaryKey(int PkDayCommentID)
        {
            ListDictionary parameters = new ListDictionary();
            parameters.Add(Parameters.PkDayCommentID, PkDayCommentID);


            return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tblDayCommentsLoadByPrimaryKey]", parameters);
        }

        #region Parameters
        protected class Parameters
        {

            public static SqlParameter PkDayCommentID
            {
                get
                {
                    return new SqlParameter("@PkDayCommentID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter FkAccountManagerID
            {
                get
                {
                    return new SqlParameter("@FkAccountManagerID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter FkManagerID
            {
                get
                {
                    return new SqlParameter("@FkManagerID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter CComment
            {
                get
                {
                    return new SqlParameter("@CComment", SqlDbType.NText, 1073741823);
                }
            }

            public static SqlParameter CCommentManger
            {
                get
                {
                    return new SqlParameter("@CCommentManger", SqlDbType.NText, 1073741823);
                }
            }

            public static SqlParameter CommentDate
            {
                get
                {
                    return new SqlParameter("@CommentDate", SqlDbType.DateTime, 0);
                }
            }

        }
        #endregion

        #region ColumnNames
        public class ColumnNames
        {
            public const string PkDayCommentID = "pkDayCommentID";
            public const string FkAccountManagerID = "fkAccountManagerID";
            public const string FkManagerID = "fkManagerID";
            public const string CComment = "cComment";
            public const string CCommentManger = "cCommentManger";
            public const string CommentDate = "CommentDate";

            static public string ToPropertyName(string columnName)
            {
                if (ht == null)
                {
                    ht = new Hashtable();

                    ht[PkDayCommentID] = _tblDayComments.PropertyNames.PkDayCommentID;
                    ht[FkAccountManagerID] = _tblDayComments.PropertyNames.FkAccountManagerID;
                    ht[FkManagerID] = _tblDayComments.PropertyNames.FkManagerID;
                    ht[CComment] = _tblDayComments.PropertyNames.CComment;
                    ht[CCommentManger] = _tblDayComments.PropertyNames.CCommentManger;
                    ht[CommentDate] = _tblDayComments.PropertyNames.CommentDate;

                }
                return (string)ht[columnName];
            }

            static private Hashtable ht = null;
        }
        #endregion

        #region PropertyNames
        public class PropertyNames
        {
            public const string PkDayCommentID = "PkDayCommentID";
            public const string FkAccountManagerID = "FkAccountManagerID";
            public const string FkManagerID = "FkManagerID";
            public const string CComment = "CComment";
            public const string CCommentManger = "CCommentManger";
            public const string CommentDate = "CommentDate";

            static public string ToColumnName(string propertyName)
            {
                if (ht == null)
                {
                    ht = new Hashtable();

                    ht[PkDayCommentID] = _tblDayComments.ColumnNames.PkDayCommentID;
                    ht[FkAccountManagerID] = _tblDayComments.ColumnNames.FkAccountManagerID;
                    ht[FkManagerID] = _tblDayComments.ColumnNames.FkManagerID;
                    ht[CComment] = _tblDayComments.ColumnNames.CComment;
                    ht[CCommentManger] = _tblDayComments.ColumnNames.CCommentManger;
                    ht[CommentDate] = _tblDayComments.ColumnNames.CommentDate;

                }
                return (string)ht[propertyName];
            }

            static private Hashtable ht = null;
        }
        #endregion

        #region StringPropertyNames
        public class StringPropertyNames
        {
            public const string PkDayCommentID = "s_PkDayCommentID";
            public const string FkAccountManagerID = "s_FkAccountManagerID";
            public const string FkManagerID = "s_FkManagerID";
            public const string CComment = "s_CComment";
            public const string CCommentManger = "s_CCommentManger";
            public const string CommentDate = "s_CommentDate";

        }
        #endregion

        #region Properties

        public virtual int PkDayCommentID
        {
            get
            {
                return base.Getint(ColumnNames.PkDayCommentID);
            }
            set
            {
                base.Setint(ColumnNames.PkDayCommentID, value);
            }
        }

        public virtual int FkAccountManagerID
        {
            get
            {
                return base.Getint(ColumnNames.FkAccountManagerID);
            }
            set
            {
                base.Setint(ColumnNames.FkAccountManagerID, value);
            }
        }

        public virtual int FkManagerID
        {
            get
            {
                return base.Getint(ColumnNames.FkManagerID);
            }
            set
            {
                base.Setint(ColumnNames.FkManagerID, value);
            }
        }

        public virtual string CComment
        {
            get
            {
                return base.Getstring(ColumnNames.CComment);
            }
            set
            {
                base.Setstring(ColumnNames.CComment, value);
            }
        }

        public virtual string CCommentManger
        {
            get
            {
                return base.Getstring(ColumnNames.CCommentManger);
            }
            set
            {
                base.Setstring(ColumnNames.CCommentManger, value);
            }
        }

        public virtual DateTime CommentDate
        {
            get
            {
                return base.GetDateTime(ColumnNames.CommentDate);
            }
            set
            {
                base.SetDateTime(ColumnNames.CommentDate, value);
            }
        }


        #endregion

        #region String Properties

        public virtual string s_PkDayCommentID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.PkDayCommentID) ? string.Empty : base.GetintAsString(ColumnNames.PkDayCommentID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.PkDayCommentID);
                else
                    this.PkDayCommentID = base.SetintAsString(ColumnNames.PkDayCommentID, value);
            }
        }

        public virtual string s_FkAccountManagerID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.FkAccountManagerID) ? string.Empty : base.GetintAsString(ColumnNames.FkAccountManagerID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.FkAccountManagerID);
                else
                    this.FkAccountManagerID = base.SetintAsString(ColumnNames.FkAccountManagerID, value);
            }
        }

        public virtual string s_FkManagerID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.FkManagerID) ? string.Empty : base.GetintAsString(ColumnNames.FkManagerID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.FkManagerID);
                else
                    this.FkManagerID = base.SetintAsString(ColumnNames.FkManagerID, value);
            }
        }

        public virtual string s_CComment
        {
            get
            {
                return this.IsColumnNull(ColumnNames.CComment) ? string.Empty : base.GetstringAsString(ColumnNames.CComment);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.CComment);
                else
                    this.CComment = base.SetstringAsString(ColumnNames.CComment, value);
            }
        }

        public virtual string s_CCommentManger
        {
            get
            {
                return this.IsColumnNull(ColumnNames.CCommentManger) ? string.Empty : base.GetstringAsString(ColumnNames.CCommentManger);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.CCommentManger);
                else
                    this.CCommentManger = base.SetstringAsString(ColumnNames.CCommentManger, value);
            }
        }

        public virtual string s_CommentDate
        {
            get
            {
                return this.IsColumnNull(ColumnNames.CommentDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.CommentDate);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.CommentDate);
                else
                    this.CommentDate = base.SetDateTimeAsString(ColumnNames.CommentDate, value);
            }
        }


        #endregion

        #region Where Clause
        public class WhereClause
        {
            public WhereClause(BusinessEntity entity)
            {
                this._entity = entity;
            }

            public TearOffWhereParameter TearOff
            {
                get
                {
                    if (_tearOff == null)
                    {
                        _tearOff = new TearOffWhereParameter(this);
                    }

                    return _tearOff;
                }
            }

            #region WhereParameter TearOff's
            public class TearOffWhereParameter
            {
                public TearOffWhereParameter(WhereClause clause)
                {
                    this._clause = clause;
                }


                public WhereParameter PkDayCommentID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.PkDayCommentID, Parameters.PkDayCommentID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter FkAccountManagerID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.FkAccountManagerID, Parameters.FkAccountManagerID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter FkManagerID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.FkManagerID, Parameters.FkManagerID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter CComment
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.CComment, Parameters.CComment);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter CCommentManger
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.CCommentManger, Parameters.CCommentManger);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter CommentDate
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.CommentDate, Parameters.CommentDate);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }


                private WhereClause _clause;
            }
            #endregion

            public WhereParameter PkDayCommentID
            {
                get
                {
                    if (_PkDayCommentID_W == null)
                    {
                        _PkDayCommentID_W = TearOff.PkDayCommentID;
                    }
                    return _PkDayCommentID_W;
                }
            }

            public WhereParameter FkAccountManagerID
            {
                get
                {
                    if (_FkAccountManagerID_W == null)
                    {
                        _FkAccountManagerID_W = TearOff.FkAccountManagerID;
                    }
                    return _FkAccountManagerID_W;
                }
            }

            public WhereParameter FkManagerID
            {
                get
                {
                    if (_FkManagerID_W == null)
                    {
                        _FkManagerID_W = TearOff.FkManagerID;
                    }
                    return _FkManagerID_W;
                }
            }

            public WhereParameter CComment
            {
                get
                {
                    if (_CComment_W == null)
                    {
                        _CComment_W = TearOff.CComment;
                    }
                    return _CComment_W;
                }
            }

            public WhereParameter CCommentManger
            {
                get
                {
                    if (_CCommentManger_W == null)
                    {
                        _CCommentManger_W = TearOff.CCommentManger;
                    }
                    return _CCommentManger_W;
                }
            }

            public WhereParameter CommentDate
            {
                get
                {
                    if (_CommentDate_W == null)
                    {
                        _CommentDate_W = TearOff.CommentDate;
                    }
                    return _CommentDate_W;
                }
            }

            private WhereParameter _PkDayCommentID_W = null;
            private WhereParameter _FkAccountManagerID_W = null;
            private WhereParameter _FkManagerID_W = null;
            private WhereParameter _CComment_W = null;
            private WhereParameter _CCommentManger_W = null;
            private WhereParameter _CommentDate_W = null;

            public void WhereClauseReset()
            {
                _PkDayCommentID_W = null;
                _FkAccountManagerID_W = null;
                _FkManagerID_W = null;
                _CComment_W = null;
                _CCommentManger_W = null;
                _CommentDate_W = null;

                this._entity.Query.FlushWhereParameters();

            }

            private BusinessEntity _entity;
            private TearOffWhereParameter _tearOff;

        }

        public WhereClause Where
        {
            get
            {
                if (_whereClause == null)
                {
                    _whereClause = new WhereClause(this);
                }

                return _whereClause;
            }
        }

        private WhereClause _whereClause = null;
        #endregion

        #region Aggregate Clause
        public class AggregateClause
        {
            public AggregateClause(BusinessEntity entity)
            {
                this._entity = entity;
            }

            public TearOffAggregateParameter TearOff
            {
                get
                {
                    if (_tearOff == null)
                    {
                        _tearOff = new TearOffAggregateParameter(this);
                    }

                    return _tearOff;
                }
            }

            #region AggregateParameter TearOff's
            public class TearOffAggregateParameter
            {
                public TearOffAggregateParameter(AggregateClause clause)
                {
                    this._clause = clause;
                }


                public AggregateParameter PkDayCommentID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.PkDayCommentID, Parameters.PkDayCommentID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter FkAccountManagerID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.FkAccountManagerID, Parameters.FkAccountManagerID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter FkManagerID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.FkManagerID, Parameters.FkManagerID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter CComment
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.CComment, Parameters.CComment);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter CCommentManger
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.CCommentManger, Parameters.CCommentManger);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter CommentDate
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.CommentDate, Parameters.CommentDate);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }


                private AggregateClause _clause;
            }
            #endregion

            public AggregateParameter PkDayCommentID
            {
                get
                {
                    if (_PkDayCommentID_W == null)
                    {
                        _PkDayCommentID_W = TearOff.PkDayCommentID;
                    }
                    return _PkDayCommentID_W;
                }
            }

            public AggregateParameter FkAccountManagerID
            {
                get
                {
                    if (_FkAccountManagerID_W == null)
                    {
                        _FkAccountManagerID_W = TearOff.FkAccountManagerID;
                    }
                    return _FkAccountManagerID_W;
                }
            }

            public AggregateParameter FkManagerID
            {
                get
                {
                    if (_FkManagerID_W == null)
                    {
                        _FkManagerID_W = TearOff.FkManagerID;
                    }
                    return _FkManagerID_W;
                }
            }

            public AggregateParameter CComment
            {
                get
                {
                    if (_CComment_W == null)
                    {
                        _CComment_W = TearOff.CComment;
                    }
                    return _CComment_W;
                }
            }

            public AggregateParameter CCommentManger
            {
                get
                {
                    if (_CCommentManger_W == null)
                    {
                        _CCommentManger_W = TearOff.CCommentManger;
                    }
                    return _CCommentManger_W;
                }
            }

            public AggregateParameter CommentDate
            {
                get
                {
                    if (_CommentDate_W == null)
                    {
                        _CommentDate_W = TearOff.CommentDate;
                    }
                    return _CommentDate_W;
                }
            }

            private AggregateParameter _PkDayCommentID_W = null;
            private AggregateParameter _FkAccountManagerID_W = null;
            private AggregateParameter _FkManagerID_W = null;
            private AggregateParameter _CComment_W = null;
            private AggregateParameter _CCommentManger_W = null;
            private AggregateParameter _CommentDate_W = null;

            public void AggregateClauseReset()
            {
                _PkDayCommentID_W = null;
                _FkAccountManagerID_W = null;
                _FkManagerID_W = null;
                _CComment_W = null;
                _CCommentManger_W = null;
                _CommentDate_W = null;

                this._entity.Query.FlushAggregateParameters();

            }

            private BusinessEntity _entity;
            private TearOffAggregateParameter _tearOff;

        }

        public AggregateClause Aggregate
        {
            get
            {
                if (_aggregateClause == null)
                {
                    _aggregateClause = new AggregateClause(this);
                }

                return _aggregateClause;
            }
        }

        private AggregateClause _aggregateClause = null;
        #endregion

        protected override IDbCommand GetInsertCommand()
        {

            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblDayCommentsInsert]";

            CreateParameters(cmd);

            SqlParameter p;
            p = cmd.Parameters[Parameters.PkDayCommentID.ParameterName];
            p.Direction = ParameterDirection.Output;

            return cmd;
        }

        protected override IDbCommand GetUpdateCommand()
        {

            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblDayCommentsUpdate]";

            CreateParameters(cmd);

            return cmd;
        }

        protected override IDbCommand GetDeleteCommand()
        {

            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblDayCommentsDelete]";

            SqlParameter p;
            p = cmd.Parameters.Add(Parameters.PkDayCommentID);
            p.SourceColumn = ColumnNames.PkDayCommentID;
            p.SourceVersion = DataRowVersion.Current;


            return cmd;
        }

        private IDbCommand CreateParameters(SqlCommand cmd)
        {
            SqlParameter p;

            p = cmd.Parameters.Add(Parameters.PkDayCommentID);
            p.SourceColumn = ColumnNames.PkDayCommentID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.FkAccountManagerID);
            p.SourceColumn = ColumnNames.FkAccountManagerID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.FkManagerID);
            p.SourceColumn = ColumnNames.FkManagerID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.CComment);
            p.SourceColumn = ColumnNames.CComment;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.CCommentManger);
            p.SourceColumn = ColumnNames.CCommentManger;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.CommentDate);
            p.SourceColumn = ColumnNames.CommentDate;
            p.SourceVersion = DataRowVersion.Current;


            return cmd;
        }
    }
}
