
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.1.7.1)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace LC.Model.BMS.DAL
{
	public abstract class _tblContactPeople : SqlClientEntity
	{
		public _tblContactPeople()
		{
			this.QuerySource = "tblContactPeople";
			this.MappingName = "tblContactPeople";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tblContactPeopleLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int PkContactPeopleID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.PkContactPeopleID, PkContactPeopleID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tblContactPeopleLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter PkContactPeopleID
			{
				get
				{
					return new SqlParameter("@PkContactPeopleID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Title
			{
				get
				{
					return new SqlParameter("@Title", SqlDbType.NVarChar, 100);
				}
			}
			
			public static SqlParameter FkCompanyID
			{
				get
				{
					return new SqlParameter("@FkCompanyID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter FkSuplierID
			{
				get
				{
					return new SqlParameter("@FkSuplierID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter PName
			{
				get
				{
					return new SqlParameter("@PName", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter PEmail1
			{
				get
				{
					return new SqlParameter("@PEmail1", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter PEmail2
			{
				get
				{
					return new SqlParameter("@PEmail2", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter PAddress
			{
				get
				{
					return new SqlParameter("@PAddress", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Phone1
			{
				get
				{
					return new SqlParameter("@Phone1", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Phone2
			{
				get
				{
					return new SqlParameter("@Phone2", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Fax
			{
				get
				{
					return new SqlParameter("@Fax", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter ContactNote
			{
				get
				{
					return new SqlParameter("@ContactNote", SqlDbType.NText, 1073741823);
				}
			}
			
			public static SqlParameter BIsPrimary
			{
				get
				{
					return new SqlParameter("@BIsPrimary", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter DModifiedDate
			{
				get
				{
					return new SqlParameter("@DModifiedDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter DCreatedDate
			{
				get
				{
					return new SqlParameter("@DCreatedDate", SqlDbType.DateTime, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string PkContactPeopleID = "pkContactPeopleID";
            public const string Title = "Title";
            public const string FkCompanyID = "fkCompanyID";
            public const string FkSuplierID = "fkSuplierID";
            public const string PName = "pName";
            public const string PEmail1 = "pEmail1";
            public const string PEmail2 = "pEmail2";
            public const string PAddress = "pAddress";
            public const string Phone1 = "Phone1";
            public const string Phone2 = "Phone2";
            public const string Fax = "fax";
            public const string ContactNote = "ContactNote";
            public const string BIsPrimary = "bIsPrimary";
            public const string DModifiedDate = "dModifiedDate";
            public const string DCreatedDate = "dCreatedDate";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[PkContactPeopleID] = _tblContactPeople.PropertyNames.PkContactPeopleID;
					ht[Title] = _tblContactPeople.PropertyNames.Title;
					ht[FkCompanyID] = _tblContactPeople.PropertyNames.FkCompanyID;
					ht[FkSuplierID] = _tblContactPeople.PropertyNames.FkSuplierID;
					ht[PName] = _tblContactPeople.PropertyNames.PName;
					ht[PEmail1] = _tblContactPeople.PropertyNames.PEmail1;
					ht[PEmail2] = _tblContactPeople.PropertyNames.PEmail2;
					ht[PAddress] = _tblContactPeople.PropertyNames.PAddress;
					ht[Phone1] = _tblContactPeople.PropertyNames.Phone1;
					ht[Phone2] = _tblContactPeople.PropertyNames.Phone2;
					ht[Fax] = _tblContactPeople.PropertyNames.Fax;
					ht[ContactNote] = _tblContactPeople.PropertyNames.ContactNote;
					ht[BIsPrimary] = _tblContactPeople.PropertyNames.BIsPrimary;
					ht[DModifiedDate] = _tblContactPeople.PropertyNames.DModifiedDate;
					ht[DCreatedDate] = _tblContactPeople.PropertyNames.DCreatedDate;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string PkContactPeopleID = "PkContactPeopleID";
            public const string Title = "Title";
            public const string FkCompanyID = "FkCompanyID";
            public const string FkSuplierID = "FkSuplierID";
            public const string PName = "PName";
            public const string PEmail1 = "PEmail1";
            public const string PEmail2 = "PEmail2";
            public const string PAddress = "PAddress";
            public const string Phone1 = "Phone1";
            public const string Phone2 = "Phone2";
            public const string Fax = "Fax";
            public const string ContactNote = "ContactNote";
            public const string BIsPrimary = "BIsPrimary";
            public const string DModifiedDate = "DModifiedDate";
            public const string DCreatedDate = "DCreatedDate";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[PkContactPeopleID] = _tblContactPeople.ColumnNames.PkContactPeopleID;
					ht[Title] = _tblContactPeople.ColumnNames.Title;
					ht[FkCompanyID] = _tblContactPeople.ColumnNames.FkCompanyID;
					ht[FkSuplierID] = _tblContactPeople.ColumnNames.FkSuplierID;
					ht[PName] = _tblContactPeople.ColumnNames.PName;
					ht[PEmail1] = _tblContactPeople.ColumnNames.PEmail1;
					ht[PEmail2] = _tblContactPeople.ColumnNames.PEmail2;
					ht[PAddress] = _tblContactPeople.ColumnNames.PAddress;
					ht[Phone1] = _tblContactPeople.ColumnNames.Phone1;
					ht[Phone2] = _tblContactPeople.ColumnNames.Phone2;
					ht[Fax] = _tblContactPeople.ColumnNames.Fax;
					ht[ContactNote] = _tblContactPeople.ColumnNames.ContactNote;
					ht[BIsPrimary] = _tblContactPeople.ColumnNames.BIsPrimary;
					ht[DModifiedDate] = _tblContactPeople.ColumnNames.DModifiedDate;
					ht[DCreatedDate] = _tblContactPeople.ColumnNames.DCreatedDate;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string PkContactPeopleID = "s_PkContactPeopleID";
            public const string Title = "s_Title";
            public const string FkCompanyID = "s_FkCompanyID";
            public const string FkSuplierID = "s_FkSuplierID";
            public const string PName = "s_PName";
            public const string PEmail1 = "s_PEmail1";
            public const string PEmail2 = "s_PEmail2";
            public const string PAddress = "s_PAddress";
            public const string Phone1 = "s_Phone1";
            public const string Phone2 = "s_Phone2";
            public const string Fax = "s_Fax";
            public const string ContactNote = "s_ContactNote";
            public const string BIsPrimary = "s_BIsPrimary";
            public const string DModifiedDate = "s_DModifiedDate";
            public const string DCreatedDate = "s_DCreatedDate";

		}
		#endregion		
		
		#region Properties
	
		public virtual int PkContactPeopleID
	    {
			get
	        {
				return base.Getint(ColumnNames.PkContactPeopleID);
			}
			set
	        {
				base.Setint(ColumnNames.PkContactPeopleID, value);
			}
		}

		public virtual string Title
	    {
			get
	        {
				return base.Getstring(ColumnNames.Title);
			}
			set
	        {
				base.Setstring(ColumnNames.Title, value);
			}
		}

		public virtual int FkCompanyID
	    {
			get
	        {
				return base.Getint(ColumnNames.FkCompanyID);
			}
			set
	        {
				base.Setint(ColumnNames.FkCompanyID, value);
			}
		}

		public virtual int FkSuplierID
	    {
			get
	        {
				return base.Getint(ColumnNames.FkSuplierID);
			}
			set
	        {
				base.Setint(ColumnNames.FkSuplierID, value);
			}
		}

		public virtual string PName
	    {
			get
	        {
				return base.Getstring(ColumnNames.PName);
			}
			set
	        {
				base.Setstring(ColumnNames.PName, value);
			}
		}

		public virtual string PEmail1
	    {
			get
	        {
				return base.Getstring(ColumnNames.PEmail1);
			}
			set
	        {
				base.Setstring(ColumnNames.PEmail1, value);
			}
		}

		public virtual string PEmail2
	    {
			get
	        {
				return base.Getstring(ColumnNames.PEmail2);
			}
			set
	        {
				base.Setstring(ColumnNames.PEmail2, value);
			}
		}

		public virtual string PAddress
	    {
			get
	        {
				return base.Getstring(ColumnNames.PAddress);
			}
			set
	        {
				base.Setstring(ColumnNames.PAddress, value);
			}
		}

		public virtual string Phone1
	    {
			get
	        {
				return base.Getstring(ColumnNames.Phone1);
			}
			set
	        {
				base.Setstring(ColumnNames.Phone1, value);
			}
		}

		public virtual string Phone2
	    {
			get
	        {
				return base.Getstring(ColumnNames.Phone2);
			}
			set
	        {
				base.Setstring(ColumnNames.Phone2, value);
			}
		}

		public virtual string Fax
	    {
			get
	        {
				return base.Getstring(ColumnNames.Fax);
			}
			set
	        {
				base.Setstring(ColumnNames.Fax, value);
			}
		}

		public virtual string ContactNote
	    {
			get
	        {
				return base.Getstring(ColumnNames.ContactNote);
			}
			set
	        {
				base.Setstring(ColumnNames.ContactNote, value);
			}
		}

		public virtual bool BIsPrimary
	    {
			get
	        {
				return base.Getbool(ColumnNames.BIsPrimary);
			}
			set
	        {
				base.Setbool(ColumnNames.BIsPrimary, value);
			}
		}

		public virtual DateTime DModifiedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.DModifiedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.DModifiedDate, value);
			}
		}

		public virtual DateTime DCreatedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.DCreatedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.DCreatedDate, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_PkContactPeopleID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PkContactPeopleID) ? string.Empty : base.GetintAsString(ColumnNames.PkContactPeopleID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PkContactPeopleID);
				else
					this.PkContactPeopleID = base.SetintAsString(ColumnNames.PkContactPeopleID, value);
			}
		}

		public virtual string s_Title
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Title) ? string.Empty : base.GetstringAsString(ColumnNames.Title);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Title);
				else
					this.Title = base.SetstringAsString(ColumnNames.Title, value);
			}
		}

		public virtual string s_FkCompanyID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FkCompanyID) ? string.Empty : base.GetintAsString(ColumnNames.FkCompanyID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FkCompanyID);
				else
					this.FkCompanyID = base.SetintAsString(ColumnNames.FkCompanyID, value);
			}
		}

		public virtual string s_FkSuplierID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FkSuplierID) ? string.Empty : base.GetintAsString(ColumnNames.FkSuplierID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FkSuplierID);
				else
					this.FkSuplierID = base.SetintAsString(ColumnNames.FkSuplierID, value);
			}
		}

		public virtual string s_PName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PName) ? string.Empty : base.GetstringAsString(ColumnNames.PName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PName);
				else
					this.PName = base.SetstringAsString(ColumnNames.PName, value);
			}
		}

		public virtual string s_PEmail1
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PEmail1) ? string.Empty : base.GetstringAsString(ColumnNames.PEmail1);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PEmail1);
				else
					this.PEmail1 = base.SetstringAsString(ColumnNames.PEmail1, value);
			}
		}

		public virtual string s_PEmail2
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PEmail2) ? string.Empty : base.GetstringAsString(ColumnNames.PEmail2);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PEmail2);
				else
					this.PEmail2 = base.SetstringAsString(ColumnNames.PEmail2, value);
			}
		}

		public virtual string s_PAddress
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PAddress) ? string.Empty : base.GetstringAsString(ColumnNames.PAddress);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PAddress);
				else
					this.PAddress = base.SetstringAsString(ColumnNames.PAddress, value);
			}
		}

		public virtual string s_Phone1
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Phone1) ? string.Empty : base.GetstringAsString(ColumnNames.Phone1);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Phone1);
				else
					this.Phone1 = base.SetstringAsString(ColumnNames.Phone1, value);
			}
		}

		public virtual string s_Phone2
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Phone2) ? string.Empty : base.GetstringAsString(ColumnNames.Phone2);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Phone2);
				else
					this.Phone2 = base.SetstringAsString(ColumnNames.Phone2, value);
			}
		}

		public virtual string s_Fax
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Fax) ? string.Empty : base.GetstringAsString(ColumnNames.Fax);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Fax);
				else
					this.Fax = base.SetstringAsString(ColumnNames.Fax, value);
			}
		}

		public virtual string s_ContactNote
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ContactNote) ? string.Empty : base.GetstringAsString(ColumnNames.ContactNote);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ContactNote);
				else
					this.ContactNote = base.SetstringAsString(ColumnNames.ContactNote, value);
			}
		}

		public virtual string s_BIsPrimary
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BIsPrimary) ? string.Empty : base.GetboolAsString(ColumnNames.BIsPrimary);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BIsPrimary);
				else
					this.BIsPrimary = base.SetboolAsString(ColumnNames.BIsPrimary, value);
			}
		}

		public virtual string s_DModifiedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DModifiedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DModifiedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DModifiedDate);
				else
					this.DModifiedDate = base.SetDateTimeAsString(ColumnNames.DModifiedDate, value);
			}
		}

		public virtual string s_DCreatedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DCreatedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DCreatedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DCreatedDate);
				else
					this.DCreatedDate = base.SetDateTimeAsString(ColumnNames.DCreatedDate, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter PkContactPeopleID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PkContactPeopleID, Parameters.PkContactPeopleID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Title
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Title, Parameters.Title);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FkCompanyID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FkCompanyID, Parameters.FkCompanyID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FkSuplierID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FkSuplierID, Parameters.FkSuplierID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PName, Parameters.PName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PEmail1
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PEmail1, Parameters.PEmail1);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PEmail2
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PEmail2, Parameters.PEmail2);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PAddress
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PAddress, Parameters.PAddress);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Phone1
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Phone1, Parameters.Phone1);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Phone2
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Phone2, Parameters.Phone2);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Fax
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Fax, Parameters.Fax);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ContactNote
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ContactNote, Parameters.ContactNote);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter BIsPrimary
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BIsPrimary, Parameters.BIsPrimary);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DModifiedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DModifiedDate, Parameters.DModifiedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DCreatedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DCreatedDate, Parameters.DCreatedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter PkContactPeopleID
		    {
				get
		        {
					if(_PkContactPeopleID_W == null)
	        	    {
						_PkContactPeopleID_W = TearOff.PkContactPeopleID;
					}
					return _PkContactPeopleID_W;
				}
			}

			public WhereParameter Title
		    {
				get
		        {
					if(_Title_W == null)
	        	    {
						_Title_W = TearOff.Title;
					}
					return _Title_W;
				}
			}

			public WhereParameter FkCompanyID
		    {
				get
		        {
					if(_FkCompanyID_W == null)
	        	    {
						_FkCompanyID_W = TearOff.FkCompanyID;
					}
					return _FkCompanyID_W;
				}
			}

			public WhereParameter FkSuplierID
		    {
				get
		        {
					if(_FkSuplierID_W == null)
	        	    {
						_FkSuplierID_W = TearOff.FkSuplierID;
					}
					return _FkSuplierID_W;
				}
			}

			public WhereParameter PName
		    {
				get
		        {
					if(_PName_W == null)
	        	    {
						_PName_W = TearOff.PName;
					}
					return _PName_W;
				}
			}

			public WhereParameter PEmail1
		    {
				get
		        {
					if(_PEmail1_W == null)
	        	    {
						_PEmail1_W = TearOff.PEmail1;
					}
					return _PEmail1_W;
				}
			}

			public WhereParameter PEmail2
		    {
				get
		        {
					if(_PEmail2_W == null)
	        	    {
						_PEmail2_W = TearOff.PEmail2;
					}
					return _PEmail2_W;
				}
			}

			public WhereParameter PAddress
		    {
				get
		        {
					if(_PAddress_W == null)
	        	    {
						_PAddress_W = TearOff.PAddress;
					}
					return _PAddress_W;
				}
			}

			public WhereParameter Phone1
		    {
				get
		        {
					if(_Phone1_W == null)
	        	    {
						_Phone1_W = TearOff.Phone1;
					}
					return _Phone1_W;
				}
			}

			public WhereParameter Phone2
		    {
				get
		        {
					if(_Phone2_W == null)
	        	    {
						_Phone2_W = TearOff.Phone2;
					}
					return _Phone2_W;
				}
			}

			public WhereParameter Fax
		    {
				get
		        {
					if(_Fax_W == null)
	        	    {
						_Fax_W = TearOff.Fax;
					}
					return _Fax_W;
				}
			}

			public WhereParameter ContactNote
		    {
				get
		        {
					if(_ContactNote_W == null)
	        	    {
						_ContactNote_W = TearOff.ContactNote;
					}
					return _ContactNote_W;
				}
			}

			public WhereParameter BIsPrimary
		    {
				get
		        {
					if(_BIsPrimary_W == null)
	        	    {
						_BIsPrimary_W = TearOff.BIsPrimary;
					}
					return _BIsPrimary_W;
				}
			}

			public WhereParameter DModifiedDate
		    {
				get
		        {
					if(_DModifiedDate_W == null)
	        	    {
						_DModifiedDate_W = TearOff.DModifiedDate;
					}
					return _DModifiedDate_W;
				}
			}

			public WhereParameter DCreatedDate
		    {
				get
		        {
					if(_DCreatedDate_W == null)
	        	    {
						_DCreatedDate_W = TearOff.DCreatedDate;
					}
					return _DCreatedDate_W;
				}
			}

			private WhereParameter _PkContactPeopleID_W = null;
			private WhereParameter _Title_W = null;
			private WhereParameter _FkCompanyID_W = null;
			private WhereParameter _FkSuplierID_W = null;
			private WhereParameter _PName_W = null;
			private WhereParameter _PEmail1_W = null;
			private WhereParameter _PEmail2_W = null;
			private WhereParameter _PAddress_W = null;
			private WhereParameter _Phone1_W = null;
			private WhereParameter _Phone2_W = null;
			private WhereParameter _Fax_W = null;
			private WhereParameter _ContactNote_W = null;
			private WhereParameter _BIsPrimary_W = null;
			private WhereParameter _DModifiedDate_W = null;
			private WhereParameter _DCreatedDate_W = null;

			public void WhereClauseReset()
			{
				_PkContactPeopleID_W = null;
				_Title_W = null;
				_FkCompanyID_W = null;
				_FkSuplierID_W = null;
				_PName_W = null;
				_PEmail1_W = null;
				_PEmail2_W = null;
				_PAddress_W = null;
				_Phone1_W = null;
				_Phone2_W = null;
				_Fax_W = null;
				_ContactNote_W = null;
				_BIsPrimary_W = null;
				_DModifiedDate_W = null;
				_DCreatedDate_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter PkContactPeopleID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PkContactPeopleID, Parameters.PkContactPeopleID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Title
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Title, Parameters.Title);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FkCompanyID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FkCompanyID, Parameters.FkCompanyID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FkSuplierID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FkSuplierID, Parameters.FkSuplierID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PName, Parameters.PName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PEmail1
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PEmail1, Parameters.PEmail1);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PEmail2
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PEmail2, Parameters.PEmail2);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PAddress
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PAddress, Parameters.PAddress);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Phone1
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Phone1, Parameters.Phone1);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Phone2
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Phone2, Parameters.Phone2);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Fax
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Fax, Parameters.Fax);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ContactNote
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ContactNote, Parameters.ContactNote);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter BIsPrimary
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BIsPrimary, Parameters.BIsPrimary);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DModifiedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DModifiedDate, Parameters.DModifiedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DCreatedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DCreatedDate, Parameters.DCreatedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter PkContactPeopleID
		    {
				get
		        {
					if(_PkContactPeopleID_W == null)
	        	    {
						_PkContactPeopleID_W = TearOff.PkContactPeopleID;
					}
					return _PkContactPeopleID_W;
				}
			}

			public AggregateParameter Title
		    {
				get
		        {
					if(_Title_W == null)
	        	    {
						_Title_W = TearOff.Title;
					}
					return _Title_W;
				}
			}

			public AggregateParameter FkCompanyID
		    {
				get
		        {
					if(_FkCompanyID_W == null)
	        	    {
						_FkCompanyID_W = TearOff.FkCompanyID;
					}
					return _FkCompanyID_W;
				}
			}

			public AggregateParameter FkSuplierID
		    {
				get
		        {
					if(_FkSuplierID_W == null)
	        	    {
						_FkSuplierID_W = TearOff.FkSuplierID;
					}
					return _FkSuplierID_W;
				}
			}

			public AggregateParameter PName
		    {
				get
		        {
					if(_PName_W == null)
	        	    {
						_PName_W = TearOff.PName;
					}
					return _PName_W;
				}
			}

			public AggregateParameter PEmail1
		    {
				get
		        {
					if(_PEmail1_W == null)
	        	    {
						_PEmail1_W = TearOff.PEmail1;
					}
					return _PEmail1_W;
				}
			}

			public AggregateParameter PEmail2
		    {
				get
		        {
					if(_PEmail2_W == null)
	        	    {
						_PEmail2_W = TearOff.PEmail2;
					}
					return _PEmail2_W;
				}
			}

			public AggregateParameter PAddress
		    {
				get
		        {
					if(_PAddress_W == null)
	        	    {
						_PAddress_W = TearOff.PAddress;
					}
					return _PAddress_W;
				}
			}

			public AggregateParameter Phone1
		    {
				get
		        {
					if(_Phone1_W == null)
	        	    {
						_Phone1_W = TearOff.Phone1;
					}
					return _Phone1_W;
				}
			}

			public AggregateParameter Phone2
		    {
				get
		        {
					if(_Phone2_W == null)
	        	    {
						_Phone2_W = TearOff.Phone2;
					}
					return _Phone2_W;
				}
			}

			public AggregateParameter Fax
		    {
				get
		        {
					if(_Fax_W == null)
	        	    {
						_Fax_W = TearOff.Fax;
					}
					return _Fax_W;
				}
			}

			public AggregateParameter ContactNote
		    {
				get
		        {
					if(_ContactNote_W == null)
	        	    {
						_ContactNote_W = TearOff.ContactNote;
					}
					return _ContactNote_W;
				}
			}

			public AggregateParameter BIsPrimary
		    {
				get
		        {
					if(_BIsPrimary_W == null)
	        	    {
						_BIsPrimary_W = TearOff.BIsPrimary;
					}
					return _BIsPrimary_W;
				}
			}

			public AggregateParameter DModifiedDate
		    {
				get
		        {
					if(_DModifiedDate_W == null)
	        	    {
						_DModifiedDate_W = TearOff.DModifiedDate;
					}
					return _DModifiedDate_W;
				}
			}

			public AggregateParameter DCreatedDate
		    {
				get
		        {
					if(_DCreatedDate_W == null)
	        	    {
						_DCreatedDate_W = TearOff.DCreatedDate;
					}
					return _DCreatedDate_W;
				}
			}

			private AggregateParameter _PkContactPeopleID_W = null;
			private AggregateParameter _Title_W = null;
			private AggregateParameter _FkCompanyID_W = null;
			private AggregateParameter _FkSuplierID_W = null;
			private AggregateParameter _PName_W = null;
			private AggregateParameter _PEmail1_W = null;
			private AggregateParameter _PEmail2_W = null;
			private AggregateParameter _PAddress_W = null;
			private AggregateParameter _Phone1_W = null;
			private AggregateParameter _Phone2_W = null;
			private AggregateParameter _Fax_W = null;
			private AggregateParameter _ContactNote_W = null;
			private AggregateParameter _BIsPrimary_W = null;
			private AggregateParameter _DModifiedDate_W = null;
			private AggregateParameter _DCreatedDate_W = null;

			public void AggregateClauseReset()
			{
				_PkContactPeopleID_W = null;
				_Title_W = null;
				_FkCompanyID_W = null;
				_FkSuplierID_W = null;
				_PName_W = null;
				_PEmail1_W = null;
				_PEmail2_W = null;
				_PAddress_W = null;
				_Phone1_W = null;
				_Phone2_W = null;
				_Fax_W = null;
				_ContactNote_W = null;
				_BIsPrimary_W = null;
				_DModifiedDate_W = null;
				_DCreatedDate_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblContactPeopleInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.PkContactPeopleID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblContactPeopleUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblContactPeopleDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.PkContactPeopleID);
			p.SourceColumn = ColumnNames.PkContactPeopleID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.PkContactPeopleID);
			p.SourceColumn = ColumnNames.PkContactPeopleID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Title);
			p.SourceColumn = ColumnNames.Title;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FkCompanyID);
			p.SourceColumn = ColumnNames.FkCompanyID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FkSuplierID);
			p.SourceColumn = ColumnNames.FkSuplierID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PName);
			p.SourceColumn = ColumnNames.PName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PEmail1);
			p.SourceColumn = ColumnNames.PEmail1;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PEmail2);
			p.SourceColumn = ColumnNames.PEmail2;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PAddress);
			p.SourceColumn = ColumnNames.PAddress;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Phone1);
			p.SourceColumn = ColumnNames.Phone1;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Phone2);
			p.SourceColumn = ColumnNames.Phone2;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Fax);
			p.SourceColumn = ColumnNames.Fax;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ContactNote);
			p.SourceColumn = ColumnNames.ContactNote;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.BIsPrimary);
			p.SourceColumn = ColumnNames.BIsPrimary;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DModifiedDate);
			p.SourceColumn = ColumnNames.DModifiedDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DCreatedDate);
			p.SourceColumn = ColumnNames.DCreatedDate;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
