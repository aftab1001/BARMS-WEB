
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.1.7.1)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace LC.Model.BMS.DAL
{
	public abstract class _tblOrderDetail : SqlClientEntity
	{
		public _tblOrderDetail()
		{
			this.QuerySource = "tblOrderDetail";
			this.MappingName = "tblOrderDetail";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tblOrderDetailLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int PkOrderDetailID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.PkOrderDetailID, PkOrderDetailID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tblOrderDetailLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter PkOrderDetailID
			{
				get
				{
					return new SqlParameter("@PkOrderDetailID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter FkOrderID
			{
				get
				{
					return new SqlParameter("@FkOrderID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter FkProductID
			{
				get
				{
					return new SqlParameter("@FkProductID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter FkProductPackageID
			{
				get
				{
					return new SqlParameter("@FkProductPackageID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter FkProductQuantityID
			{
				get
				{
					return new SqlParameter("@FkProductQuantityID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter ProudctPrice
			{
				get
				{
					return new SqlParameter("@ProudctPrice", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter NewPrice
			{
				get
				{
					return new SqlParameter("@NewPrice", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter Vat
			{
				get
				{
					return new SqlParameter("@Vat", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter AfterVat
			{
				get
				{
					return new SqlParameter("@AfterVat", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter Quantity
			{
				get
				{
					return new SqlParameter("@Quantity", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Subtotal
			{
				get
				{
					return new SqlParameter("@Subtotal", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter FinalSubtotal
			{
				get
				{
					return new SqlParameter("@FinalSubtotal", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter SubtotalDifference
			{
				get
				{
					return new SqlParameter("@SubtotalDifference", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter DCreatedDate
			{
				get
				{
					return new SqlParameter("@DCreatedDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter DModifiedDate
			{
				get
				{
					return new SqlParameter("@DModifiedDate", SqlDbType.DateTime, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string PkOrderDetailID = "pkOrderDetailID";
            public const string FkOrderID = "fkOrderID";
            public const string FkProductID = "fkProductID";
            public const string FkProductPackageID = "fkProductPackageID";
            public const string FkProductQuantityID = "fkProductQuantityID";
            public const string ProudctPrice = "ProudctPrice";
            public const string NewPrice = "newPrice";
            public const string Vat = "vat";
            public const string AfterVat = "afterVat";
            public const string Quantity = "Quantity";
            public const string Subtotal = "subtotal";
            public const string FinalSubtotal = "finalSubtotal";
            public const string SubtotalDifference = "SubtotalDifference";
            public const string DCreatedDate = "dCreatedDate";
            public const string DModifiedDate = "dModifiedDate";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[PkOrderDetailID] = _tblOrderDetail.PropertyNames.PkOrderDetailID;
					ht[FkOrderID] = _tblOrderDetail.PropertyNames.FkOrderID;
					ht[FkProductID] = _tblOrderDetail.PropertyNames.FkProductID;
					ht[FkProductPackageID] = _tblOrderDetail.PropertyNames.FkProductPackageID;
					ht[FkProductQuantityID] = _tblOrderDetail.PropertyNames.FkProductQuantityID;
					ht[ProudctPrice] = _tblOrderDetail.PropertyNames.ProudctPrice;
					ht[NewPrice] = _tblOrderDetail.PropertyNames.NewPrice;
					ht[Vat] = _tblOrderDetail.PropertyNames.Vat;
					ht[AfterVat] = _tblOrderDetail.PropertyNames.AfterVat;
					ht[Quantity] = _tblOrderDetail.PropertyNames.Quantity;
					ht[Subtotal] = _tblOrderDetail.PropertyNames.Subtotal;
					ht[FinalSubtotal] = _tblOrderDetail.PropertyNames.FinalSubtotal;
					ht[SubtotalDifference] = _tblOrderDetail.PropertyNames.SubtotalDifference;
					ht[DCreatedDate] = _tblOrderDetail.PropertyNames.DCreatedDate;
					ht[DModifiedDate] = _tblOrderDetail.PropertyNames.DModifiedDate;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string PkOrderDetailID = "PkOrderDetailID";
            public const string FkOrderID = "FkOrderID";
            public const string FkProductID = "FkProductID";
            public const string FkProductPackageID = "FkProductPackageID";
            public const string FkProductQuantityID = "FkProductQuantityID";
            public const string ProudctPrice = "ProudctPrice";
            public const string NewPrice = "NewPrice";
            public const string Vat = "Vat";
            public const string AfterVat = "AfterVat";
            public const string Quantity = "Quantity";
            public const string Subtotal = "Subtotal";
            public const string FinalSubtotal = "FinalSubtotal";
            public const string SubtotalDifference = "SubtotalDifference";
            public const string DCreatedDate = "DCreatedDate";
            public const string DModifiedDate = "DModifiedDate";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[PkOrderDetailID] = _tblOrderDetail.ColumnNames.PkOrderDetailID;
					ht[FkOrderID] = _tblOrderDetail.ColumnNames.FkOrderID;
					ht[FkProductID] = _tblOrderDetail.ColumnNames.FkProductID;
					ht[FkProductPackageID] = _tblOrderDetail.ColumnNames.FkProductPackageID;
					ht[FkProductQuantityID] = _tblOrderDetail.ColumnNames.FkProductQuantityID;
					ht[ProudctPrice] = _tblOrderDetail.ColumnNames.ProudctPrice;
					ht[NewPrice] = _tblOrderDetail.ColumnNames.NewPrice;
					ht[Vat] = _tblOrderDetail.ColumnNames.Vat;
					ht[AfterVat] = _tblOrderDetail.ColumnNames.AfterVat;
					ht[Quantity] = _tblOrderDetail.ColumnNames.Quantity;
					ht[Subtotal] = _tblOrderDetail.ColumnNames.Subtotal;
					ht[FinalSubtotal] = _tblOrderDetail.ColumnNames.FinalSubtotal;
					ht[SubtotalDifference] = _tblOrderDetail.ColumnNames.SubtotalDifference;
					ht[DCreatedDate] = _tblOrderDetail.ColumnNames.DCreatedDate;
					ht[DModifiedDate] = _tblOrderDetail.ColumnNames.DModifiedDate;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string PkOrderDetailID = "s_PkOrderDetailID";
            public const string FkOrderID = "s_FkOrderID";
            public const string FkProductID = "s_FkProductID";
            public const string FkProductPackageID = "s_FkProductPackageID";
            public const string FkProductQuantityID = "s_FkProductQuantityID";
            public const string ProudctPrice = "s_ProudctPrice";
            public const string NewPrice = "s_NewPrice";
            public const string Vat = "s_Vat";
            public const string AfterVat = "s_AfterVat";
            public const string Quantity = "s_Quantity";
            public const string Subtotal = "s_Subtotal";
            public const string FinalSubtotal = "s_FinalSubtotal";
            public const string SubtotalDifference = "s_SubtotalDifference";
            public const string DCreatedDate = "s_DCreatedDate";
            public const string DModifiedDate = "s_DModifiedDate";

		}
		#endregion		
		
		#region Properties
	
		public virtual int PkOrderDetailID
	    {
			get
	        {
				return base.Getint(ColumnNames.PkOrderDetailID);
			}
			set
	        {
				base.Setint(ColumnNames.PkOrderDetailID, value);
			}
		}

		public virtual int FkOrderID
	    {
			get
	        {
				return base.Getint(ColumnNames.FkOrderID);
			}
			set
	        {
				base.Setint(ColumnNames.FkOrderID, value);
			}
		}

		public virtual int FkProductID
	    {
			get
	        {
				return base.Getint(ColumnNames.FkProductID);
			}
			set
	        {
				base.Setint(ColumnNames.FkProductID, value);
			}
		}

		public virtual int FkProductPackageID
	    {
			get
	        {
				return base.Getint(ColumnNames.FkProductPackageID);
			}
			set
	        {
				base.Setint(ColumnNames.FkProductPackageID, value);
			}
		}

		public virtual int FkProductQuantityID
	    {
			get
	        {
				return base.Getint(ColumnNames.FkProductQuantityID);
			}
			set
	        {
				base.Setint(ColumnNames.FkProductQuantityID, value);
			}
		}

		public virtual double ProudctPrice
	    {
			get
	        {
				return base.Getdouble(ColumnNames.ProudctPrice);
			}
			set
	        {
				base.Setdouble(ColumnNames.ProudctPrice, value);
			}
		}

		public virtual double NewPrice
	    {
			get
	        {
				return base.Getdouble(ColumnNames.NewPrice);
			}
			set
	        {
				base.Setdouble(ColumnNames.NewPrice, value);
			}
		}

		public virtual int Vat
	    {
			get
	        {
				return base.Getint(ColumnNames.Vat);
			}
			set
	        {
				base.Setint(ColumnNames.Vat, value);
			}
		}

		public virtual double AfterVat
	    {
			get
	        {
				return base.Getdouble(ColumnNames.AfterVat);
			}
			set
	        {
				base.Setdouble(ColumnNames.AfterVat, value);
			}
		}

		public virtual int Quantity
	    {
			get
	        {
				return base.Getint(ColumnNames.Quantity);
			}
			set
	        {
				base.Setint(ColumnNames.Quantity, value);
			}
		}

		public virtual double Subtotal
	    {
			get
	        {
				return base.Getdouble(ColumnNames.Subtotal);
			}
			set
	        {
				base.Setdouble(ColumnNames.Subtotal, value);
			}
		}

		public virtual double FinalSubtotal
	    {
			get
	        {
				return base.Getdouble(ColumnNames.FinalSubtotal);
			}
			set
	        {
				base.Setdouble(ColumnNames.FinalSubtotal, value);
			}
		}

		public virtual double SubtotalDifference
	    {
			get
	        {
				return base.Getdouble(ColumnNames.SubtotalDifference);
			}
			set
	        {
				base.Setdouble(ColumnNames.SubtotalDifference, value);
			}
		}

		public virtual DateTime DCreatedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.DCreatedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.DCreatedDate, value);
			}
		}

		public virtual DateTime DModifiedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.DModifiedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.DModifiedDate, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_PkOrderDetailID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PkOrderDetailID) ? string.Empty : base.GetintAsString(ColumnNames.PkOrderDetailID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PkOrderDetailID);
				else
					this.PkOrderDetailID = base.SetintAsString(ColumnNames.PkOrderDetailID, value);
			}
		}

		public virtual string s_FkOrderID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FkOrderID) ? string.Empty : base.GetintAsString(ColumnNames.FkOrderID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FkOrderID);
				else
					this.FkOrderID = base.SetintAsString(ColumnNames.FkOrderID, value);
			}
		}

		public virtual string s_FkProductID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FkProductID) ? string.Empty : base.GetintAsString(ColumnNames.FkProductID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FkProductID);
				else
					this.FkProductID = base.SetintAsString(ColumnNames.FkProductID, value);
			}
		}

		public virtual string s_FkProductPackageID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FkProductPackageID) ? string.Empty : base.GetintAsString(ColumnNames.FkProductPackageID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FkProductPackageID);
				else
					this.FkProductPackageID = base.SetintAsString(ColumnNames.FkProductPackageID, value);
			}
		}

		public virtual string s_FkProductQuantityID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FkProductQuantityID) ? string.Empty : base.GetintAsString(ColumnNames.FkProductQuantityID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FkProductQuantityID);
				else
					this.FkProductQuantityID = base.SetintAsString(ColumnNames.FkProductQuantityID, value);
			}
		}

		public virtual string s_ProudctPrice
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ProudctPrice) ? string.Empty : base.GetdoubleAsString(ColumnNames.ProudctPrice);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ProudctPrice);
				else
					this.ProudctPrice = base.SetdoubleAsString(ColumnNames.ProudctPrice, value);
			}
		}

		public virtual string s_NewPrice
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.NewPrice) ? string.Empty : base.GetdoubleAsString(ColumnNames.NewPrice);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.NewPrice);
				else
					this.NewPrice = base.SetdoubleAsString(ColumnNames.NewPrice, value);
			}
		}

		public virtual string s_Vat
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Vat) ? string.Empty : base.GetintAsString(ColumnNames.Vat);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Vat);
				else
					this.Vat = base.SetintAsString(ColumnNames.Vat, value);
			}
		}

		public virtual string s_AfterVat
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AfterVat) ? string.Empty : base.GetdoubleAsString(ColumnNames.AfterVat);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AfterVat);
				else
					this.AfterVat = base.SetdoubleAsString(ColumnNames.AfterVat, value);
			}
		}

		public virtual string s_Quantity
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Quantity) ? string.Empty : base.GetintAsString(ColumnNames.Quantity);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Quantity);
				else
					this.Quantity = base.SetintAsString(ColumnNames.Quantity, value);
			}
		}

		public virtual string s_Subtotal
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Subtotal) ? string.Empty : base.GetdoubleAsString(ColumnNames.Subtotal);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Subtotal);
				else
					this.Subtotal = base.SetdoubleAsString(ColumnNames.Subtotal, value);
			}
		}

		public virtual string s_FinalSubtotal
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FinalSubtotal) ? string.Empty : base.GetdoubleAsString(ColumnNames.FinalSubtotal);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FinalSubtotal);
				else
					this.FinalSubtotal = base.SetdoubleAsString(ColumnNames.FinalSubtotal, value);
			}
		}

		public virtual string s_SubtotalDifference
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SubtotalDifference) ? string.Empty : base.GetdoubleAsString(ColumnNames.SubtotalDifference);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SubtotalDifference);
				else
					this.SubtotalDifference = base.SetdoubleAsString(ColumnNames.SubtotalDifference, value);
			}
		}

		public virtual string s_DCreatedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DCreatedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DCreatedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DCreatedDate);
				else
					this.DCreatedDate = base.SetDateTimeAsString(ColumnNames.DCreatedDate, value);
			}
		}

		public virtual string s_DModifiedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DModifiedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DModifiedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DModifiedDate);
				else
					this.DModifiedDate = base.SetDateTimeAsString(ColumnNames.DModifiedDate, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter PkOrderDetailID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PkOrderDetailID, Parameters.PkOrderDetailID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FkOrderID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FkOrderID, Parameters.FkOrderID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FkProductID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FkProductID, Parameters.FkProductID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FkProductPackageID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FkProductPackageID, Parameters.FkProductPackageID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FkProductQuantityID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FkProductQuantityID, Parameters.FkProductQuantityID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ProudctPrice
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ProudctPrice, Parameters.ProudctPrice);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter NewPrice
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.NewPrice, Parameters.NewPrice);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Vat
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Vat, Parameters.Vat);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AfterVat
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AfterVat, Parameters.AfterVat);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Quantity
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Quantity, Parameters.Quantity);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Subtotal
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Subtotal, Parameters.Subtotal);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FinalSubtotal
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FinalSubtotal, Parameters.FinalSubtotal);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SubtotalDifference
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SubtotalDifference, Parameters.SubtotalDifference);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DCreatedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DCreatedDate, Parameters.DCreatedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DModifiedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DModifiedDate, Parameters.DModifiedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter PkOrderDetailID
		    {
				get
		        {
					if(_PkOrderDetailID_W == null)
	        	    {
						_PkOrderDetailID_W = TearOff.PkOrderDetailID;
					}
					return _PkOrderDetailID_W;
				}
			}

			public WhereParameter FkOrderID
		    {
				get
		        {
					if(_FkOrderID_W == null)
	        	    {
						_FkOrderID_W = TearOff.FkOrderID;
					}
					return _FkOrderID_W;
				}
			}

			public WhereParameter FkProductID
		    {
				get
		        {
					if(_FkProductID_W == null)
	        	    {
						_FkProductID_W = TearOff.FkProductID;
					}
					return _FkProductID_W;
				}
			}

			public WhereParameter FkProductPackageID
		    {
				get
		        {
					if(_FkProductPackageID_W == null)
	        	    {
						_FkProductPackageID_W = TearOff.FkProductPackageID;
					}
					return _FkProductPackageID_W;
				}
			}

			public WhereParameter FkProductQuantityID
		    {
				get
		        {
					if(_FkProductQuantityID_W == null)
	        	    {
						_FkProductQuantityID_W = TearOff.FkProductQuantityID;
					}
					return _FkProductQuantityID_W;
				}
			}

			public WhereParameter ProudctPrice
		    {
				get
		        {
					if(_ProudctPrice_W == null)
	        	    {
						_ProudctPrice_W = TearOff.ProudctPrice;
					}
					return _ProudctPrice_W;
				}
			}

			public WhereParameter NewPrice
		    {
				get
		        {
					if(_NewPrice_W == null)
	        	    {
						_NewPrice_W = TearOff.NewPrice;
					}
					return _NewPrice_W;
				}
			}

			public WhereParameter Vat
		    {
				get
		        {
					if(_Vat_W == null)
	        	    {
						_Vat_W = TearOff.Vat;
					}
					return _Vat_W;
				}
			}

			public WhereParameter AfterVat
		    {
				get
		        {
					if(_AfterVat_W == null)
	        	    {
						_AfterVat_W = TearOff.AfterVat;
					}
					return _AfterVat_W;
				}
			}

			public WhereParameter Quantity
		    {
				get
		        {
					if(_Quantity_W == null)
	        	    {
						_Quantity_W = TearOff.Quantity;
					}
					return _Quantity_W;
				}
			}

			public WhereParameter Subtotal
		    {
				get
		        {
					if(_Subtotal_W == null)
	        	    {
						_Subtotal_W = TearOff.Subtotal;
					}
					return _Subtotal_W;
				}
			}

			public WhereParameter FinalSubtotal
		    {
				get
		        {
					if(_FinalSubtotal_W == null)
	        	    {
						_FinalSubtotal_W = TearOff.FinalSubtotal;
					}
					return _FinalSubtotal_W;
				}
			}

			public WhereParameter SubtotalDifference
		    {
				get
		        {
					if(_SubtotalDifference_W == null)
	        	    {
						_SubtotalDifference_W = TearOff.SubtotalDifference;
					}
					return _SubtotalDifference_W;
				}
			}

			public WhereParameter DCreatedDate
		    {
				get
		        {
					if(_DCreatedDate_W == null)
	        	    {
						_DCreatedDate_W = TearOff.DCreatedDate;
					}
					return _DCreatedDate_W;
				}
			}

			public WhereParameter DModifiedDate
		    {
				get
		        {
					if(_DModifiedDate_W == null)
	        	    {
						_DModifiedDate_W = TearOff.DModifiedDate;
					}
					return _DModifiedDate_W;
				}
			}

			private WhereParameter _PkOrderDetailID_W = null;
			private WhereParameter _FkOrderID_W = null;
			private WhereParameter _FkProductID_W = null;
			private WhereParameter _FkProductPackageID_W = null;
			private WhereParameter _FkProductQuantityID_W = null;
			private WhereParameter _ProudctPrice_W = null;
			private WhereParameter _NewPrice_W = null;
			private WhereParameter _Vat_W = null;
			private WhereParameter _AfterVat_W = null;
			private WhereParameter _Quantity_W = null;
			private WhereParameter _Subtotal_W = null;
			private WhereParameter _FinalSubtotal_W = null;
			private WhereParameter _SubtotalDifference_W = null;
			private WhereParameter _DCreatedDate_W = null;
			private WhereParameter _DModifiedDate_W = null;

			public void WhereClauseReset()
			{
				_PkOrderDetailID_W = null;
				_FkOrderID_W = null;
				_FkProductID_W = null;
				_FkProductPackageID_W = null;
				_FkProductQuantityID_W = null;
				_ProudctPrice_W = null;
				_NewPrice_W = null;
				_Vat_W = null;
				_AfterVat_W = null;
				_Quantity_W = null;
				_Subtotal_W = null;
				_FinalSubtotal_W = null;
				_SubtotalDifference_W = null;
				_DCreatedDate_W = null;
				_DModifiedDate_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter PkOrderDetailID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PkOrderDetailID, Parameters.PkOrderDetailID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FkOrderID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FkOrderID, Parameters.FkOrderID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FkProductID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FkProductID, Parameters.FkProductID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FkProductPackageID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FkProductPackageID, Parameters.FkProductPackageID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FkProductQuantityID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FkProductQuantityID, Parameters.FkProductQuantityID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ProudctPrice
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ProudctPrice, Parameters.ProudctPrice);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter NewPrice
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.NewPrice, Parameters.NewPrice);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Vat
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Vat, Parameters.Vat);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AfterVat
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AfterVat, Parameters.AfterVat);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Quantity
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Quantity, Parameters.Quantity);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Subtotal
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Subtotal, Parameters.Subtotal);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FinalSubtotal
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FinalSubtotal, Parameters.FinalSubtotal);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SubtotalDifference
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SubtotalDifference, Parameters.SubtotalDifference);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DCreatedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DCreatedDate, Parameters.DCreatedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DModifiedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DModifiedDate, Parameters.DModifiedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter PkOrderDetailID
		    {
				get
		        {
					if(_PkOrderDetailID_W == null)
	        	    {
						_PkOrderDetailID_W = TearOff.PkOrderDetailID;
					}
					return _PkOrderDetailID_W;
				}
			}

			public AggregateParameter FkOrderID
		    {
				get
		        {
					if(_FkOrderID_W == null)
	        	    {
						_FkOrderID_W = TearOff.FkOrderID;
					}
					return _FkOrderID_W;
				}
			}

			public AggregateParameter FkProductID
		    {
				get
		        {
					if(_FkProductID_W == null)
	        	    {
						_FkProductID_W = TearOff.FkProductID;
					}
					return _FkProductID_W;
				}
			}

			public AggregateParameter FkProductPackageID
		    {
				get
		        {
					if(_FkProductPackageID_W == null)
	        	    {
						_FkProductPackageID_W = TearOff.FkProductPackageID;
					}
					return _FkProductPackageID_W;
				}
			}

			public AggregateParameter FkProductQuantityID
		    {
				get
		        {
					if(_FkProductQuantityID_W == null)
	        	    {
						_FkProductQuantityID_W = TearOff.FkProductQuantityID;
					}
					return _FkProductQuantityID_W;
				}
			}

			public AggregateParameter ProudctPrice
		    {
				get
		        {
					if(_ProudctPrice_W == null)
	        	    {
						_ProudctPrice_W = TearOff.ProudctPrice;
					}
					return _ProudctPrice_W;
				}
			}

			public AggregateParameter NewPrice
		    {
				get
		        {
					if(_NewPrice_W == null)
	        	    {
						_NewPrice_W = TearOff.NewPrice;
					}
					return _NewPrice_W;
				}
			}

			public AggregateParameter Vat
		    {
				get
		        {
					if(_Vat_W == null)
	        	    {
						_Vat_W = TearOff.Vat;
					}
					return _Vat_W;
				}
			}

			public AggregateParameter AfterVat
		    {
				get
		        {
					if(_AfterVat_W == null)
	        	    {
						_AfterVat_W = TearOff.AfterVat;
					}
					return _AfterVat_W;
				}
			}

			public AggregateParameter Quantity
		    {
				get
		        {
					if(_Quantity_W == null)
	        	    {
						_Quantity_W = TearOff.Quantity;
					}
					return _Quantity_W;
				}
			}

			public AggregateParameter Subtotal
		    {
				get
		        {
					if(_Subtotal_W == null)
	        	    {
						_Subtotal_W = TearOff.Subtotal;
					}
					return _Subtotal_W;
				}
			}

			public AggregateParameter FinalSubtotal
		    {
				get
		        {
					if(_FinalSubtotal_W == null)
	        	    {
						_FinalSubtotal_W = TearOff.FinalSubtotal;
					}
					return _FinalSubtotal_W;
				}
			}

			public AggregateParameter SubtotalDifference
		    {
				get
		        {
					if(_SubtotalDifference_W == null)
	        	    {
						_SubtotalDifference_W = TearOff.SubtotalDifference;
					}
					return _SubtotalDifference_W;
				}
			}

			public AggregateParameter DCreatedDate
		    {
				get
		        {
					if(_DCreatedDate_W == null)
	        	    {
						_DCreatedDate_W = TearOff.DCreatedDate;
					}
					return _DCreatedDate_W;
				}
			}

			public AggregateParameter DModifiedDate
		    {
				get
		        {
					if(_DModifiedDate_W == null)
	        	    {
						_DModifiedDate_W = TearOff.DModifiedDate;
					}
					return _DModifiedDate_W;
				}
			}

			private AggregateParameter _PkOrderDetailID_W = null;
			private AggregateParameter _FkOrderID_W = null;
			private AggregateParameter _FkProductID_W = null;
			private AggregateParameter _FkProductPackageID_W = null;
			private AggregateParameter _FkProductQuantityID_W = null;
			private AggregateParameter _ProudctPrice_W = null;
			private AggregateParameter _NewPrice_W = null;
			private AggregateParameter _Vat_W = null;
			private AggregateParameter _AfterVat_W = null;
			private AggregateParameter _Quantity_W = null;
			private AggregateParameter _Subtotal_W = null;
			private AggregateParameter _FinalSubtotal_W = null;
			private AggregateParameter _SubtotalDifference_W = null;
			private AggregateParameter _DCreatedDate_W = null;
			private AggregateParameter _DModifiedDate_W = null;

			public void AggregateClauseReset()
			{
				_PkOrderDetailID_W = null;
				_FkOrderID_W = null;
				_FkProductID_W = null;
				_FkProductPackageID_W = null;
				_FkProductQuantityID_W = null;
				_ProudctPrice_W = null;
				_NewPrice_W = null;
				_Vat_W = null;
				_AfterVat_W = null;
				_Quantity_W = null;
				_Subtotal_W = null;
				_FinalSubtotal_W = null;
				_SubtotalDifference_W = null;
				_DCreatedDate_W = null;
				_DModifiedDate_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblOrderDetailInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.PkOrderDetailID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblOrderDetailUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblOrderDetailDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.PkOrderDetailID);
			p.SourceColumn = ColumnNames.PkOrderDetailID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.PkOrderDetailID);
			p.SourceColumn = ColumnNames.PkOrderDetailID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FkOrderID);
			p.SourceColumn = ColumnNames.FkOrderID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FkProductID);
			p.SourceColumn = ColumnNames.FkProductID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FkProductPackageID);
			p.SourceColumn = ColumnNames.FkProductPackageID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FkProductQuantityID);
			p.SourceColumn = ColumnNames.FkProductQuantityID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ProudctPrice);
			p.SourceColumn = ColumnNames.ProudctPrice;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.NewPrice);
			p.SourceColumn = ColumnNames.NewPrice;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Vat);
			p.SourceColumn = ColumnNames.Vat;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AfterVat);
			p.SourceColumn = ColumnNames.AfterVat;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Quantity);
			p.SourceColumn = ColumnNames.Quantity;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Subtotal);
			p.SourceColumn = ColumnNames.Subtotal;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FinalSubtotal);
			p.SourceColumn = ColumnNames.FinalSubtotal;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SubtotalDifference);
			p.SourceColumn = ColumnNames.SubtotalDifference;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DCreatedDate);
			p.SourceColumn = ColumnNames.DCreatedDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DModifiedDate);
			p.SourceColumn = ColumnNames.DModifiedDate;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
