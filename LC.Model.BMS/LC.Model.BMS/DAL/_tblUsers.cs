
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.1.7.1)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace LC.Model.BMS.DAL
{
    public abstract class _tblUsers : SqlClientEntity
    {
        public _tblUsers()
        {
            this.QuerySource = "tblUsers";
            this.MappingName = "tblUsers";

        }

        //=================================================================
        //  public Overrides void AddNew()
        //=================================================================
        //
        //=================================================================
        public override void AddNew()
        {
            base.AddNew();

        }


        public override void FlushData()
        {
            this._whereClause = null;
            this._aggregateClause = null;
            base.FlushData();
        }

        //=================================================================
        //  	public Function LoadAll() As Boolean
        //=================================================================
        //  Loads all of the records in the database, and sets the currentRow to the first row
        //=================================================================
        public bool LoadAll()
        {
            ListDictionary parameters = null;

            return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tblUsersLoadAll]", parameters);
        }

        //=================================================================
        // public Overridable Function LoadByPrimaryKey()  As Boolean
        //=================================================================
        //  Loads a single row of via the primary key
        //=================================================================
        public virtual bool LoadByPrimaryKey(int PkUserID)
        {
            ListDictionary parameters = new ListDictionary();
            parameters.Add(Parameters.PkUserID, PkUserID);


            return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tblUsersLoadByPrimaryKey]", parameters);
        }

        #region Parameters
        protected class Parameters
        {

            public static SqlParameter PkUserID
            {
                get
                {
                    return new SqlParameter("@PkUserID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter SUsername
            {
                get
                {
                    return new SqlParameter("@SUsername", SqlDbType.NVarChar, 50);
                }
            }

            public static SqlParameter SPassword
            {
                get
                {
                    return new SqlParameter("@SPassword", SqlDbType.NVarChar, 50);
                }
            }

            public static SqlParameter SFirstName
            {
                get
                {
                    return new SqlParameter("@SFirstName", SqlDbType.NVarChar, 50);
                }
            }

            public static SqlParameter SLastName
            {
                get
                {
                    return new SqlParameter("@SLastName", SqlDbType.NVarChar, 50);
                }
            }

            public static SqlParameter IGender
            {
                get
                {
                    return new SqlParameter("@IGender", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter DOB
            {
                get
                {
                    return new SqlParameter("@DOB", SqlDbType.DateTime, 0);
                }
            }

            public static SqlParameter FkNationalityCountry
            {
                get
                {
                    return new SqlParameter("@FkNationalityCountry", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter SImagePath
            {
                get
                {
                    return new SqlParameter("@SImagePath", SqlDbType.NVarChar, 150);
                }
            }

            public static SqlParameter SFaceBookProfile
            {
                get
                {
                    return new SqlParameter("@SFaceBookProfile", SqlDbType.NVarChar, 150);
                }
            }

            public static SqlParameter SSkypeProfile
            {
                get
                {
                    return new SqlParameter("@SSkypeProfile", SqlDbType.NVarChar, 150);
                }
            }

            public static SqlParameter STwitterProfile
            {
                get
                {
                    return new SqlParameter("@STwitterProfile", SqlDbType.NVarChar, 150);
                }
            }

            public static SqlParameter SMessengerProfile
            {
                get
                {
                    return new SqlParameter("@SMessengerProfile", SqlDbType.NVarChar, 150);
                }
            }

            public static SqlParameter SActivationCode
            {
                get
                {
                    return new SqlParameter("@SActivationCode", SqlDbType.NVarChar, 150);
                }
            }

            public static SqlParameter BActiveByUser
            {
                get
                {
                    return new SqlParameter("@BActiveByUser", SqlDbType.Bit, 0);
                }
            }

            public static SqlParameter BActiveByAdmin
            {
                get
                {
                    return new SqlParameter("@BActiveByAdmin", SqlDbType.Bit, 0);
                }
            }

            public static SqlParameter BActiveBonusDoc
            {
                get
                {
                    return new SqlParameter("@BActiveBonusDoc", SqlDbType.Bit, 0);
                }
            }

            public static SqlParameter BBonusApprovedByDepartment
            {
                get
                {
                    return new SqlParameter("@BBonusApprovedByDepartment", SqlDbType.Bit, 0);
                }
            }

            public static SqlParameter BBonus
            {
                get
                {
                    return new SqlParameter("@BBonus", SqlDbType.NText, 1073741823);
                }
            }

            public static SqlParameter FkActivatedByAdminID
            {
                get
                {
                    return new SqlParameter("@FkActivatedByAdminID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter DCreateDate
            {
                get
                {
                    return new SqlParameter("@DCreateDate", SqlDbType.DateTime, 0);
                }
            }

            public static SqlParameter DModifiedDate
            {
                get
                {
                    return new SqlParameter("@DModifiedDate", SqlDbType.DateTime, 0);
                }
            }

            public static SqlParameter SBonusNote
            {
                get
                {
                    return new SqlParameter("@SBonusNote", SqlDbType.Text, 2147483647);
                }
            }

            public static SqlParameter FBonusAmount
            {
                get
                {
                    return new SqlParameter("@FBonusAmount", SqlDbType.Float, 0);
                }
            }

        }
        #endregion

        #region ColumnNames
        public class ColumnNames
        {
            public const string PkUserID = "pkUserID";
            public const string SUsername = "sUsername";
            public const string SPassword = "sPassword";
            public const string SFirstName = "sFirstName";
            public const string SLastName = "sLastName";
            public const string IGender = "iGender";
            public const string DOB = "DOB";
            public const string FkNationalityCountry = "fkNationalityCountry";
            public const string SImagePath = "sImagePath";
            public const string SFaceBookProfile = "sFaceBookProfile";
            public const string SSkypeProfile = "sSkypeProfile";
            public const string STwitterProfile = "sTwitterProfile";
            public const string SMessengerProfile = "sMessengerProfile";
            public const string SActivationCode = "sActivationCode";
            public const string BActiveByUser = "bActiveByUser";
            public const string BActiveByAdmin = "bActiveByAdmin";
            public const string BActiveBonusDoc = "bActiveBonusDoc";
            public const string BBonusApprovedByDepartment = "bBonusApprovedByDepartment";
            public const string BBonus = "bBonus";
            public const string FkActivatedByAdminID = "fkActivatedByAdminID";
            public const string DCreateDate = "dCreateDate";
            public const string DModifiedDate = "dModifiedDate";
            public const string SBonusNote = "sBonusNote";
            public const string FBonusAmount = "fBonusAmount";

            static public string ToPropertyName(string columnName)
            {
                if (ht == null)
                {
                    ht = new Hashtable();

                    ht[PkUserID] = _tblUsers.PropertyNames.PkUserID;
                    ht[SUsername] = _tblUsers.PropertyNames.SUsername;
                    ht[SPassword] = _tblUsers.PropertyNames.SPassword;
                    ht[SFirstName] = _tblUsers.PropertyNames.SFirstName;
                    ht[SLastName] = _tblUsers.PropertyNames.SLastName;
                    ht[IGender] = _tblUsers.PropertyNames.IGender;
                    ht[DOB] = _tblUsers.PropertyNames.DOB;
                    ht[FkNationalityCountry] = _tblUsers.PropertyNames.FkNationalityCountry;
                    ht[SImagePath] = _tblUsers.PropertyNames.SImagePath;
                    ht[SFaceBookProfile] = _tblUsers.PropertyNames.SFaceBookProfile;
                    ht[SSkypeProfile] = _tblUsers.PropertyNames.SSkypeProfile;
                    ht[STwitterProfile] = _tblUsers.PropertyNames.STwitterProfile;
                    ht[SMessengerProfile] = _tblUsers.PropertyNames.SMessengerProfile;
                    ht[SActivationCode] = _tblUsers.PropertyNames.SActivationCode;
                    ht[BActiveByUser] = _tblUsers.PropertyNames.BActiveByUser;
                    ht[BActiveByAdmin] = _tblUsers.PropertyNames.BActiveByAdmin;
                    ht[BActiveBonusDoc] = _tblUsers.PropertyNames.BActiveBonusDoc;
                    ht[BBonusApprovedByDepartment] = _tblUsers.PropertyNames.BBonusApprovedByDepartment;
                    ht[BBonus] = _tblUsers.PropertyNames.BBonus;
                    ht[FkActivatedByAdminID] = _tblUsers.PropertyNames.FkActivatedByAdminID;
                    ht[DCreateDate] = _tblUsers.PropertyNames.DCreateDate;
                    ht[DModifiedDate] = _tblUsers.PropertyNames.DModifiedDate;
                    ht[SBonusNote] = _tblUsers.PropertyNames.SBonusNote;
                    ht[FBonusAmount] = _tblUsers.PropertyNames.FBonusAmount;

                }
                return (string)ht[columnName];
            }

            static private Hashtable ht = null;
        }
        #endregion

        #region PropertyNames
        public class PropertyNames
        {
            public const string PkUserID = "PkUserID";
            public const string SUsername = "SUsername";
            public const string SPassword = "SPassword";
            public const string SFirstName = "SFirstName";
            public const string SLastName = "SLastName";
            public const string IGender = "IGender";
            public const string DOB = "DOB";
            public const string FkNationalityCountry = "FkNationalityCountry";
            public const string SImagePath = "SImagePath";
            public const string SFaceBookProfile = "SFaceBookProfile";
            public const string SSkypeProfile = "SSkypeProfile";
            public const string STwitterProfile = "STwitterProfile";
            public const string SMessengerProfile = "SMessengerProfile";
            public const string SActivationCode = "SActivationCode";
            public const string BActiveByUser = "BActiveByUser";
            public const string BActiveByAdmin = "BActiveByAdmin";
            public const string BActiveBonusDoc = "BActiveBonusDoc";
            public const string BBonusApprovedByDepartment = "BBonusApprovedByDepartment";
            public const string BBonus = "BBonus";
            public const string FkActivatedByAdminID = "FkActivatedByAdminID";
            public const string DCreateDate = "DCreateDate";
            public const string DModifiedDate = "DModifiedDate";
            public const string SBonusNote = "SBonusNote";
            public const string FBonusAmount = "FBonusAmount";

            static public string ToColumnName(string propertyName)
            {
                if (ht == null)
                {
                    ht = new Hashtable();

                    ht[PkUserID] = _tblUsers.ColumnNames.PkUserID;
                    ht[SUsername] = _tblUsers.ColumnNames.SUsername;
                    ht[SPassword] = _tblUsers.ColumnNames.SPassword;
                    ht[SFirstName] = _tblUsers.ColumnNames.SFirstName;
                    ht[SLastName] = _tblUsers.ColumnNames.SLastName;
                    ht[IGender] = _tblUsers.ColumnNames.IGender;
                    ht[DOB] = _tblUsers.ColumnNames.DOB;
                    ht[FkNationalityCountry] = _tblUsers.ColumnNames.FkNationalityCountry;
                    ht[SImagePath] = _tblUsers.ColumnNames.SImagePath;
                    ht[SFaceBookProfile] = _tblUsers.ColumnNames.SFaceBookProfile;
                    ht[SSkypeProfile] = _tblUsers.ColumnNames.SSkypeProfile;
                    ht[STwitterProfile] = _tblUsers.ColumnNames.STwitterProfile;
                    ht[SMessengerProfile] = _tblUsers.ColumnNames.SMessengerProfile;
                    ht[SActivationCode] = _tblUsers.ColumnNames.SActivationCode;
                    ht[BActiveByUser] = _tblUsers.ColumnNames.BActiveByUser;
                    ht[BActiveByAdmin] = _tblUsers.ColumnNames.BActiveByAdmin;
                    ht[BActiveBonusDoc] = _tblUsers.ColumnNames.BActiveBonusDoc;
                    ht[BBonusApprovedByDepartment] = _tblUsers.ColumnNames.BBonusApprovedByDepartment;
                    ht[BBonus] = _tblUsers.ColumnNames.BBonus;
                    ht[FkActivatedByAdminID] = _tblUsers.ColumnNames.FkActivatedByAdminID;
                    ht[DCreateDate] = _tblUsers.ColumnNames.DCreateDate;
                    ht[DModifiedDate] = _tblUsers.ColumnNames.DModifiedDate;
                    ht[SBonusNote] = _tblUsers.ColumnNames.SBonusNote;
                    ht[FBonusAmount] = _tblUsers.ColumnNames.FBonusAmount;

                }
                return (string)ht[propertyName];
            }

            static private Hashtable ht = null;
        }
        #endregion

        #region StringPropertyNames
        public class StringPropertyNames
        {
            public const string PkUserID = "s_PkUserID";
            public const string SUsername = "s_SUsername";
            public const string SPassword = "s_SPassword";
            public const string SFirstName = "s_SFirstName";
            public const string SLastName = "s_SLastName";
            public const string IGender = "s_IGender";
            public const string DOB = "s_DOB";
            public const string FkNationalityCountry = "s_FkNationalityCountry";
            public const string SImagePath = "s_SImagePath";
            public const string SFaceBookProfile = "s_SFaceBookProfile";
            public const string SSkypeProfile = "s_SSkypeProfile";
            public const string STwitterProfile = "s_STwitterProfile";
            public const string SMessengerProfile = "s_SMessengerProfile";
            public const string SActivationCode = "s_SActivationCode";
            public const string BActiveByUser = "s_BActiveByUser";
            public const string BActiveByAdmin = "s_BActiveByAdmin";
            public const string BActiveBonusDoc = "s_BActiveBonusDoc";
            public const string BBonusApprovedByDepartment = "s_BBonusApprovedByDepartment";
            public const string BBonus = "s_BBonus";
            public const string FkActivatedByAdminID = "s_FkActivatedByAdminID";
            public const string DCreateDate = "s_DCreateDate";
            public const string DModifiedDate = "s_DModifiedDate";
            public const string SBonusNote = "s_SBonusNote";
            public const string FBonusAmount = "s_FBonusAmount";

        }
        #endregion

        #region Properties

        public virtual int PkUserID
        {
            get
            {
                return base.Getint(ColumnNames.PkUserID);
            }
            set
            {
                base.Setint(ColumnNames.PkUserID, value);
            }
        }

        public virtual string SUsername
        {
            get
            {
                return base.Getstring(ColumnNames.SUsername);
            }
            set
            {
                base.Setstring(ColumnNames.SUsername, value);
            }
        }

        public virtual string SPassword
        {
            get
            {
                return base.Getstring(ColumnNames.SPassword);
            }
            set
            {
                base.Setstring(ColumnNames.SPassword, value);
            }
        }

        public virtual string SFirstName
        {
            get
            {
                return base.Getstring(ColumnNames.SFirstName);
            }
            set
            {
                base.Setstring(ColumnNames.SFirstName, value);
            }
        }

        public virtual string SLastName
        {
            get
            {
                return base.Getstring(ColumnNames.SLastName);
            }
            set
            {
                base.Setstring(ColumnNames.SLastName, value);
            }
        }

        public virtual int IGender
        {
            get
            {
                return base.Getint(ColumnNames.IGender);
            }
            set
            {
                base.Setint(ColumnNames.IGender, value);
            }
        }

        public virtual DateTime DOB
        {
            get
            {
                return base.GetDateTime(ColumnNames.DOB);
            }
            set
            {
                base.SetDateTime(ColumnNames.DOB, value);
            }
        }

        public virtual int FkNationalityCountry
        {
            get
            {
                return base.Getint(ColumnNames.FkNationalityCountry);
            }
            set
            {
                base.Setint(ColumnNames.FkNationalityCountry, value);
            }
        }

        public virtual string SImagePath
        {
            get
            {
                return base.Getstring(ColumnNames.SImagePath);
            }
            set
            {
                base.Setstring(ColumnNames.SImagePath, value);
            }
        }

        public virtual string SFaceBookProfile
        {
            get
            {
                return base.Getstring(ColumnNames.SFaceBookProfile);
            }
            set
            {
                base.Setstring(ColumnNames.SFaceBookProfile, value);
            }
        }

        public virtual string SSkypeProfile
        {
            get
            {
                return base.Getstring(ColumnNames.SSkypeProfile);
            }
            set
            {
                base.Setstring(ColumnNames.SSkypeProfile, value);
            }
        }

        public virtual string STwitterProfile
        {
            get
            {
                return base.Getstring(ColumnNames.STwitterProfile);
            }
            set
            {
                base.Setstring(ColumnNames.STwitterProfile, value);
            }
        }

        public virtual string SMessengerProfile
        {
            get
            {
                return base.Getstring(ColumnNames.SMessengerProfile);
            }
            set
            {
                base.Setstring(ColumnNames.SMessengerProfile, value);
            }
        }

        public virtual string SActivationCode
        {
            get
            {
                return base.Getstring(ColumnNames.SActivationCode);
            }
            set
            {
                base.Setstring(ColumnNames.SActivationCode, value);
            }
        }

        public virtual bool BActiveByUser
        {
            get
            {
                return base.Getbool(ColumnNames.BActiveByUser);
            }
            set
            {
                base.Setbool(ColumnNames.BActiveByUser, value);
            }
        }

        public virtual bool BActiveByAdmin
        {
            get
            {
                return base.Getbool(ColumnNames.BActiveByAdmin);
            }
            set
            {
                base.Setbool(ColumnNames.BActiveByAdmin, value);
            }
        }

        public virtual bool BActiveBonusDoc
        {
            get
            {
                return base.Getbool(ColumnNames.BActiveBonusDoc);
            }
            set
            {
                base.Setbool(ColumnNames.BActiveBonusDoc, value);
            }
        }

        public virtual bool BBonusApprovedByDepartment
        {
            get
            {
                return base.Getbool(ColumnNames.BBonusApprovedByDepartment);
            }
            set
            {
                base.Setbool(ColumnNames.BBonusApprovedByDepartment, value);
            }
        }

        public virtual string BBonus
        {
            get
            {
                return base.Getstring(ColumnNames.BBonus);
            }
            set
            {
                base.Setstring(ColumnNames.BBonus, value);
            }
        }

        public virtual int FkActivatedByAdminID
        {
            get
            {
                return base.Getint(ColumnNames.FkActivatedByAdminID);
            }
            set
            {
                base.Setint(ColumnNames.FkActivatedByAdminID, value);
            }
        }

        public virtual DateTime DCreateDate
        {
            get
            {
                return base.GetDateTime(ColumnNames.DCreateDate);
            }
            set
            {
                base.SetDateTime(ColumnNames.DCreateDate, value);
            }
        }

        public virtual DateTime DModifiedDate
        {
            get
            {
                return base.GetDateTime(ColumnNames.DModifiedDate);
            }
            set
            {
                base.SetDateTime(ColumnNames.DModifiedDate, value);
            }
        }

        public virtual string SBonusNote
        {
            get
            {
                return base.Getstring(ColumnNames.SBonusNote);
            }
            set
            {
                base.Setstring(ColumnNames.SBonusNote, value);
            }
        }

        public virtual double FBonusAmount
        {
            get
            {
                return base.Getdouble(ColumnNames.FBonusAmount);
            }
            set
            {
                base.Setdouble(ColumnNames.FBonusAmount, value);
            }
        }


        #endregion

        #region String Properties

        public virtual string s_PkUserID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.PkUserID) ? string.Empty : base.GetintAsString(ColumnNames.PkUserID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.PkUserID);
                else
                    this.PkUserID = base.SetintAsString(ColumnNames.PkUserID, value);
            }
        }

        public virtual string s_SUsername
        {
            get
            {
                return this.IsColumnNull(ColumnNames.SUsername) ? string.Empty : base.GetstringAsString(ColumnNames.SUsername);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.SUsername);
                else
                    this.SUsername = base.SetstringAsString(ColumnNames.SUsername, value);
            }
        }

        public virtual string s_SPassword
        {
            get
            {
                return this.IsColumnNull(ColumnNames.SPassword) ? string.Empty : base.GetstringAsString(ColumnNames.SPassword);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.SPassword);
                else
                    this.SPassword = base.SetstringAsString(ColumnNames.SPassword, value);
            }
        }

        public virtual string s_SFirstName
        {
            get
            {
                return this.IsColumnNull(ColumnNames.SFirstName) ? string.Empty : base.GetstringAsString(ColumnNames.SFirstName);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.SFirstName);
                else
                    this.SFirstName = base.SetstringAsString(ColumnNames.SFirstName, value);
            }
        }

        public virtual string s_SLastName
        {
            get
            {
                return this.IsColumnNull(ColumnNames.SLastName) ? string.Empty : base.GetstringAsString(ColumnNames.SLastName);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.SLastName);
                else
                    this.SLastName = base.SetstringAsString(ColumnNames.SLastName, value);
            }
        }

        public virtual string s_IGender
        {
            get
            {
                return this.IsColumnNull(ColumnNames.IGender) ? string.Empty : base.GetintAsString(ColumnNames.IGender);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.IGender);
                else
                    this.IGender = base.SetintAsString(ColumnNames.IGender, value);
            }
        }

        public virtual string s_DOB
        {
            get
            {
                return this.IsColumnNull(ColumnNames.DOB) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DOB);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.DOB);
                else
                    this.DOB = base.SetDateTimeAsString(ColumnNames.DOB, value);
            }
        }

        public virtual string s_FkNationalityCountry
        {
            get
            {
                return this.IsColumnNull(ColumnNames.FkNationalityCountry) ? string.Empty : base.GetintAsString(ColumnNames.FkNationalityCountry);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.FkNationalityCountry);
                else
                    this.FkNationalityCountry = base.SetintAsString(ColumnNames.FkNationalityCountry, value);
            }
        }

        public virtual string s_SImagePath
        {
            get
            {
                return this.IsColumnNull(ColumnNames.SImagePath) ? string.Empty : base.GetstringAsString(ColumnNames.SImagePath);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.SImagePath);
                else
                    this.SImagePath = base.SetstringAsString(ColumnNames.SImagePath, value);
            }
        }

        public virtual string s_SFaceBookProfile
        {
            get
            {
                return this.IsColumnNull(ColumnNames.SFaceBookProfile) ? string.Empty : base.GetstringAsString(ColumnNames.SFaceBookProfile);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.SFaceBookProfile);
                else
                    this.SFaceBookProfile = base.SetstringAsString(ColumnNames.SFaceBookProfile, value);
            }
        }

        public virtual string s_SSkypeProfile
        {
            get
            {
                return this.IsColumnNull(ColumnNames.SSkypeProfile) ? string.Empty : base.GetstringAsString(ColumnNames.SSkypeProfile);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.SSkypeProfile);
                else
                    this.SSkypeProfile = base.SetstringAsString(ColumnNames.SSkypeProfile, value);
            }
        }

        public virtual string s_STwitterProfile
        {
            get
            {
                return this.IsColumnNull(ColumnNames.STwitterProfile) ? string.Empty : base.GetstringAsString(ColumnNames.STwitterProfile);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.STwitterProfile);
                else
                    this.STwitterProfile = base.SetstringAsString(ColumnNames.STwitterProfile, value);
            }
        }

        public virtual string s_SMessengerProfile
        {
            get
            {
                return this.IsColumnNull(ColumnNames.SMessengerProfile) ? string.Empty : base.GetstringAsString(ColumnNames.SMessengerProfile);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.SMessengerProfile);
                else
                    this.SMessengerProfile = base.SetstringAsString(ColumnNames.SMessengerProfile, value);
            }
        }

        public virtual string s_SActivationCode
        {
            get
            {
                return this.IsColumnNull(ColumnNames.SActivationCode) ? string.Empty : base.GetstringAsString(ColumnNames.SActivationCode);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.SActivationCode);
                else
                    this.SActivationCode = base.SetstringAsString(ColumnNames.SActivationCode, value);
            }
        }

        public virtual string s_BActiveByUser
        {
            get
            {
                return this.IsColumnNull(ColumnNames.BActiveByUser) ? string.Empty : base.GetboolAsString(ColumnNames.BActiveByUser);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.BActiveByUser);
                else
                    this.BActiveByUser = base.SetboolAsString(ColumnNames.BActiveByUser, value);
            }
        }

        public virtual string s_BActiveByAdmin
        {
            get
            {
                return this.IsColumnNull(ColumnNames.BActiveByAdmin) ? string.Empty : base.GetboolAsString(ColumnNames.BActiveByAdmin);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.BActiveByAdmin);
                else
                    this.BActiveByAdmin = base.SetboolAsString(ColumnNames.BActiveByAdmin, value);
            }
        }

        public virtual string s_BActiveBonusDoc
        {
            get
            {
                return this.IsColumnNull(ColumnNames.BActiveBonusDoc) ? string.Empty : base.GetboolAsString(ColumnNames.BActiveBonusDoc);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.BActiveBonusDoc);
                else
                    this.BActiveBonusDoc = base.SetboolAsString(ColumnNames.BActiveBonusDoc, value);
            }
        }

        public virtual string s_BBonusApprovedByDepartment
        {
            get
            {
                return this.IsColumnNull(ColumnNames.BBonusApprovedByDepartment) ? string.Empty : base.GetboolAsString(ColumnNames.BBonusApprovedByDepartment);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.BBonusApprovedByDepartment);
                else
                    this.BBonusApprovedByDepartment = base.SetboolAsString(ColumnNames.BBonusApprovedByDepartment, value);
            }
        }

        public virtual string s_BBonus
        {
            get
            {
                return this.IsColumnNull(ColumnNames.BBonus) ? string.Empty : base.GetstringAsString(ColumnNames.BBonus);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.BBonus);
                else
                    this.BBonus = base.SetstringAsString(ColumnNames.BBonus, value);
            }
        }

        public virtual string s_FkActivatedByAdminID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.FkActivatedByAdminID) ? string.Empty : base.GetintAsString(ColumnNames.FkActivatedByAdminID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.FkActivatedByAdminID);
                else
                    this.FkActivatedByAdminID = base.SetintAsString(ColumnNames.FkActivatedByAdminID, value);
            }
        }

        public virtual string s_DCreateDate
        {
            get
            {
                return this.IsColumnNull(ColumnNames.DCreateDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DCreateDate);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.DCreateDate);
                else
                    this.DCreateDate = base.SetDateTimeAsString(ColumnNames.DCreateDate, value);
            }
        }

        public virtual string s_DModifiedDate
        {
            get
            {
                return this.IsColumnNull(ColumnNames.DModifiedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DModifiedDate);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.DModifiedDate);
                else
                    this.DModifiedDate = base.SetDateTimeAsString(ColumnNames.DModifiedDate, value);
            }
        }

        public virtual string s_SBonusNote
        {
            get
            {
                return this.IsColumnNull(ColumnNames.SBonusNote) ? string.Empty : base.GetstringAsString(ColumnNames.SBonusNote);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.SBonusNote);
                else
                    this.SBonusNote = base.SetstringAsString(ColumnNames.SBonusNote, value);
            }
        }

        public virtual string s_FBonusAmount
        {
            get
            {
                return this.IsColumnNull(ColumnNames.FBonusAmount) ? string.Empty : base.GetdoubleAsString(ColumnNames.FBonusAmount);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.FBonusAmount);
                else
                    this.FBonusAmount = base.SetdoubleAsString(ColumnNames.FBonusAmount, value);
            }
        }


        #endregion

        #region Where Clause
        public class WhereClause
        {
            public WhereClause(BusinessEntity entity)
            {
                this._entity = entity;
            }

            public TearOffWhereParameter TearOff
            {
                get
                {
                    if (_tearOff == null)
                    {
                        _tearOff = new TearOffWhereParameter(this);
                    }

                    return _tearOff;
                }
            }

            #region WhereParameter TearOff's
            public class TearOffWhereParameter
            {
                public TearOffWhereParameter(WhereClause clause)
                {
                    this._clause = clause;
                }


                public WhereParameter PkUserID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.PkUserID, Parameters.PkUserID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter SUsername
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.SUsername, Parameters.SUsername);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter SPassword
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.SPassword, Parameters.SPassword);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter SFirstName
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.SFirstName, Parameters.SFirstName);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter SLastName
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.SLastName, Parameters.SLastName);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter IGender
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.IGender, Parameters.IGender);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter DOB
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.DOB, Parameters.DOB);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter FkNationalityCountry
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.FkNationalityCountry, Parameters.FkNationalityCountry);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter SImagePath
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.SImagePath, Parameters.SImagePath);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter SFaceBookProfile
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.SFaceBookProfile, Parameters.SFaceBookProfile);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter SSkypeProfile
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.SSkypeProfile, Parameters.SSkypeProfile);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter STwitterProfile
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.STwitterProfile, Parameters.STwitterProfile);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter SMessengerProfile
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.SMessengerProfile, Parameters.SMessengerProfile);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter SActivationCode
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.SActivationCode, Parameters.SActivationCode);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter BActiveByUser
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.BActiveByUser, Parameters.BActiveByUser);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter BActiveByAdmin
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.BActiveByAdmin, Parameters.BActiveByAdmin);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter BActiveBonusDoc
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.BActiveBonusDoc, Parameters.BActiveBonusDoc);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter BBonusApprovedByDepartment
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.BBonusApprovedByDepartment, Parameters.BBonusApprovedByDepartment);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter BBonus
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.BBonus, Parameters.BBonus);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter FkActivatedByAdminID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.FkActivatedByAdminID, Parameters.FkActivatedByAdminID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter DCreateDate
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.DCreateDate, Parameters.DCreateDate);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter DModifiedDate
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.DModifiedDate, Parameters.DModifiedDate);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter SBonusNote
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.SBonusNote, Parameters.SBonusNote);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter FBonusAmount
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.FBonusAmount, Parameters.FBonusAmount);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }


                private WhereClause _clause;
            }
            #endregion

            public WhereParameter PkUserID
            {
                get
                {
                    if (_PkUserID_W == null)
                    {
                        _PkUserID_W = TearOff.PkUserID;
                    }
                    return _PkUserID_W;
                }
            }

            public WhereParameter SUsername
            {
                get
                {
                    if (_SUsername_W == null)
                    {
                        _SUsername_W = TearOff.SUsername;
                    }
                    return _SUsername_W;
                }
            }

            public WhereParameter SPassword
            {
                get
                {
                    if (_SPassword_W == null)
                    {
                        _SPassword_W = TearOff.SPassword;
                    }
                    return _SPassword_W;
                }
            }

            public WhereParameter SFirstName
            {
                get
                {
                    if (_SFirstName_W == null)
                    {
                        _SFirstName_W = TearOff.SFirstName;
                    }
                    return _SFirstName_W;
                }
            }

            public WhereParameter SLastName
            {
                get
                {
                    if (_SLastName_W == null)
                    {
                        _SLastName_W = TearOff.SLastName;
                    }
                    return _SLastName_W;
                }
            }

            public WhereParameter IGender
            {
                get
                {
                    if (_IGender_W == null)
                    {
                        _IGender_W = TearOff.IGender;
                    }
                    return _IGender_W;
                }
            }

            public WhereParameter DOB
            {
                get
                {
                    if (_DOB_W == null)
                    {
                        _DOB_W = TearOff.DOB;
                    }
                    return _DOB_W;
                }
            }

            public WhereParameter FkNationalityCountry
            {
                get
                {
                    if (_FkNationalityCountry_W == null)
                    {
                        _FkNationalityCountry_W = TearOff.FkNationalityCountry;
                    }
                    return _FkNationalityCountry_W;
                }
            }

            public WhereParameter SImagePath
            {
                get
                {
                    if (_SImagePath_W == null)
                    {
                        _SImagePath_W = TearOff.SImagePath;
                    }
                    return _SImagePath_W;
                }
            }

            public WhereParameter SFaceBookProfile
            {
                get
                {
                    if (_SFaceBookProfile_W == null)
                    {
                        _SFaceBookProfile_W = TearOff.SFaceBookProfile;
                    }
                    return _SFaceBookProfile_W;
                }
            }

            public WhereParameter SSkypeProfile
            {
                get
                {
                    if (_SSkypeProfile_W == null)
                    {
                        _SSkypeProfile_W = TearOff.SSkypeProfile;
                    }
                    return _SSkypeProfile_W;
                }
            }

            public WhereParameter STwitterProfile
            {
                get
                {
                    if (_STwitterProfile_W == null)
                    {
                        _STwitterProfile_W = TearOff.STwitterProfile;
                    }
                    return _STwitterProfile_W;
                }
            }

            public WhereParameter SMessengerProfile
            {
                get
                {
                    if (_SMessengerProfile_W == null)
                    {
                        _SMessengerProfile_W = TearOff.SMessengerProfile;
                    }
                    return _SMessengerProfile_W;
                }
            }

            public WhereParameter SActivationCode
            {
                get
                {
                    if (_SActivationCode_W == null)
                    {
                        _SActivationCode_W = TearOff.SActivationCode;
                    }
                    return _SActivationCode_W;
                }
            }

            public WhereParameter BActiveByUser
            {
                get
                {
                    if (_BActiveByUser_W == null)
                    {
                        _BActiveByUser_W = TearOff.BActiveByUser;
                    }
                    return _BActiveByUser_W;
                }
            }

            public WhereParameter BActiveByAdmin
            {
                get
                {
                    if (_BActiveByAdmin_W == null)
                    {
                        _BActiveByAdmin_W = TearOff.BActiveByAdmin;
                    }
                    return _BActiveByAdmin_W;
                }
            }

            public WhereParameter BActiveBonusDoc
            {
                get
                {
                    if (_BActiveBonusDoc_W == null)
                    {
                        _BActiveBonusDoc_W = TearOff.BActiveBonusDoc;
                    }
                    return _BActiveBonusDoc_W;
                }
            }

            public WhereParameter BBonusApprovedByDepartment
            {
                get
                {
                    if (_BBonusApprovedByDepartment_W == null)
                    {
                        _BBonusApprovedByDepartment_W = TearOff.BBonusApprovedByDepartment;
                    }
                    return _BBonusApprovedByDepartment_W;
                }
            }

            public WhereParameter BBonus
            {
                get
                {
                    if (_BBonus_W == null)
                    {
                        _BBonus_W = TearOff.BBonus;
                    }
                    return _BBonus_W;
                }
            }

            public WhereParameter FkActivatedByAdminID
            {
                get
                {
                    if (_FkActivatedByAdminID_W == null)
                    {
                        _FkActivatedByAdminID_W = TearOff.FkActivatedByAdminID;
                    }
                    return _FkActivatedByAdminID_W;
                }
            }

            public WhereParameter DCreateDate
            {
                get
                {
                    if (_DCreateDate_W == null)
                    {
                        _DCreateDate_W = TearOff.DCreateDate;
                    }
                    return _DCreateDate_W;
                }
            }

            public WhereParameter DModifiedDate
            {
                get
                {
                    if (_DModifiedDate_W == null)
                    {
                        _DModifiedDate_W = TearOff.DModifiedDate;
                    }
                    return _DModifiedDate_W;
                }
            }

            public WhereParameter SBonusNote
            {
                get
                {
                    if (_SBonusNote_W == null)
                    {
                        _SBonusNote_W = TearOff.SBonusNote;
                    }
                    return _SBonusNote_W;
                }
            }

            public WhereParameter FBonusAmount
            {
                get
                {
                    if (_FBonusAmount_W == null)
                    {
                        _FBonusAmount_W = TearOff.FBonusAmount;
                    }
                    return _FBonusAmount_W;
                }
            }

            private WhereParameter _PkUserID_W = null;
            private WhereParameter _SUsername_W = null;
            private WhereParameter _SPassword_W = null;
            private WhereParameter _SFirstName_W = null;
            private WhereParameter _SLastName_W = null;
            private WhereParameter _IGender_W = null;
            private WhereParameter _DOB_W = null;
            private WhereParameter _FkNationalityCountry_W = null;
            private WhereParameter _SImagePath_W = null;
            private WhereParameter _SFaceBookProfile_W = null;
            private WhereParameter _SSkypeProfile_W = null;
            private WhereParameter _STwitterProfile_W = null;
            private WhereParameter _SMessengerProfile_W = null;
            private WhereParameter _SActivationCode_W = null;
            private WhereParameter _BActiveByUser_W = null;
            private WhereParameter _BActiveByAdmin_W = null;
            private WhereParameter _BActiveBonusDoc_W = null;
            private WhereParameter _BBonusApprovedByDepartment_W = null;
            private WhereParameter _BBonus_W = null;
            private WhereParameter _FkActivatedByAdminID_W = null;
            private WhereParameter _DCreateDate_W = null;
            private WhereParameter _DModifiedDate_W = null;
            private WhereParameter _SBonusNote_W = null;
            private WhereParameter _FBonusAmount_W = null;

            public void WhereClauseReset()
            {
                _PkUserID_W = null;
                _SUsername_W = null;
                _SPassword_W = null;
                _SFirstName_W = null;
                _SLastName_W = null;
                _IGender_W = null;
                _DOB_W = null;
                _FkNationalityCountry_W = null;
                _SImagePath_W = null;
                _SFaceBookProfile_W = null;
                _SSkypeProfile_W = null;
                _STwitterProfile_W = null;
                _SMessengerProfile_W = null;
                _SActivationCode_W = null;
                _BActiveByUser_W = null;
                _BActiveByAdmin_W = null;
                _BActiveBonusDoc_W = null;
                _BBonusApprovedByDepartment_W = null;
                _BBonus_W = null;
                _FkActivatedByAdminID_W = null;
                _DCreateDate_W = null;
                _DModifiedDate_W = null;
                _SBonusNote_W = null;
                _FBonusAmount_W = null;

                this._entity.Query.FlushWhereParameters();

            }

            private BusinessEntity _entity;
            private TearOffWhereParameter _tearOff;

        }

        public WhereClause Where
        {
            get
            {
                if (_whereClause == null)
                {
                    _whereClause = new WhereClause(this);
                }

                return _whereClause;
            }
        }

        private WhereClause _whereClause = null;
        #endregion

        #region Aggregate Clause
        public class AggregateClause
        {
            public AggregateClause(BusinessEntity entity)
            {
                this._entity = entity;
            }

            public TearOffAggregateParameter TearOff
            {
                get
                {
                    if (_tearOff == null)
                    {
                        _tearOff = new TearOffAggregateParameter(this);
                    }

                    return _tearOff;
                }
            }

            #region AggregateParameter TearOff's
            public class TearOffAggregateParameter
            {
                public TearOffAggregateParameter(AggregateClause clause)
                {
                    this._clause = clause;
                }


                public AggregateParameter PkUserID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.PkUserID, Parameters.PkUserID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter SUsername
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.SUsername, Parameters.SUsername);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter SPassword
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.SPassword, Parameters.SPassword);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter SFirstName
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.SFirstName, Parameters.SFirstName);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter SLastName
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.SLastName, Parameters.SLastName);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter IGender
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.IGender, Parameters.IGender);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter DOB
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.DOB, Parameters.DOB);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter FkNationalityCountry
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.FkNationalityCountry, Parameters.FkNationalityCountry);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter SImagePath
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.SImagePath, Parameters.SImagePath);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter SFaceBookProfile
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.SFaceBookProfile, Parameters.SFaceBookProfile);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter SSkypeProfile
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.SSkypeProfile, Parameters.SSkypeProfile);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter STwitterProfile
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.STwitterProfile, Parameters.STwitterProfile);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter SMessengerProfile
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.SMessengerProfile, Parameters.SMessengerProfile);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter SActivationCode
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.SActivationCode, Parameters.SActivationCode);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter BActiveByUser
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.BActiveByUser, Parameters.BActiveByUser);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter BActiveByAdmin
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.BActiveByAdmin, Parameters.BActiveByAdmin);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter BActiveBonusDoc
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.BActiveBonusDoc, Parameters.BActiveBonusDoc);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter BBonusApprovedByDepartment
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.BBonusApprovedByDepartment, Parameters.BBonusApprovedByDepartment);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter BBonus
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.BBonus, Parameters.BBonus);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter FkActivatedByAdminID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.FkActivatedByAdminID, Parameters.FkActivatedByAdminID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter DCreateDate
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.DCreateDate, Parameters.DCreateDate);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter DModifiedDate
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.DModifiedDate, Parameters.DModifiedDate);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter SBonusNote
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.SBonusNote, Parameters.SBonusNote);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter FBonusAmount
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.FBonusAmount, Parameters.FBonusAmount);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }


                private AggregateClause _clause;
            }
            #endregion

            public AggregateParameter PkUserID
            {
                get
                {
                    if (_PkUserID_W == null)
                    {
                        _PkUserID_W = TearOff.PkUserID;
                    }
                    return _PkUserID_W;
                }
            }

            public AggregateParameter SUsername
            {
                get
                {
                    if (_SUsername_W == null)
                    {
                        _SUsername_W = TearOff.SUsername;
                    }
                    return _SUsername_W;
                }
            }

            public AggregateParameter SPassword
            {
                get
                {
                    if (_SPassword_W == null)
                    {
                        _SPassword_W = TearOff.SPassword;
                    }
                    return _SPassword_W;
                }
            }

            public AggregateParameter SFirstName
            {
                get
                {
                    if (_SFirstName_W == null)
                    {
                        _SFirstName_W = TearOff.SFirstName;
                    }
                    return _SFirstName_W;
                }
            }

            public AggregateParameter SLastName
            {
                get
                {
                    if (_SLastName_W == null)
                    {
                        _SLastName_W = TearOff.SLastName;
                    }
                    return _SLastName_W;
                }
            }

            public AggregateParameter IGender
            {
                get
                {
                    if (_IGender_W == null)
                    {
                        _IGender_W = TearOff.IGender;
                    }
                    return _IGender_W;
                }
            }

            public AggregateParameter DOB
            {
                get
                {
                    if (_DOB_W == null)
                    {
                        _DOB_W = TearOff.DOB;
                    }
                    return _DOB_W;
                }
            }

            public AggregateParameter FkNationalityCountry
            {
                get
                {
                    if (_FkNationalityCountry_W == null)
                    {
                        _FkNationalityCountry_W = TearOff.FkNationalityCountry;
                    }
                    return _FkNationalityCountry_W;
                }
            }

            public AggregateParameter SImagePath
            {
                get
                {
                    if (_SImagePath_W == null)
                    {
                        _SImagePath_W = TearOff.SImagePath;
                    }
                    return _SImagePath_W;
                }
            }

            public AggregateParameter SFaceBookProfile
            {
                get
                {
                    if (_SFaceBookProfile_W == null)
                    {
                        _SFaceBookProfile_W = TearOff.SFaceBookProfile;
                    }
                    return _SFaceBookProfile_W;
                }
            }

            public AggregateParameter SSkypeProfile
            {
                get
                {
                    if (_SSkypeProfile_W == null)
                    {
                        _SSkypeProfile_W = TearOff.SSkypeProfile;
                    }
                    return _SSkypeProfile_W;
                }
            }

            public AggregateParameter STwitterProfile
            {
                get
                {
                    if (_STwitterProfile_W == null)
                    {
                        _STwitterProfile_W = TearOff.STwitterProfile;
                    }
                    return _STwitterProfile_W;
                }
            }

            public AggregateParameter SMessengerProfile
            {
                get
                {
                    if (_SMessengerProfile_W == null)
                    {
                        _SMessengerProfile_W = TearOff.SMessengerProfile;
                    }
                    return _SMessengerProfile_W;
                }
            }

            public AggregateParameter SActivationCode
            {
                get
                {
                    if (_SActivationCode_W == null)
                    {
                        _SActivationCode_W = TearOff.SActivationCode;
                    }
                    return _SActivationCode_W;
                }
            }

            public AggregateParameter BActiveByUser
            {
                get
                {
                    if (_BActiveByUser_W == null)
                    {
                        _BActiveByUser_W = TearOff.BActiveByUser;
                    }
                    return _BActiveByUser_W;
                }
            }

            public AggregateParameter BActiveByAdmin
            {
                get
                {
                    if (_BActiveByAdmin_W == null)
                    {
                        _BActiveByAdmin_W = TearOff.BActiveByAdmin;
                    }
                    return _BActiveByAdmin_W;
                }
            }

            public AggregateParameter BActiveBonusDoc
            {
                get
                {
                    if (_BActiveBonusDoc_W == null)
                    {
                        _BActiveBonusDoc_W = TearOff.BActiveBonusDoc;
                    }
                    return _BActiveBonusDoc_W;
                }
            }

            public AggregateParameter BBonusApprovedByDepartment
            {
                get
                {
                    if (_BBonusApprovedByDepartment_W == null)
                    {
                        _BBonusApprovedByDepartment_W = TearOff.BBonusApprovedByDepartment;
                    }
                    return _BBonusApprovedByDepartment_W;
                }
            }

            public AggregateParameter BBonus
            {
                get
                {
                    if (_BBonus_W == null)
                    {
                        _BBonus_W = TearOff.BBonus;
                    }
                    return _BBonus_W;
                }
            }

            public AggregateParameter FkActivatedByAdminID
            {
                get
                {
                    if (_FkActivatedByAdminID_W == null)
                    {
                        _FkActivatedByAdminID_W = TearOff.FkActivatedByAdminID;
                    }
                    return _FkActivatedByAdminID_W;
                }
            }

            public AggregateParameter DCreateDate
            {
                get
                {
                    if (_DCreateDate_W == null)
                    {
                        _DCreateDate_W = TearOff.DCreateDate;
                    }
                    return _DCreateDate_W;
                }
            }

            public AggregateParameter DModifiedDate
            {
                get
                {
                    if (_DModifiedDate_W == null)
                    {
                        _DModifiedDate_W = TearOff.DModifiedDate;
                    }
                    return _DModifiedDate_W;
                }
            }

            public AggregateParameter SBonusNote
            {
                get
                {
                    if (_SBonusNote_W == null)
                    {
                        _SBonusNote_W = TearOff.SBonusNote;
                    }
                    return _SBonusNote_W;
                }
            }

            public AggregateParameter FBonusAmount
            {
                get
                {
                    if (_FBonusAmount_W == null)
                    {
                        _FBonusAmount_W = TearOff.FBonusAmount;
                    }
                    return _FBonusAmount_W;
                }
            }

            private AggregateParameter _PkUserID_W = null;
            private AggregateParameter _SUsername_W = null;
            private AggregateParameter _SPassword_W = null;
            private AggregateParameter _SFirstName_W = null;
            private AggregateParameter _SLastName_W = null;
            private AggregateParameter _IGender_W = null;
            private AggregateParameter _DOB_W = null;
            private AggregateParameter _FkNationalityCountry_W = null;
            private AggregateParameter _SImagePath_W = null;
            private AggregateParameter _SFaceBookProfile_W = null;
            private AggregateParameter _SSkypeProfile_W = null;
            private AggregateParameter _STwitterProfile_W = null;
            private AggregateParameter _SMessengerProfile_W = null;
            private AggregateParameter _SActivationCode_W = null;
            private AggregateParameter _BActiveByUser_W = null;
            private AggregateParameter _BActiveByAdmin_W = null;
            private AggregateParameter _BActiveBonusDoc_W = null;
            private AggregateParameter _BBonusApprovedByDepartment_W = null;
            private AggregateParameter _BBonus_W = null;
            private AggregateParameter _FkActivatedByAdminID_W = null;
            private AggregateParameter _DCreateDate_W = null;
            private AggregateParameter _DModifiedDate_W = null;
            private AggregateParameter _SBonusNote_W = null;
            private AggregateParameter _FBonusAmount_W = null;

            public void AggregateClauseReset()
            {
                _PkUserID_W = null;
                _SUsername_W = null;
                _SPassword_W = null;
                _SFirstName_W = null;
                _SLastName_W = null;
                _IGender_W = null;
                _DOB_W = null;
                _FkNationalityCountry_W = null;
                _SImagePath_W = null;
                _SFaceBookProfile_W = null;
                _SSkypeProfile_W = null;
                _STwitterProfile_W = null;
                _SMessengerProfile_W = null;
                _SActivationCode_W = null;
                _BActiveByUser_W = null;
                _BActiveByAdmin_W = null;
                _BActiveBonusDoc_W = null;
                _BBonusApprovedByDepartment_W = null;
                _BBonus_W = null;
                _FkActivatedByAdminID_W = null;
                _DCreateDate_W = null;
                _DModifiedDate_W = null;
                _SBonusNote_W = null;
                _FBonusAmount_W = null;

                this._entity.Query.FlushAggregateParameters();

            }

            private BusinessEntity _entity;
            private TearOffAggregateParameter _tearOff;

        }

        public AggregateClause Aggregate
        {
            get
            {
                if (_aggregateClause == null)
                {
                    _aggregateClause = new AggregateClause(this);
                }

                return _aggregateClause;
            }
        }

        private AggregateClause _aggregateClause = null;
        #endregion

        protected override IDbCommand GetInsertCommand()
        {

            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblUsersInsert]";

            CreateParameters(cmd);

            SqlParameter p;
            p = cmd.Parameters[Parameters.PkUserID.ParameterName];
            p.Direction = ParameterDirection.Output;

            return cmd;
        }

        protected override IDbCommand GetUpdateCommand()
        {

            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblUsersUpdate]";

            CreateParameters(cmd);

            return cmd;
        }

        protected override IDbCommand GetDeleteCommand()
        {

            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblUsersDelete]";

            SqlParameter p;
            p = cmd.Parameters.Add(Parameters.PkUserID);
            p.SourceColumn = ColumnNames.PkUserID;
            p.SourceVersion = DataRowVersion.Current;


            return cmd;
        }

        private IDbCommand CreateParameters(SqlCommand cmd)
        {
            SqlParameter p;

            p = cmd.Parameters.Add(Parameters.PkUserID);
            p.SourceColumn = ColumnNames.PkUserID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.SUsername);
            p.SourceColumn = ColumnNames.SUsername;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.SPassword);
            p.SourceColumn = ColumnNames.SPassword;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.SFirstName);
            p.SourceColumn = ColumnNames.SFirstName;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.SLastName);
            p.SourceColumn = ColumnNames.SLastName;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.IGender);
            p.SourceColumn = ColumnNames.IGender;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.DOB);
            p.SourceColumn = ColumnNames.DOB;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.FkNationalityCountry);
            p.SourceColumn = ColumnNames.FkNationalityCountry;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.SImagePath);
            p.SourceColumn = ColumnNames.SImagePath;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.SFaceBookProfile);
            p.SourceColumn = ColumnNames.SFaceBookProfile;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.SSkypeProfile);
            p.SourceColumn = ColumnNames.SSkypeProfile;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.STwitterProfile);
            p.SourceColumn = ColumnNames.STwitterProfile;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.SMessengerProfile);
            p.SourceColumn = ColumnNames.SMessengerProfile;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.SActivationCode);
            p.SourceColumn = ColumnNames.SActivationCode;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.BActiveByUser);
            p.SourceColumn = ColumnNames.BActiveByUser;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.BActiveByAdmin);
            p.SourceColumn = ColumnNames.BActiveByAdmin;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.BActiveBonusDoc);
            p.SourceColumn = ColumnNames.BActiveBonusDoc;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.BBonusApprovedByDepartment);
            p.SourceColumn = ColumnNames.BBonusApprovedByDepartment;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.BBonus);
            p.SourceColumn = ColumnNames.BBonus;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.FkActivatedByAdminID);
            p.SourceColumn = ColumnNames.FkActivatedByAdminID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.DCreateDate);
            p.SourceColumn = ColumnNames.DCreateDate;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.DModifiedDate);
            p.SourceColumn = ColumnNames.DModifiedDate;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.SBonusNote);
            p.SourceColumn = ColumnNames.SBonusNote;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.FBonusAmount);
            p.SourceColumn = ColumnNames.FBonusAmount;
            p.SourceVersion = DataRowVersion.Current;


            return cmd;
        }
    }
}
