
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.1.7.1)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace LC.Model.BMS.DAL
{
	public abstract class _tblSettings : SqlClientEntity
	{
		public _tblSettings()
		{
			this.QuerySource = "tblSettings";
			this.MappingName = "tblSettings";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tblSettingsLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int PkSettingID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.PkSettingID, PkSettingID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tblSettingsLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter PkSettingID
			{
				get
				{
					return new SqlParameter("@PkSettingID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter SBonus
			{
				get
				{
					return new SqlParameter("@SBonus", SqlDbType.NText, 1073741823);
				}
			}
			
			public static SqlParameter SContract
			{
				get
				{
					return new SqlParameter("@SContract", SqlDbType.NText, 1073741823);
				}
			}
			
			public static SqlParameter SModifiedDate
			{
				get
				{
					return new SqlParameter("@SModifiedDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter SCreatedDate
			{
				get
				{
					return new SqlParameter("@SCreatedDate", SqlDbType.DateTime, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string PkSettingID = "pkSettingID";
            public const string SBonus = "sBonus";
            public const string SContract = "sContract";
            public const string SModifiedDate = "sModifiedDate";
            public const string SCreatedDate = "SCreatedDate";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[PkSettingID] = _tblSettings.PropertyNames.PkSettingID;
					ht[SBonus] = _tblSettings.PropertyNames.SBonus;
					ht[SContract] = _tblSettings.PropertyNames.SContract;
					ht[SModifiedDate] = _tblSettings.PropertyNames.SModifiedDate;
					ht[SCreatedDate] = _tblSettings.PropertyNames.SCreatedDate;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string PkSettingID = "PkSettingID";
            public const string SBonus = "SBonus";
            public const string SContract = "SContract";
            public const string SModifiedDate = "SModifiedDate";
            public const string SCreatedDate = "SCreatedDate";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[PkSettingID] = _tblSettings.ColumnNames.PkSettingID;
					ht[SBonus] = _tblSettings.ColumnNames.SBonus;
					ht[SContract] = _tblSettings.ColumnNames.SContract;
					ht[SModifiedDate] = _tblSettings.ColumnNames.SModifiedDate;
					ht[SCreatedDate] = _tblSettings.ColumnNames.SCreatedDate;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string PkSettingID = "s_PkSettingID";
            public const string SBonus = "s_SBonus";
            public const string SContract = "s_SContract";
            public const string SModifiedDate = "s_SModifiedDate";
            public const string SCreatedDate = "s_SCreatedDate";

		}
		#endregion		
		
		#region Properties
	
		public virtual int PkSettingID
	    {
			get
	        {
				return base.Getint(ColumnNames.PkSettingID);
			}
			set
	        {
				base.Setint(ColumnNames.PkSettingID, value);
			}
		}

		public virtual string SBonus
	    {
			get
	        {
				return base.Getstring(ColumnNames.SBonus);
			}
			set
	        {
				base.Setstring(ColumnNames.SBonus, value);
			}
		}

		public virtual string SContract
	    {
			get
	        {
				return base.Getstring(ColumnNames.SContract);
			}
			set
	        {
				base.Setstring(ColumnNames.SContract, value);
			}
		}

		public virtual DateTime SModifiedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.SModifiedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.SModifiedDate, value);
			}
		}

		public virtual DateTime SCreatedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.SCreatedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.SCreatedDate, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_PkSettingID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PkSettingID) ? string.Empty : base.GetintAsString(ColumnNames.PkSettingID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PkSettingID);
				else
					this.PkSettingID = base.SetintAsString(ColumnNames.PkSettingID, value);
			}
		}

		public virtual string s_SBonus
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SBonus) ? string.Empty : base.GetstringAsString(ColumnNames.SBonus);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SBonus);
				else
					this.SBonus = base.SetstringAsString(ColumnNames.SBonus, value);
			}
		}

		public virtual string s_SContract
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SContract) ? string.Empty : base.GetstringAsString(ColumnNames.SContract);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SContract);
				else
					this.SContract = base.SetstringAsString(ColumnNames.SContract, value);
			}
		}

		public virtual string s_SModifiedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SModifiedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.SModifiedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SModifiedDate);
				else
					this.SModifiedDate = base.SetDateTimeAsString(ColumnNames.SModifiedDate, value);
			}
		}

		public virtual string s_SCreatedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SCreatedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.SCreatedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SCreatedDate);
				else
					this.SCreatedDate = base.SetDateTimeAsString(ColumnNames.SCreatedDate, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter PkSettingID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PkSettingID, Parameters.PkSettingID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SBonus
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SBonus, Parameters.SBonus);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SContract
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SContract, Parameters.SContract);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SModifiedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SModifiedDate, Parameters.SModifiedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SCreatedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SCreatedDate, Parameters.SCreatedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter PkSettingID
		    {
				get
		        {
					if(_PkSettingID_W == null)
	        	    {
						_PkSettingID_W = TearOff.PkSettingID;
					}
					return _PkSettingID_W;
				}
			}

			public WhereParameter SBonus
		    {
				get
		        {
					if(_SBonus_W == null)
	        	    {
						_SBonus_W = TearOff.SBonus;
					}
					return _SBonus_W;
				}
			}

			public WhereParameter SContract
		    {
				get
		        {
					if(_SContract_W == null)
	        	    {
						_SContract_W = TearOff.SContract;
					}
					return _SContract_W;
				}
			}

			public WhereParameter SModifiedDate
		    {
				get
		        {
					if(_SModifiedDate_W == null)
	        	    {
						_SModifiedDate_W = TearOff.SModifiedDate;
					}
					return _SModifiedDate_W;
				}
			}

			public WhereParameter SCreatedDate
		    {
				get
		        {
					if(_SCreatedDate_W == null)
	        	    {
						_SCreatedDate_W = TearOff.SCreatedDate;
					}
					return _SCreatedDate_W;
				}
			}

			private WhereParameter _PkSettingID_W = null;
			private WhereParameter _SBonus_W = null;
			private WhereParameter _SContract_W = null;
			private WhereParameter _SModifiedDate_W = null;
			private WhereParameter _SCreatedDate_W = null;

			public void WhereClauseReset()
			{
				_PkSettingID_W = null;
				_SBonus_W = null;
				_SContract_W = null;
				_SModifiedDate_W = null;
				_SCreatedDate_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter PkSettingID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PkSettingID, Parameters.PkSettingID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SBonus
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SBonus, Parameters.SBonus);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SContract
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SContract, Parameters.SContract);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SModifiedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SModifiedDate, Parameters.SModifiedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SCreatedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SCreatedDate, Parameters.SCreatedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter PkSettingID
		    {
				get
		        {
					if(_PkSettingID_W == null)
	        	    {
						_PkSettingID_W = TearOff.PkSettingID;
					}
					return _PkSettingID_W;
				}
			}

			public AggregateParameter SBonus
		    {
				get
		        {
					if(_SBonus_W == null)
	        	    {
						_SBonus_W = TearOff.SBonus;
					}
					return _SBonus_W;
				}
			}

			public AggregateParameter SContract
		    {
				get
		        {
					if(_SContract_W == null)
	        	    {
						_SContract_W = TearOff.SContract;
					}
					return _SContract_W;
				}
			}

			public AggregateParameter SModifiedDate
		    {
				get
		        {
					if(_SModifiedDate_W == null)
	        	    {
						_SModifiedDate_W = TearOff.SModifiedDate;
					}
					return _SModifiedDate_W;
				}
			}

			public AggregateParameter SCreatedDate
		    {
				get
		        {
					if(_SCreatedDate_W == null)
	        	    {
						_SCreatedDate_W = TearOff.SCreatedDate;
					}
					return _SCreatedDate_W;
				}
			}

			private AggregateParameter _PkSettingID_W = null;
			private AggregateParameter _SBonus_W = null;
			private AggregateParameter _SContract_W = null;
			private AggregateParameter _SModifiedDate_W = null;
			private AggregateParameter _SCreatedDate_W = null;

			public void AggregateClauseReset()
			{
				_PkSettingID_W = null;
				_SBonus_W = null;
				_SContract_W = null;
				_SModifiedDate_W = null;
				_SCreatedDate_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblSettingsInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.PkSettingID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblSettingsUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblSettingsDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.PkSettingID);
			p.SourceColumn = ColumnNames.PkSettingID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.PkSettingID);
			p.SourceColumn = ColumnNames.PkSettingID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SBonus);
			p.SourceColumn = ColumnNames.SBonus;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SContract);
			p.SourceColumn = ColumnNames.SContract;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SModifiedDate);
			p.SourceColumn = ColumnNames.SModifiedDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SCreatedDate);
			p.SourceColumn = ColumnNames.SCreatedDate;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
