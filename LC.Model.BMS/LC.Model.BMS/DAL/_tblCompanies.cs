
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.1.7.1)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace LC.Model.BMS.DAL
{
	public abstract class _tblCompanies : SqlClientEntity
	{
		public _tblCompanies()
		{
			this.QuerySource = "tblCompanies";
			this.MappingName = "tblCompanies";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tblCompaniesLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int PkCompanyID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.PkCompanyID, PkCompanyID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tblCompaniesLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter PkCompanyID
			{
				get
				{
					return new SqlParameter("@PkCompanyID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter CBrandName
			{
				get
				{
					return new SqlParameter("@CBrandName", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Logo
			{
				get
				{
					return new SqlParameter("@Logo", SqlDbType.NText, 1073741823);
				}
			}
			
			public static SqlParameter FkSuplierID
			{
				get
				{
					return new SqlParameter("@FkSuplierID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter CContactMethod_Email
			{
				get
				{
					return new SqlParameter("@CContactMethod_Email", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter CContactMethod_Fax
			{
				get
				{
					return new SqlParameter("@CContactMethod_Fax", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter CContactMethod_Phone
			{
				get
				{
					return new SqlParameter("@CContactMethod_Phone", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter DModifiedDate
			{
				get
				{
					return new SqlParameter("@DModifiedDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter DCreatedDate
			{
				get
				{
					return new SqlParameter("@DCreatedDate", SqlDbType.DateTime, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string PkCompanyID = "pkCompanyID";
            public const string CBrandName = "cBrandName";
            public const string Logo = "logo";
            public const string FkSuplierID = "fkSuplierID";
            public const string CContactMethod_Email = "cContactMethod_Email";
            public const string CContactMethod_Fax = "cContactMethod_Fax";
            public const string CContactMethod_Phone = "cContactMethod_Phone";
            public const string DModifiedDate = "dModifiedDate";
            public const string DCreatedDate = "dCreatedDate";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[PkCompanyID] = _tblCompanies.PropertyNames.PkCompanyID;
					ht[CBrandName] = _tblCompanies.PropertyNames.CBrandName;
					ht[Logo] = _tblCompanies.PropertyNames.Logo;
					ht[FkSuplierID] = _tblCompanies.PropertyNames.FkSuplierID;
					ht[CContactMethod_Email] = _tblCompanies.PropertyNames.CContactMethod_Email;
					ht[CContactMethod_Fax] = _tblCompanies.PropertyNames.CContactMethod_Fax;
					ht[CContactMethod_Phone] = _tblCompanies.PropertyNames.CContactMethod_Phone;
					ht[DModifiedDate] = _tblCompanies.PropertyNames.DModifiedDate;
					ht[DCreatedDate] = _tblCompanies.PropertyNames.DCreatedDate;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string PkCompanyID = "PkCompanyID";
            public const string CBrandName = "CBrandName";
            public const string Logo = "Logo";
            public const string FkSuplierID = "FkSuplierID";
            public const string CContactMethod_Email = "CContactMethod_Email";
            public const string CContactMethod_Fax = "CContactMethod_Fax";
            public const string CContactMethod_Phone = "CContactMethod_Phone";
            public const string DModifiedDate = "DModifiedDate";
            public const string DCreatedDate = "DCreatedDate";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[PkCompanyID] = _tblCompanies.ColumnNames.PkCompanyID;
					ht[CBrandName] = _tblCompanies.ColumnNames.CBrandName;
					ht[Logo] = _tblCompanies.ColumnNames.Logo;
					ht[FkSuplierID] = _tblCompanies.ColumnNames.FkSuplierID;
					ht[CContactMethod_Email] = _tblCompanies.ColumnNames.CContactMethod_Email;
					ht[CContactMethod_Fax] = _tblCompanies.ColumnNames.CContactMethod_Fax;
					ht[CContactMethod_Phone] = _tblCompanies.ColumnNames.CContactMethod_Phone;
					ht[DModifiedDate] = _tblCompanies.ColumnNames.DModifiedDate;
					ht[DCreatedDate] = _tblCompanies.ColumnNames.DCreatedDate;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string PkCompanyID = "s_PkCompanyID";
            public const string CBrandName = "s_CBrandName";
            public const string Logo = "s_Logo";
            public const string FkSuplierID = "s_FkSuplierID";
            public const string CContactMethod_Email = "s_CContactMethod_Email";
            public const string CContactMethod_Fax = "s_CContactMethod_Fax";
            public const string CContactMethod_Phone = "s_CContactMethod_Phone";
            public const string DModifiedDate = "s_DModifiedDate";
            public const string DCreatedDate = "s_DCreatedDate";

		}
		#endregion		
		
		#region Properties
	
		public virtual int PkCompanyID
	    {
			get
	        {
				return base.Getint(ColumnNames.PkCompanyID);
			}
			set
	        {
				base.Setint(ColumnNames.PkCompanyID, value);
			}
		}

		public virtual string CBrandName
	    {
			get
	        {
				return base.Getstring(ColumnNames.CBrandName);
			}
			set
	        {
				base.Setstring(ColumnNames.CBrandName, value);
			}
		}

		public virtual string Logo
	    {
			get
	        {
				return base.Getstring(ColumnNames.Logo);
			}
			set
	        {
				base.Setstring(ColumnNames.Logo, value);
			}
		}

		public virtual int FkSuplierID
	    {
			get
	        {
				return base.Getint(ColumnNames.FkSuplierID);
			}
			set
	        {
				base.Setint(ColumnNames.FkSuplierID, value);
			}
		}

		public virtual bool CContactMethod_Email
	    {
			get
	        {
				return base.Getbool(ColumnNames.CContactMethod_Email);
			}
			set
	        {
				base.Setbool(ColumnNames.CContactMethod_Email, value);
			}
		}

		public virtual bool CContactMethod_Fax
	    {
			get
	        {
				return base.Getbool(ColumnNames.CContactMethod_Fax);
			}
			set
	        {
				base.Setbool(ColumnNames.CContactMethod_Fax, value);
			}
		}

		public virtual bool CContactMethod_Phone
	    {
			get
	        {
				return base.Getbool(ColumnNames.CContactMethod_Phone);
			}
			set
	        {
				base.Setbool(ColumnNames.CContactMethod_Phone, value);
			}
		}

		public virtual DateTime DModifiedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.DModifiedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.DModifiedDate, value);
			}
		}

		public virtual DateTime DCreatedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.DCreatedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.DCreatedDate, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_PkCompanyID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PkCompanyID) ? string.Empty : base.GetintAsString(ColumnNames.PkCompanyID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PkCompanyID);
				else
					this.PkCompanyID = base.SetintAsString(ColumnNames.PkCompanyID, value);
			}
		}

		public virtual string s_CBrandName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CBrandName) ? string.Empty : base.GetstringAsString(ColumnNames.CBrandName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CBrandName);
				else
					this.CBrandName = base.SetstringAsString(ColumnNames.CBrandName, value);
			}
		}

		public virtual string s_Logo
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Logo) ? string.Empty : base.GetstringAsString(ColumnNames.Logo);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Logo);
				else
					this.Logo = base.SetstringAsString(ColumnNames.Logo, value);
			}
		}

		public virtual string s_FkSuplierID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FkSuplierID) ? string.Empty : base.GetintAsString(ColumnNames.FkSuplierID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FkSuplierID);
				else
					this.FkSuplierID = base.SetintAsString(ColumnNames.FkSuplierID, value);
			}
		}

		public virtual string s_CContactMethod_Email
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CContactMethod_Email) ? string.Empty : base.GetboolAsString(ColumnNames.CContactMethod_Email);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CContactMethod_Email);
				else
					this.CContactMethod_Email = base.SetboolAsString(ColumnNames.CContactMethod_Email, value);
			}
		}

		public virtual string s_CContactMethod_Fax
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CContactMethod_Fax) ? string.Empty : base.GetboolAsString(ColumnNames.CContactMethod_Fax);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CContactMethod_Fax);
				else
					this.CContactMethod_Fax = base.SetboolAsString(ColumnNames.CContactMethod_Fax, value);
			}
		}

		public virtual string s_CContactMethod_Phone
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CContactMethod_Phone) ? string.Empty : base.GetboolAsString(ColumnNames.CContactMethod_Phone);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CContactMethod_Phone);
				else
					this.CContactMethod_Phone = base.SetboolAsString(ColumnNames.CContactMethod_Phone, value);
			}
		}

		public virtual string s_DModifiedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DModifiedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DModifiedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DModifiedDate);
				else
					this.DModifiedDate = base.SetDateTimeAsString(ColumnNames.DModifiedDate, value);
			}
		}

		public virtual string s_DCreatedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DCreatedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DCreatedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DCreatedDate);
				else
					this.DCreatedDate = base.SetDateTimeAsString(ColumnNames.DCreatedDate, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter PkCompanyID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PkCompanyID, Parameters.PkCompanyID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CBrandName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CBrandName, Parameters.CBrandName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Logo
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Logo, Parameters.Logo);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FkSuplierID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FkSuplierID, Parameters.FkSuplierID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CContactMethod_Email
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CContactMethod_Email, Parameters.CContactMethod_Email);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CContactMethod_Fax
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CContactMethod_Fax, Parameters.CContactMethod_Fax);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CContactMethod_Phone
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CContactMethod_Phone, Parameters.CContactMethod_Phone);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DModifiedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DModifiedDate, Parameters.DModifiedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DCreatedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DCreatedDate, Parameters.DCreatedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter PkCompanyID
		    {
				get
		        {
					if(_PkCompanyID_W == null)
	        	    {
						_PkCompanyID_W = TearOff.PkCompanyID;
					}
					return _PkCompanyID_W;
				}
			}

			public WhereParameter CBrandName
		    {
				get
		        {
					if(_CBrandName_W == null)
	        	    {
						_CBrandName_W = TearOff.CBrandName;
					}
					return _CBrandName_W;
				}
			}

			public WhereParameter Logo
		    {
				get
		        {
					if(_Logo_W == null)
	        	    {
						_Logo_W = TearOff.Logo;
					}
					return _Logo_W;
				}
			}

			public WhereParameter FkSuplierID
		    {
				get
		        {
					if(_FkSuplierID_W == null)
	        	    {
						_FkSuplierID_W = TearOff.FkSuplierID;
					}
					return _FkSuplierID_W;
				}
			}

			public WhereParameter CContactMethod_Email
		    {
				get
		        {
					if(_CContactMethod_Email_W == null)
	        	    {
						_CContactMethod_Email_W = TearOff.CContactMethod_Email;
					}
					return _CContactMethod_Email_W;
				}
			}

			public WhereParameter CContactMethod_Fax
		    {
				get
		        {
					if(_CContactMethod_Fax_W == null)
	        	    {
						_CContactMethod_Fax_W = TearOff.CContactMethod_Fax;
					}
					return _CContactMethod_Fax_W;
				}
			}

			public WhereParameter CContactMethod_Phone
		    {
				get
		        {
					if(_CContactMethod_Phone_W == null)
	        	    {
						_CContactMethod_Phone_W = TearOff.CContactMethod_Phone;
					}
					return _CContactMethod_Phone_W;
				}
			}

			public WhereParameter DModifiedDate
		    {
				get
		        {
					if(_DModifiedDate_W == null)
	        	    {
						_DModifiedDate_W = TearOff.DModifiedDate;
					}
					return _DModifiedDate_W;
				}
			}

			public WhereParameter DCreatedDate
		    {
				get
		        {
					if(_DCreatedDate_W == null)
	        	    {
						_DCreatedDate_W = TearOff.DCreatedDate;
					}
					return _DCreatedDate_W;
				}
			}

			private WhereParameter _PkCompanyID_W = null;
			private WhereParameter _CBrandName_W = null;
			private WhereParameter _Logo_W = null;
			private WhereParameter _FkSuplierID_W = null;
			private WhereParameter _CContactMethod_Email_W = null;
			private WhereParameter _CContactMethod_Fax_W = null;
			private WhereParameter _CContactMethod_Phone_W = null;
			private WhereParameter _DModifiedDate_W = null;
			private WhereParameter _DCreatedDate_W = null;

			public void WhereClauseReset()
			{
				_PkCompanyID_W = null;
				_CBrandName_W = null;
				_Logo_W = null;
				_FkSuplierID_W = null;
				_CContactMethod_Email_W = null;
				_CContactMethod_Fax_W = null;
				_CContactMethod_Phone_W = null;
				_DModifiedDate_W = null;
				_DCreatedDate_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter PkCompanyID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PkCompanyID, Parameters.PkCompanyID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CBrandName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CBrandName, Parameters.CBrandName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Logo
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Logo, Parameters.Logo);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FkSuplierID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FkSuplierID, Parameters.FkSuplierID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CContactMethod_Email
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CContactMethod_Email, Parameters.CContactMethod_Email);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CContactMethod_Fax
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CContactMethod_Fax, Parameters.CContactMethod_Fax);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CContactMethod_Phone
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CContactMethod_Phone, Parameters.CContactMethod_Phone);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DModifiedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DModifiedDate, Parameters.DModifiedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DCreatedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DCreatedDate, Parameters.DCreatedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter PkCompanyID
		    {
				get
		        {
					if(_PkCompanyID_W == null)
	        	    {
						_PkCompanyID_W = TearOff.PkCompanyID;
					}
					return _PkCompanyID_W;
				}
			}

			public AggregateParameter CBrandName
		    {
				get
		        {
					if(_CBrandName_W == null)
	        	    {
						_CBrandName_W = TearOff.CBrandName;
					}
					return _CBrandName_W;
				}
			}

			public AggregateParameter Logo
		    {
				get
		        {
					if(_Logo_W == null)
	        	    {
						_Logo_W = TearOff.Logo;
					}
					return _Logo_W;
				}
			}

			public AggregateParameter FkSuplierID
		    {
				get
		        {
					if(_FkSuplierID_W == null)
	        	    {
						_FkSuplierID_W = TearOff.FkSuplierID;
					}
					return _FkSuplierID_W;
				}
			}

			public AggregateParameter CContactMethod_Email
		    {
				get
		        {
					if(_CContactMethod_Email_W == null)
	        	    {
						_CContactMethod_Email_W = TearOff.CContactMethod_Email;
					}
					return _CContactMethod_Email_W;
				}
			}

			public AggregateParameter CContactMethod_Fax
		    {
				get
		        {
					if(_CContactMethod_Fax_W == null)
	        	    {
						_CContactMethod_Fax_W = TearOff.CContactMethod_Fax;
					}
					return _CContactMethod_Fax_W;
				}
			}

			public AggregateParameter CContactMethod_Phone
		    {
				get
		        {
					if(_CContactMethod_Phone_W == null)
	        	    {
						_CContactMethod_Phone_W = TearOff.CContactMethod_Phone;
					}
					return _CContactMethod_Phone_W;
				}
			}

			public AggregateParameter DModifiedDate
		    {
				get
		        {
					if(_DModifiedDate_W == null)
	        	    {
						_DModifiedDate_W = TearOff.DModifiedDate;
					}
					return _DModifiedDate_W;
				}
			}

			public AggregateParameter DCreatedDate
		    {
				get
		        {
					if(_DCreatedDate_W == null)
	        	    {
						_DCreatedDate_W = TearOff.DCreatedDate;
					}
					return _DCreatedDate_W;
				}
			}

			private AggregateParameter _PkCompanyID_W = null;
			private AggregateParameter _CBrandName_W = null;
			private AggregateParameter _Logo_W = null;
			private AggregateParameter _FkSuplierID_W = null;
			private AggregateParameter _CContactMethod_Email_W = null;
			private AggregateParameter _CContactMethod_Fax_W = null;
			private AggregateParameter _CContactMethod_Phone_W = null;
			private AggregateParameter _DModifiedDate_W = null;
			private AggregateParameter _DCreatedDate_W = null;

			public void AggregateClauseReset()
			{
				_PkCompanyID_W = null;
				_CBrandName_W = null;
				_Logo_W = null;
				_FkSuplierID_W = null;
				_CContactMethod_Email_W = null;
				_CContactMethod_Fax_W = null;
				_CContactMethod_Phone_W = null;
				_DModifiedDate_W = null;
				_DCreatedDate_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblCompaniesInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.PkCompanyID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblCompaniesUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblCompaniesDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.PkCompanyID);
			p.SourceColumn = ColumnNames.PkCompanyID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.PkCompanyID);
			p.SourceColumn = ColumnNames.PkCompanyID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CBrandName);
			p.SourceColumn = ColumnNames.CBrandName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Logo);
			p.SourceColumn = ColumnNames.Logo;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FkSuplierID);
			p.SourceColumn = ColumnNames.FkSuplierID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CContactMethod_Email);
			p.SourceColumn = ColumnNames.CContactMethod_Email;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CContactMethod_Fax);
			p.SourceColumn = ColumnNames.CContactMethod_Fax;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CContactMethod_Phone);
			p.SourceColumn = ColumnNames.CContactMethod_Phone;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DModifiedDate);
			p.SourceColumn = ColumnNames.DModifiedDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DCreatedDate);
			p.SourceColumn = ColumnNames.DCreatedDate;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
