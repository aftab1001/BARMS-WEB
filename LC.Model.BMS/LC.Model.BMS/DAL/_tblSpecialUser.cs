
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.1.7.1)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace LC.Model.BMS.DAL
{
	public abstract class _tblSpecialUser : SqlClientEntity
	{
		public _tblSpecialUser()
		{
			this.QuerySource = "tblSpecialUser";
			this.MappingName = "tblSpecialUser";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tblSpecialUserLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int PkSpecialUserID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.PkSpecialUserID, PkSpecialUserID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tblSpecialUserLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter PkSpecialUserID
			{
				get
				{
					return new SqlParameter("@PkSpecialUserID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter SFirstName
			{
				get
				{
					return new SqlParameter("@SFirstName", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter SLastName
			{
				get
				{
					return new SqlParameter("@SLastName", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter IGender
			{
				get
				{
					return new SqlParameter("@IGender", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter DOB
			{
				get
				{
					return new SqlParameter("@DOB", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter FkNationalityCountry
			{
				get
				{
					return new SqlParameter("@FkNationalityCountry", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter SPhone
			{
				get
				{
					return new SqlParameter("@SPhone", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter SEmail
			{
				get
				{
					return new SqlParameter("@SEmail", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter SAddressStreet
			{
				get
				{
					return new SqlParameter("@SAddressStreet", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter SAddressTown
			{
				get
				{
					return new SqlParameter("@SAddressTown", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter SAddressPostCode
			{
				get
				{
					return new SqlParameter("@SAddressPostCode", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter SAddressRegion
			{
				get
				{
					return new SqlParameter("@SAddressRegion", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter FkAddressCountry
			{
				get
				{
					return new SqlParameter("@FkAddressCountry", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter FkAccessLevelID
			{
				get
				{
					return new SqlParameter("@FkAccessLevelID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter FkDepartmentID
			{
				get
				{
					return new SqlParameter("@FkDepartmentID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter FkSpecialityTypeID
			{
				get
				{
					return new SqlParameter("@FkSpecialityTypeID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter SImagePath
			{
				get
				{
					return new SqlParameter("@SImagePath", SqlDbType.NVarChar, 150);
				}
			}
			
			public static SqlParameter BActiveByAdmin
			{
				get
				{
					return new SqlParameter("@BActiveByAdmin", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter FkActivatedByAdminID
			{
				get
				{
					return new SqlParameter("@FkActivatedByAdminID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter DCreateDate
			{
				get
				{
					return new SqlParameter("@DCreateDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter DModifiedDate
			{
				get
				{
					return new SqlParameter("@DModifiedDate", SqlDbType.DateTime, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string PkSpecialUserID = "pkSpecialUserID";
            public const string SFirstName = "sFirstName";
            public const string SLastName = "sLastName";
            public const string IGender = "iGender";
            public const string DOB = "DOB";
            public const string FkNationalityCountry = "fkNationalityCountry";
            public const string SPhone = "sPhone";
            public const string SEmail = "sEmail";
            public const string SAddressStreet = "sAddressStreet";
            public const string SAddressTown = "sAddressTown";
            public const string SAddressPostCode = "sAddressPostCode";
            public const string SAddressRegion = "sAddressRegion";
            public const string FkAddressCountry = "fkAddressCountry";
            public const string FkAccessLevelID = "fkAccessLevelID";
            public const string FkDepartmentID = "FkDepartmentID";
            public const string FkSpecialityTypeID = "FkSpecialityTypeID";
            public const string SImagePath = "sImagePath";
            public const string BActiveByAdmin = "bActiveByAdmin";
            public const string FkActivatedByAdminID = "fkActivatedByAdminID";
            public const string DCreateDate = "dCreateDate";
            public const string DModifiedDate = "dModifiedDate";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[PkSpecialUserID] = _tblSpecialUser.PropertyNames.PkSpecialUserID;
					ht[SFirstName] = _tblSpecialUser.PropertyNames.SFirstName;
					ht[SLastName] = _tblSpecialUser.PropertyNames.SLastName;
					ht[IGender] = _tblSpecialUser.PropertyNames.IGender;
					ht[DOB] = _tblSpecialUser.PropertyNames.DOB;
					ht[FkNationalityCountry] = _tblSpecialUser.PropertyNames.FkNationalityCountry;
					ht[SPhone] = _tblSpecialUser.PropertyNames.SPhone;
					ht[SEmail] = _tblSpecialUser.PropertyNames.SEmail;
					ht[SAddressStreet] = _tblSpecialUser.PropertyNames.SAddressStreet;
					ht[SAddressTown] = _tblSpecialUser.PropertyNames.SAddressTown;
					ht[SAddressPostCode] = _tblSpecialUser.PropertyNames.SAddressPostCode;
					ht[SAddressRegion] = _tblSpecialUser.PropertyNames.SAddressRegion;
					ht[FkAddressCountry] = _tblSpecialUser.PropertyNames.FkAddressCountry;
					ht[FkAccessLevelID] = _tblSpecialUser.PropertyNames.FkAccessLevelID;
					ht[FkDepartmentID] = _tblSpecialUser.PropertyNames.FkDepartmentID;
					ht[FkSpecialityTypeID] = _tblSpecialUser.PropertyNames.FkSpecialityTypeID;
					ht[SImagePath] = _tblSpecialUser.PropertyNames.SImagePath;
					ht[BActiveByAdmin] = _tblSpecialUser.PropertyNames.BActiveByAdmin;
					ht[FkActivatedByAdminID] = _tblSpecialUser.PropertyNames.FkActivatedByAdminID;
					ht[DCreateDate] = _tblSpecialUser.PropertyNames.DCreateDate;
					ht[DModifiedDate] = _tblSpecialUser.PropertyNames.DModifiedDate;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string PkSpecialUserID = "PkSpecialUserID";
            public const string SFirstName = "SFirstName";
            public const string SLastName = "SLastName";
            public const string IGender = "IGender";
            public const string DOB = "DOB";
            public const string FkNationalityCountry = "FkNationalityCountry";
            public const string SPhone = "SPhone";
            public const string SEmail = "SEmail";
            public const string SAddressStreet = "SAddressStreet";
            public const string SAddressTown = "SAddressTown";
            public const string SAddressPostCode = "SAddressPostCode";
            public const string SAddressRegion = "SAddressRegion";
            public const string FkAddressCountry = "FkAddressCountry";
            public const string FkAccessLevelID = "FkAccessLevelID";
            public const string FkDepartmentID = "FkDepartmentID";
            public const string FkSpecialityTypeID = "FkSpecialityTypeID";
            public const string SImagePath = "SImagePath";
            public const string BActiveByAdmin = "BActiveByAdmin";
            public const string FkActivatedByAdminID = "FkActivatedByAdminID";
            public const string DCreateDate = "DCreateDate";
            public const string DModifiedDate = "DModifiedDate";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[PkSpecialUserID] = _tblSpecialUser.ColumnNames.PkSpecialUserID;
					ht[SFirstName] = _tblSpecialUser.ColumnNames.SFirstName;
					ht[SLastName] = _tblSpecialUser.ColumnNames.SLastName;
					ht[IGender] = _tblSpecialUser.ColumnNames.IGender;
					ht[DOB] = _tblSpecialUser.ColumnNames.DOB;
					ht[FkNationalityCountry] = _tblSpecialUser.ColumnNames.FkNationalityCountry;
					ht[SPhone] = _tblSpecialUser.ColumnNames.SPhone;
					ht[SEmail] = _tblSpecialUser.ColumnNames.SEmail;
					ht[SAddressStreet] = _tblSpecialUser.ColumnNames.SAddressStreet;
					ht[SAddressTown] = _tblSpecialUser.ColumnNames.SAddressTown;
					ht[SAddressPostCode] = _tblSpecialUser.ColumnNames.SAddressPostCode;
					ht[SAddressRegion] = _tblSpecialUser.ColumnNames.SAddressRegion;
					ht[FkAddressCountry] = _tblSpecialUser.ColumnNames.FkAddressCountry;
					ht[FkAccessLevelID] = _tblSpecialUser.ColumnNames.FkAccessLevelID;
					ht[FkDepartmentID] = _tblSpecialUser.ColumnNames.FkDepartmentID;
					ht[FkSpecialityTypeID] = _tblSpecialUser.ColumnNames.FkSpecialityTypeID;
					ht[SImagePath] = _tblSpecialUser.ColumnNames.SImagePath;
					ht[BActiveByAdmin] = _tblSpecialUser.ColumnNames.BActiveByAdmin;
					ht[FkActivatedByAdminID] = _tblSpecialUser.ColumnNames.FkActivatedByAdminID;
					ht[DCreateDate] = _tblSpecialUser.ColumnNames.DCreateDate;
					ht[DModifiedDate] = _tblSpecialUser.ColumnNames.DModifiedDate;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string PkSpecialUserID = "s_PkSpecialUserID";
            public const string SFirstName = "s_SFirstName";
            public const string SLastName = "s_SLastName";
            public const string IGender = "s_IGender";
            public const string DOB = "s_DOB";
            public const string FkNationalityCountry = "s_FkNationalityCountry";
            public const string SPhone = "s_SPhone";
            public const string SEmail = "s_SEmail";
            public const string SAddressStreet = "s_SAddressStreet";
            public const string SAddressTown = "s_SAddressTown";
            public const string SAddressPostCode = "s_SAddressPostCode";
            public const string SAddressRegion = "s_SAddressRegion";
            public const string FkAddressCountry = "s_FkAddressCountry";
            public const string FkAccessLevelID = "s_FkAccessLevelID";
            public const string FkDepartmentID = "s_FkDepartmentID";
            public const string FkSpecialityTypeID = "s_FkSpecialityTypeID";
            public const string SImagePath = "s_SImagePath";
            public const string BActiveByAdmin = "s_BActiveByAdmin";
            public const string FkActivatedByAdminID = "s_FkActivatedByAdminID";
            public const string DCreateDate = "s_DCreateDate";
            public const string DModifiedDate = "s_DModifiedDate";

		}
		#endregion		
		
		#region Properties
	
		public virtual int PkSpecialUserID
	    {
			get
	        {
				return base.Getint(ColumnNames.PkSpecialUserID);
			}
			set
	        {
				base.Setint(ColumnNames.PkSpecialUserID, value);
			}
		}

		public virtual string SFirstName
	    {
			get
	        {
				return base.Getstring(ColumnNames.SFirstName);
			}
			set
	        {
				base.Setstring(ColumnNames.SFirstName, value);
			}
		}

		public virtual string SLastName
	    {
			get
	        {
				return base.Getstring(ColumnNames.SLastName);
			}
			set
	        {
				base.Setstring(ColumnNames.SLastName, value);
			}
		}

		public virtual int IGender
	    {
			get
	        {
				return base.Getint(ColumnNames.IGender);
			}
			set
	        {
				base.Setint(ColumnNames.IGender, value);
			}
		}

		public virtual DateTime DOB
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.DOB);
			}
			set
	        {
				base.SetDateTime(ColumnNames.DOB, value);
			}
		}

		public virtual int FkNationalityCountry
	    {
			get
	        {
				return base.Getint(ColumnNames.FkNationalityCountry);
			}
			set
	        {
				base.Setint(ColumnNames.FkNationalityCountry, value);
			}
		}

		public virtual string SPhone
	    {
			get
	        {
				return base.Getstring(ColumnNames.SPhone);
			}
			set
	        {
				base.Setstring(ColumnNames.SPhone, value);
			}
		}

		public virtual string SEmail
	    {
			get
	        {
				return base.Getstring(ColumnNames.SEmail);
			}
			set
	        {
				base.Setstring(ColumnNames.SEmail, value);
			}
		}

		public virtual string SAddressStreet
	    {
			get
	        {
				return base.Getstring(ColumnNames.SAddressStreet);
			}
			set
	        {
				base.Setstring(ColumnNames.SAddressStreet, value);
			}
		}

		public virtual string SAddressTown
	    {
			get
	        {
				return base.Getstring(ColumnNames.SAddressTown);
			}
			set
	        {
				base.Setstring(ColumnNames.SAddressTown, value);
			}
		}

		public virtual string SAddressPostCode
	    {
			get
	        {
				return base.Getstring(ColumnNames.SAddressPostCode);
			}
			set
	        {
				base.Setstring(ColumnNames.SAddressPostCode, value);
			}
		}

		public virtual string SAddressRegion
	    {
			get
	        {
				return base.Getstring(ColumnNames.SAddressRegion);
			}
			set
	        {
				base.Setstring(ColumnNames.SAddressRegion, value);
			}
		}

		public virtual string FkAddressCountry
	    {
			get
	        {
				return base.Getstring(ColumnNames.FkAddressCountry);
			}
			set
	        {
				base.Setstring(ColumnNames.FkAddressCountry, value);
			}
		}

		public virtual int FkAccessLevelID
	    {
			get
	        {
				return base.Getint(ColumnNames.FkAccessLevelID);
			}
			set
	        {
				base.Setint(ColumnNames.FkAccessLevelID, value);
			}
		}

		public virtual int FkDepartmentID
	    {
			get
	        {
				return base.Getint(ColumnNames.FkDepartmentID);
			}
			set
	        {
				base.Setint(ColumnNames.FkDepartmentID, value);
			}
		}

		public virtual int FkSpecialityTypeID
	    {
			get
	        {
				return base.Getint(ColumnNames.FkSpecialityTypeID);
			}
			set
	        {
				base.Setint(ColumnNames.FkSpecialityTypeID, value);
			}
		}

		public virtual string SImagePath
	    {
			get
	        {
				return base.Getstring(ColumnNames.SImagePath);
			}
			set
	        {
				base.Setstring(ColumnNames.SImagePath, value);
			}
		}

		public virtual bool BActiveByAdmin
	    {
			get
	        {
				return base.Getbool(ColumnNames.BActiveByAdmin);
			}
			set
	        {
				base.Setbool(ColumnNames.BActiveByAdmin, value);
			}
		}

		public virtual int FkActivatedByAdminID
	    {
			get
	        {
				return base.Getint(ColumnNames.FkActivatedByAdminID);
			}
			set
	        {
				base.Setint(ColumnNames.FkActivatedByAdminID, value);
			}
		}

		public virtual DateTime DCreateDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.DCreateDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.DCreateDate, value);
			}
		}

		public virtual DateTime DModifiedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.DModifiedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.DModifiedDate, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_PkSpecialUserID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PkSpecialUserID) ? string.Empty : base.GetintAsString(ColumnNames.PkSpecialUserID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PkSpecialUserID);
				else
					this.PkSpecialUserID = base.SetintAsString(ColumnNames.PkSpecialUserID, value);
			}
		}

		public virtual string s_SFirstName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SFirstName) ? string.Empty : base.GetstringAsString(ColumnNames.SFirstName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SFirstName);
				else
					this.SFirstName = base.SetstringAsString(ColumnNames.SFirstName, value);
			}
		}

		public virtual string s_SLastName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SLastName) ? string.Empty : base.GetstringAsString(ColumnNames.SLastName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SLastName);
				else
					this.SLastName = base.SetstringAsString(ColumnNames.SLastName, value);
			}
		}

		public virtual string s_IGender
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IGender) ? string.Empty : base.GetintAsString(ColumnNames.IGender);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IGender);
				else
					this.IGender = base.SetintAsString(ColumnNames.IGender, value);
			}
		}

		public virtual string s_DOB
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DOB) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DOB);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DOB);
				else
					this.DOB = base.SetDateTimeAsString(ColumnNames.DOB, value);
			}
		}

		public virtual string s_FkNationalityCountry
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FkNationalityCountry) ? string.Empty : base.GetintAsString(ColumnNames.FkNationalityCountry);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FkNationalityCountry);
				else
					this.FkNationalityCountry = base.SetintAsString(ColumnNames.FkNationalityCountry, value);
			}
		}

		public virtual string s_SPhone
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SPhone) ? string.Empty : base.GetstringAsString(ColumnNames.SPhone);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SPhone);
				else
					this.SPhone = base.SetstringAsString(ColumnNames.SPhone, value);
			}
		}

		public virtual string s_SEmail
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SEmail) ? string.Empty : base.GetstringAsString(ColumnNames.SEmail);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SEmail);
				else
					this.SEmail = base.SetstringAsString(ColumnNames.SEmail, value);
			}
		}

		public virtual string s_SAddressStreet
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SAddressStreet) ? string.Empty : base.GetstringAsString(ColumnNames.SAddressStreet);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SAddressStreet);
				else
					this.SAddressStreet = base.SetstringAsString(ColumnNames.SAddressStreet, value);
			}
		}

		public virtual string s_SAddressTown
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SAddressTown) ? string.Empty : base.GetstringAsString(ColumnNames.SAddressTown);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SAddressTown);
				else
					this.SAddressTown = base.SetstringAsString(ColumnNames.SAddressTown, value);
			}
		}

		public virtual string s_SAddressPostCode
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SAddressPostCode) ? string.Empty : base.GetstringAsString(ColumnNames.SAddressPostCode);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SAddressPostCode);
				else
					this.SAddressPostCode = base.SetstringAsString(ColumnNames.SAddressPostCode, value);
			}
		}

		public virtual string s_SAddressRegion
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SAddressRegion) ? string.Empty : base.GetstringAsString(ColumnNames.SAddressRegion);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SAddressRegion);
				else
					this.SAddressRegion = base.SetstringAsString(ColumnNames.SAddressRegion, value);
			}
		}

		public virtual string s_FkAddressCountry
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FkAddressCountry) ? string.Empty : base.GetstringAsString(ColumnNames.FkAddressCountry);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FkAddressCountry);
				else
					this.FkAddressCountry = base.SetstringAsString(ColumnNames.FkAddressCountry, value);
			}
		}

		public virtual string s_FkAccessLevelID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FkAccessLevelID) ? string.Empty : base.GetintAsString(ColumnNames.FkAccessLevelID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FkAccessLevelID);
				else
					this.FkAccessLevelID = base.SetintAsString(ColumnNames.FkAccessLevelID, value);
			}
		}

		public virtual string s_FkDepartmentID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FkDepartmentID) ? string.Empty : base.GetintAsString(ColumnNames.FkDepartmentID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FkDepartmentID);
				else
					this.FkDepartmentID = base.SetintAsString(ColumnNames.FkDepartmentID, value);
			}
		}

		public virtual string s_FkSpecialityTypeID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FkSpecialityTypeID) ? string.Empty : base.GetintAsString(ColumnNames.FkSpecialityTypeID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FkSpecialityTypeID);
				else
					this.FkSpecialityTypeID = base.SetintAsString(ColumnNames.FkSpecialityTypeID, value);
			}
		}

		public virtual string s_SImagePath
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SImagePath) ? string.Empty : base.GetstringAsString(ColumnNames.SImagePath);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SImagePath);
				else
					this.SImagePath = base.SetstringAsString(ColumnNames.SImagePath, value);
			}
		}

		public virtual string s_BActiveByAdmin
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BActiveByAdmin) ? string.Empty : base.GetboolAsString(ColumnNames.BActiveByAdmin);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BActiveByAdmin);
				else
					this.BActiveByAdmin = base.SetboolAsString(ColumnNames.BActiveByAdmin, value);
			}
		}

		public virtual string s_FkActivatedByAdminID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FkActivatedByAdminID) ? string.Empty : base.GetintAsString(ColumnNames.FkActivatedByAdminID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FkActivatedByAdminID);
				else
					this.FkActivatedByAdminID = base.SetintAsString(ColumnNames.FkActivatedByAdminID, value);
			}
		}

		public virtual string s_DCreateDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DCreateDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DCreateDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DCreateDate);
				else
					this.DCreateDate = base.SetDateTimeAsString(ColumnNames.DCreateDate, value);
			}
		}

		public virtual string s_DModifiedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DModifiedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DModifiedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DModifiedDate);
				else
					this.DModifiedDate = base.SetDateTimeAsString(ColumnNames.DModifiedDate, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter PkSpecialUserID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PkSpecialUserID, Parameters.PkSpecialUserID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SFirstName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SFirstName, Parameters.SFirstName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SLastName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SLastName, Parameters.SLastName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IGender
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IGender, Parameters.IGender);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DOB
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DOB, Parameters.DOB);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FkNationalityCountry
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FkNationalityCountry, Parameters.FkNationalityCountry);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SPhone
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SPhone, Parameters.SPhone);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SEmail
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SEmail, Parameters.SEmail);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SAddressStreet
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SAddressStreet, Parameters.SAddressStreet);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SAddressTown
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SAddressTown, Parameters.SAddressTown);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SAddressPostCode
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SAddressPostCode, Parameters.SAddressPostCode);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SAddressRegion
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SAddressRegion, Parameters.SAddressRegion);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FkAddressCountry
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FkAddressCountry, Parameters.FkAddressCountry);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FkAccessLevelID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FkAccessLevelID, Parameters.FkAccessLevelID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FkDepartmentID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FkDepartmentID, Parameters.FkDepartmentID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FkSpecialityTypeID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FkSpecialityTypeID, Parameters.FkSpecialityTypeID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SImagePath
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SImagePath, Parameters.SImagePath);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter BActiveByAdmin
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BActiveByAdmin, Parameters.BActiveByAdmin);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FkActivatedByAdminID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FkActivatedByAdminID, Parameters.FkActivatedByAdminID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DCreateDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DCreateDate, Parameters.DCreateDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DModifiedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DModifiedDate, Parameters.DModifiedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter PkSpecialUserID
		    {
				get
		        {
					if(_PkSpecialUserID_W == null)
	        	    {
						_PkSpecialUserID_W = TearOff.PkSpecialUserID;
					}
					return _PkSpecialUserID_W;
				}
			}

			public WhereParameter SFirstName
		    {
				get
		        {
					if(_SFirstName_W == null)
	        	    {
						_SFirstName_W = TearOff.SFirstName;
					}
					return _SFirstName_W;
				}
			}

			public WhereParameter SLastName
		    {
				get
		        {
					if(_SLastName_W == null)
	        	    {
						_SLastName_W = TearOff.SLastName;
					}
					return _SLastName_W;
				}
			}

			public WhereParameter IGender
		    {
				get
		        {
					if(_IGender_W == null)
	        	    {
						_IGender_W = TearOff.IGender;
					}
					return _IGender_W;
				}
			}

			public WhereParameter DOB
		    {
				get
		        {
					if(_DOB_W == null)
	        	    {
						_DOB_W = TearOff.DOB;
					}
					return _DOB_W;
				}
			}

			public WhereParameter FkNationalityCountry
		    {
				get
		        {
					if(_FkNationalityCountry_W == null)
	        	    {
						_FkNationalityCountry_W = TearOff.FkNationalityCountry;
					}
					return _FkNationalityCountry_W;
				}
			}

			public WhereParameter SPhone
		    {
				get
		        {
					if(_SPhone_W == null)
	        	    {
						_SPhone_W = TearOff.SPhone;
					}
					return _SPhone_W;
				}
			}

			public WhereParameter SEmail
		    {
				get
		        {
					if(_SEmail_W == null)
	        	    {
						_SEmail_W = TearOff.SEmail;
					}
					return _SEmail_W;
				}
			}

			public WhereParameter SAddressStreet
		    {
				get
		        {
					if(_SAddressStreet_W == null)
	        	    {
						_SAddressStreet_W = TearOff.SAddressStreet;
					}
					return _SAddressStreet_W;
				}
			}

			public WhereParameter SAddressTown
		    {
				get
		        {
					if(_SAddressTown_W == null)
	        	    {
						_SAddressTown_W = TearOff.SAddressTown;
					}
					return _SAddressTown_W;
				}
			}

			public WhereParameter SAddressPostCode
		    {
				get
		        {
					if(_SAddressPostCode_W == null)
	        	    {
						_SAddressPostCode_W = TearOff.SAddressPostCode;
					}
					return _SAddressPostCode_W;
				}
			}

			public WhereParameter SAddressRegion
		    {
				get
		        {
					if(_SAddressRegion_W == null)
	        	    {
						_SAddressRegion_W = TearOff.SAddressRegion;
					}
					return _SAddressRegion_W;
				}
			}

			public WhereParameter FkAddressCountry
		    {
				get
		        {
					if(_FkAddressCountry_W == null)
	        	    {
						_FkAddressCountry_W = TearOff.FkAddressCountry;
					}
					return _FkAddressCountry_W;
				}
			}

			public WhereParameter FkAccessLevelID
		    {
				get
		        {
					if(_FkAccessLevelID_W == null)
	        	    {
						_FkAccessLevelID_W = TearOff.FkAccessLevelID;
					}
					return _FkAccessLevelID_W;
				}
			}

			public WhereParameter FkDepartmentID
		    {
				get
		        {
					if(_FkDepartmentID_W == null)
	        	    {
						_FkDepartmentID_W = TearOff.FkDepartmentID;
					}
					return _FkDepartmentID_W;
				}
			}

			public WhereParameter FkSpecialityTypeID
		    {
				get
		        {
					if(_FkSpecialityTypeID_W == null)
	        	    {
						_FkSpecialityTypeID_W = TearOff.FkSpecialityTypeID;
					}
					return _FkSpecialityTypeID_W;
				}
			}

			public WhereParameter SImagePath
		    {
				get
		        {
					if(_SImagePath_W == null)
	        	    {
						_SImagePath_W = TearOff.SImagePath;
					}
					return _SImagePath_W;
				}
			}

			public WhereParameter BActiveByAdmin
		    {
				get
		        {
					if(_BActiveByAdmin_W == null)
	        	    {
						_BActiveByAdmin_W = TearOff.BActiveByAdmin;
					}
					return _BActiveByAdmin_W;
				}
			}

			public WhereParameter FkActivatedByAdminID
		    {
				get
		        {
					if(_FkActivatedByAdminID_W == null)
	        	    {
						_FkActivatedByAdminID_W = TearOff.FkActivatedByAdminID;
					}
					return _FkActivatedByAdminID_W;
				}
			}

			public WhereParameter DCreateDate
		    {
				get
		        {
					if(_DCreateDate_W == null)
	        	    {
						_DCreateDate_W = TearOff.DCreateDate;
					}
					return _DCreateDate_W;
				}
			}

			public WhereParameter DModifiedDate
		    {
				get
		        {
					if(_DModifiedDate_W == null)
	        	    {
						_DModifiedDate_W = TearOff.DModifiedDate;
					}
					return _DModifiedDate_W;
				}
			}

			private WhereParameter _PkSpecialUserID_W = null;
			private WhereParameter _SFirstName_W = null;
			private WhereParameter _SLastName_W = null;
			private WhereParameter _IGender_W = null;
			private WhereParameter _DOB_W = null;
			private WhereParameter _FkNationalityCountry_W = null;
			private WhereParameter _SPhone_W = null;
			private WhereParameter _SEmail_W = null;
			private WhereParameter _SAddressStreet_W = null;
			private WhereParameter _SAddressTown_W = null;
			private WhereParameter _SAddressPostCode_W = null;
			private WhereParameter _SAddressRegion_W = null;
			private WhereParameter _FkAddressCountry_W = null;
			private WhereParameter _FkAccessLevelID_W = null;
			private WhereParameter _FkDepartmentID_W = null;
			private WhereParameter _FkSpecialityTypeID_W = null;
			private WhereParameter _SImagePath_W = null;
			private WhereParameter _BActiveByAdmin_W = null;
			private WhereParameter _FkActivatedByAdminID_W = null;
			private WhereParameter _DCreateDate_W = null;
			private WhereParameter _DModifiedDate_W = null;

			public void WhereClauseReset()
			{
				_PkSpecialUserID_W = null;
				_SFirstName_W = null;
				_SLastName_W = null;
				_IGender_W = null;
				_DOB_W = null;
				_FkNationalityCountry_W = null;
				_SPhone_W = null;
				_SEmail_W = null;
				_SAddressStreet_W = null;
				_SAddressTown_W = null;
				_SAddressPostCode_W = null;
				_SAddressRegion_W = null;
				_FkAddressCountry_W = null;
				_FkAccessLevelID_W = null;
				_FkDepartmentID_W = null;
				_FkSpecialityTypeID_W = null;
				_SImagePath_W = null;
				_BActiveByAdmin_W = null;
				_FkActivatedByAdminID_W = null;
				_DCreateDate_W = null;
				_DModifiedDate_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter PkSpecialUserID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PkSpecialUserID, Parameters.PkSpecialUserID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SFirstName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SFirstName, Parameters.SFirstName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SLastName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SLastName, Parameters.SLastName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IGender
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IGender, Parameters.IGender);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DOB
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DOB, Parameters.DOB);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FkNationalityCountry
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FkNationalityCountry, Parameters.FkNationalityCountry);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SPhone
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SPhone, Parameters.SPhone);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SEmail
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SEmail, Parameters.SEmail);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SAddressStreet
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SAddressStreet, Parameters.SAddressStreet);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SAddressTown
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SAddressTown, Parameters.SAddressTown);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SAddressPostCode
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SAddressPostCode, Parameters.SAddressPostCode);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SAddressRegion
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SAddressRegion, Parameters.SAddressRegion);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FkAddressCountry
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FkAddressCountry, Parameters.FkAddressCountry);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FkAccessLevelID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FkAccessLevelID, Parameters.FkAccessLevelID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FkDepartmentID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FkDepartmentID, Parameters.FkDepartmentID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FkSpecialityTypeID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FkSpecialityTypeID, Parameters.FkSpecialityTypeID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SImagePath
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SImagePath, Parameters.SImagePath);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter BActiveByAdmin
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BActiveByAdmin, Parameters.BActiveByAdmin);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FkActivatedByAdminID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FkActivatedByAdminID, Parameters.FkActivatedByAdminID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DCreateDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DCreateDate, Parameters.DCreateDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DModifiedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DModifiedDate, Parameters.DModifiedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter PkSpecialUserID
		    {
				get
		        {
					if(_PkSpecialUserID_W == null)
	        	    {
						_PkSpecialUserID_W = TearOff.PkSpecialUserID;
					}
					return _PkSpecialUserID_W;
				}
			}

			public AggregateParameter SFirstName
		    {
				get
		        {
					if(_SFirstName_W == null)
	        	    {
						_SFirstName_W = TearOff.SFirstName;
					}
					return _SFirstName_W;
				}
			}

			public AggregateParameter SLastName
		    {
				get
		        {
					if(_SLastName_W == null)
	        	    {
						_SLastName_W = TearOff.SLastName;
					}
					return _SLastName_W;
				}
			}

			public AggregateParameter IGender
		    {
				get
		        {
					if(_IGender_W == null)
	        	    {
						_IGender_W = TearOff.IGender;
					}
					return _IGender_W;
				}
			}

			public AggregateParameter DOB
		    {
				get
		        {
					if(_DOB_W == null)
	        	    {
						_DOB_W = TearOff.DOB;
					}
					return _DOB_W;
				}
			}

			public AggregateParameter FkNationalityCountry
		    {
				get
		        {
					if(_FkNationalityCountry_W == null)
	        	    {
						_FkNationalityCountry_W = TearOff.FkNationalityCountry;
					}
					return _FkNationalityCountry_W;
				}
			}

			public AggregateParameter SPhone
		    {
				get
		        {
					if(_SPhone_W == null)
	        	    {
						_SPhone_W = TearOff.SPhone;
					}
					return _SPhone_W;
				}
			}

			public AggregateParameter SEmail
		    {
				get
		        {
					if(_SEmail_W == null)
	        	    {
						_SEmail_W = TearOff.SEmail;
					}
					return _SEmail_W;
				}
			}

			public AggregateParameter SAddressStreet
		    {
				get
		        {
					if(_SAddressStreet_W == null)
	        	    {
						_SAddressStreet_W = TearOff.SAddressStreet;
					}
					return _SAddressStreet_W;
				}
			}

			public AggregateParameter SAddressTown
		    {
				get
		        {
					if(_SAddressTown_W == null)
	        	    {
						_SAddressTown_W = TearOff.SAddressTown;
					}
					return _SAddressTown_W;
				}
			}

			public AggregateParameter SAddressPostCode
		    {
				get
		        {
					if(_SAddressPostCode_W == null)
	        	    {
						_SAddressPostCode_W = TearOff.SAddressPostCode;
					}
					return _SAddressPostCode_W;
				}
			}

			public AggregateParameter SAddressRegion
		    {
				get
		        {
					if(_SAddressRegion_W == null)
	        	    {
						_SAddressRegion_W = TearOff.SAddressRegion;
					}
					return _SAddressRegion_W;
				}
			}

			public AggregateParameter FkAddressCountry
		    {
				get
		        {
					if(_FkAddressCountry_W == null)
	        	    {
						_FkAddressCountry_W = TearOff.FkAddressCountry;
					}
					return _FkAddressCountry_W;
				}
			}

			public AggregateParameter FkAccessLevelID
		    {
				get
		        {
					if(_FkAccessLevelID_W == null)
	        	    {
						_FkAccessLevelID_W = TearOff.FkAccessLevelID;
					}
					return _FkAccessLevelID_W;
				}
			}

			public AggregateParameter FkDepartmentID
		    {
				get
		        {
					if(_FkDepartmentID_W == null)
	        	    {
						_FkDepartmentID_W = TearOff.FkDepartmentID;
					}
					return _FkDepartmentID_W;
				}
			}

			public AggregateParameter FkSpecialityTypeID
		    {
				get
		        {
					if(_FkSpecialityTypeID_W == null)
	        	    {
						_FkSpecialityTypeID_W = TearOff.FkSpecialityTypeID;
					}
					return _FkSpecialityTypeID_W;
				}
			}

			public AggregateParameter SImagePath
		    {
				get
		        {
					if(_SImagePath_W == null)
	        	    {
						_SImagePath_W = TearOff.SImagePath;
					}
					return _SImagePath_W;
				}
			}

			public AggregateParameter BActiveByAdmin
		    {
				get
		        {
					if(_BActiveByAdmin_W == null)
	        	    {
						_BActiveByAdmin_W = TearOff.BActiveByAdmin;
					}
					return _BActiveByAdmin_W;
				}
			}

			public AggregateParameter FkActivatedByAdminID
		    {
				get
		        {
					if(_FkActivatedByAdminID_W == null)
	        	    {
						_FkActivatedByAdminID_W = TearOff.FkActivatedByAdminID;
					}
					return _FkActivatedByAdminID_W;
				}
			}

			public AggregateParameter DCreateDate
		    {
				get
		        {
					if(_DCreateDate_W == null)
	        	    {
						_DCreateDate_W = TearOff.DCreateDate;
					}
					return _DCreateDate_W;
				}
			}

			public AggregateParameter DModifiedDate
		    {
				get
		        {
					if(_DModifiedDate_W == null)
	        	    {
						_DModifiedDate_W = TearOff.DModifiedDate;
					}
					return _DModifiedDate_W;
				}
			}

			private AggregateParameter _PkSpecialUserID_W = null;
			private AggregateParameter _SFirstName_W = null;
			private AggregateParameter _SLastName_W = null;
			private AggregateParameter _IGender_W = null;
			private AggregateParameter _DOB_W = null;
			private AggregateParameter _FkNationalityCountry_W = null;
			private AggregateParameter _SPhone_W = null;
			private AggregateParameter _SEmail_W = null;
			private AggregateParameter _SAddressStreet_W = null;
			private AggregateParameter _SAddressTown_W = null;
			private AggregateParameter _SAddressPostCode_W = null;
			private AggregateParameter _SAddressRegion_W = null;
			private AggregateParameter _FkAddressCountry_W = null;
			private AggregateParameter _FkAccessLevelID_W = null;
			private AggregateParameter _FkDepartmentID_W = null;
			private AggregateParameter _FkSpecialityTypeID_W = null;
			private AggregateParameter _SImagePath_W = null;
			private AggregateParameter _BActiveByAdmin_W = null;
			private AggregateParameter _FkActivatedByAdminID_W = null;
			private AggregateParameter _DCreateDate_W = null;
			private AggregateParameter _DModifiedDate_W = null;

			public void AggregateClauseReset()
			{
				_PkSpecialUserID_W = null;
				_SFirstName_W = null;
				_SLastName_W = null;
				_IGender_W = null;
				_DOB_W = null;
				_FkNationalityCountry_W = null;
				_SPhone_W = null;
				_SEmail_W = null;
				_SAddressStreet_W = null;
				_SAddressTown_W = null;
				_SAddressPostCode_W = null;
				_SAddressRegion_W = null;
				_FkAddressCountry_W = null;
				_FkAccessLevelID_W = null;
				_FkDepartmentID_W = null;
				_FkSpecialityTypeID_W = null;
				_SImagePath_W = null;
				_BActiveByAdmin_W = null;
				_FkActivatedByAdminID_W = null;
				_DCreateDate_W = null;
				_DModifiedDate_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblSpecialUserInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.PkSpecialUserID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblSpecialUserUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblSpecialUserDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.PkSpecialUserID);
			p.SourceColumn = ColumnNames.PkSpecialUserID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.PkSpecialUserID);
			p.SourceColumn = ColumnNames.PkSpecialUserID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SFirstName);
			p.SourceColumn = ColumnNames.SFirstName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SLastName);
			p.SourceColumn = ColumnNames.SLastName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IGender);
			p.SourceColumn = ColumnNames.IGender;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DOB);
			p.SourceColumn = ColumnNames.DOB;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FkNationalityCountry);
			p.SourceColumn = ColumnNames.FkNationalityCountry;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SPhone);
			p.SourceColumn = ColumnNames.SPhone;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SEmail);
			p.SourceColumn = ColumnNames.SEmail;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SAddressStreet);
			p.SourceColumn = ColumnNames.SAddressStreet;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SAddressTown);
			p.SourceColumn = ColumnNames.SAddressTown;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SAddressPostCode);
			p.SourceColumn = ColumnNames.SAddressPostCode;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SAddressRegion);
			p.SourceColumn = ColumnNames.SAddressRegion;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FkAddressCountry);
			p.SourceColumn = ColumnNames.FkAddressCountry;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FkAccessLevelID);
			p.SourceColumn = ColumnNames.FkAccessLevelID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FkDepartmentID);
			p.SourceColumn = ColumnNames.FkDepartmentID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FkSpecialityTypeID);
			p.SourceColumn = ColumnNames.FkSpecialityTypeID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SImagePath);
			p.SourceColumn = ColumnNames.SImagePath;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.BActiveByAdmin);
			p.SourceColumn = ColumnNames.BActiveByAdmin;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FkActivatedByAdminID);
			p.SourceColumn = ColumnNames.FkActivatedByAdminID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DCreateDate);
			p.SourceColumn = ColumnNames.DCreateDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DModifiedDate);
			p.SourceColumn = ColumnNames.DModifiedDate;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
