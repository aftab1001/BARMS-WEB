
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.1.7.1)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace LC.Model.BMS.DAL
{
	public abstract class _tblOrders : SqlClientEntity
	{
		public _tblOrders()
		{
			this.QuerySource = "tblOrders";
			this.MappingName = "tblOrders";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tblOrdersLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int PkOrderID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.PkOrderID, PkOrderID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tblOrdersLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter PkOrderID
			{
				get
				{
					return new SqlParameter("@PkOrderID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter FkBaseOrderID
			{
				get
				{
					return new SqlParameter("@FkBaseOrderID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter FkSupplierID
			{
				get
				{
					return new SqlParameter("@FkSupplierID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter FkOrderStatusID
			{
				get
				{
					return new SqlParameter("@FkOrderStatusID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter OrderNote
			{
				get
				{
					return new SqlParameter("@OrderNote", SqlDbType.NText, 1073741823);
				}
			}
			
			public static SqlParameter OrderNoteByReceiver
			{
				get
				{
					return new SqlParameter("@OrderNoteByReceiver", SqlDbType.NText, 1073741823);
				}
			}
			
			public static SqlParameter OrderReady
			{
				get
				{
					return new SqlParameter("@OrderReady", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter OrderSubtotal
			{
				get
				{
					return new SqlParameter("@OrderSubtotal", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter FinalSubtotal
			{
				get
				{
					return new SqlParameter("@FinalSubtotal", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter SubtotalDifference
			{
				get
				{
					return new SqlParameter("@SubtotalDifference", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter PaidAmount
			{
				get
				{
					return new SqlParameter("@PaidAmount", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter Balance
			{
				get
				{
					return new SqlParameter("@Balance", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter DeliveryTime
			{
				get
				{
					return new SqlParameter("@DeliveryTime", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter IsInvoice
			{
				get
				{
					return new SqlParameter("@IsInvoice", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter OrderReceivedByUser
			{
				get
				{
					return new SqlParameter("@OrderReceivedByUser", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter AmountHandedToUser
			{
				get
				{
					return new SqlParameter("@AmountHandedToUser", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter DCreateDate
			{
				get
				{
					return new SqlParameter("@DCreateDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter DModifiedDate
			{
				get
				{
					return new SqlParameter("@DModifiedDate", SqlDbType.DateTime, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string PkOrderID = "pkOrderID";
            public const string FkBaseOrderID = "fkBaseOrderID";
            public const string FkSupplierID = "fkSupplierID";
            public const string FkOrderStatusID = "fkOrderStatusID";
            public const string OrderNote = "OrderNote";
            public const string OrderNoteByReceiver = "OrderNoteByReceiver";
            public const string OrderReady = "OrderReady";
            public const string OrderSubtotal = "OrderSubtotal";
            public const string FinalSubtotal = "finalSubtotal";
            public const string SubtotalDifference = "SubtotalDifference";
            public const string PaidAmount = "PaidAmount";
            public const string Balance = "Balance";
            public const string DeliveryTime = "deliveryTime";
            public const string IsInvoice = "IsInvoice";
            public const string OrderReceivedByUser = "OrderReceivedByUser";
            public const string AmountHandedToUser = "AmountHandedToUser";
            public const string DCreateDate = "dCreateDate";
            public const string DModifiedDate = "dModifiedDate";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[PkOrderID] = _tblOrders.PropertyNames.PkOrderID;
					ht[FkBaseOrderID] = _tblOrders.PropertyNames.FkBaseOrderID;
					ht[FkSupplierID] = _tblOrders.PropertyNames.FkSupplierID;
					ht[FkOrderStatusID] = _tblOrders.PropertyNames.FkOrderStatusID;
					ht[OrderNote] = _tblOrders.PropertyNames.OrderNote;
					ht[OrderNoteByReceiver] = _tblOrders.PropertyNames.OrderNoteByReceiver;
					ht[OrderReady] = _tblOrders.PropertyNames.OrderReady;
					ht[OrderSubtotal] = _tblOrders.PropertyNames.OrderSubtotal;
					ht[FinalSubtotal] = _tblOrders.PropertyNames.FinalSubtotal;
					ht[SubtotalDifference] = _tblOrders.PropertyNames.SubtotalDifference;
					ht[PaidAmount] = _tblOrders.PropertyNames.PaidAmount;
					ht[Balance] = _tblOrders.PropertyNames.Balance;
					ht[DeliveryTime] = _tblOrders.PropertyNames.DeliveryTime;
					ht[IsInvoice] = _tblOrders.PropertyNames.IsInvoice;
					ht[OrderReceivedByUser] = _tblOrders.PropertyNames.OrderReceivedByUser;
					ht[AmountHandedToUser] = _tblOrders.PropertyNames.AmountHandedToUser;
					ht[DCreateDate] = _tblOrders.PropertyNames.DCreateDate;
					ht[DModifiedDate] = _tblOrders.PropertyNames.DModifiedDate;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string PkOrderID = "PkOrderID";
            public const string FkBaseOrderID = "FkBaseOrderID";
            public const string FkSupplierID = "FkSupplierID";
            public const string FkOrderStatusID = "FkOrderStatusID";
            public const string OrderNote = "OrderNote";
            public const string OrderNoteByReceiver = "OrderNoteByReceiver";
            public const string OrderReady = "OrderReady";
            public const string OrderSubtotal = "OrderSubtotal";
            public const string FinalSubtotal = "FinalSubtotal";
            public const string SubtotalDifference = "SubtotalDifference";
            public const string PaidAmount = "PaidAmount";
            public const string Balance = "Balance";
            public const string DeliveryTime = "DeliveryTime";
            public const string IsInvoice = "IsInvoice";
            public const string OrderReceivedByUser = "OrderReceivedByUser";
            public const string AmountHandedToUser = "AmountHandedToUser";
            public const string DCreateDate = "DCreateDate";
            public const string DModifiedDate = "DModifiedDate";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[PkOrderID] = _tblOrders.ColumnNames.PkOrderID;
					ht[FkBaseOrderID] = _tblOrders.ColumnNames.FkBaseOrderID;
					ht[FkSupplierID] = _tblOrders.ColumnNames.FkSupplierID;
					ht[FkOrderStatusID] = _tblOrders.ColumnNames.FkOrderStatusID;
					ht[OrderNote] = _tblOrders.ColumnNames.OrderNote;
					ht[OrderNoteByReceiver] = _tblOrders.ColumnNames.OrderNoteByReceiver;
					ht[OrderReady] = _tblOrders.ColumnNames.OrderReady;
					ht[OrderSubtotal] = _tblOrders.ColumnNames.OrderSubtotal;
					ht[FinalSubtotal] = _tblOrders.ColumnNames.FinalSubtotal;
					ht[SubtotalDifference] = _tblOrders.ColumnNames.SubtotalDifference;
					ht[PaidAmount] = _tblOrders.ColumnNames.PaidAmount;
					ht[Balance] = _tblOrders.ColumnNames.Balance;
					ht[DeliveryTime] = _tblOrders.ColumnNames.DeliveryTime;
					ht[IsInvoice] = _tblOrders.ColumnNames.IsInvoice;
					ht[OrderReceivedByUser] = _tblOrders.ColumnNames.OrderReceivedByUser;
					ht[AmountHandedToUser] = _tblOrders.ColumnNames.AmountHandedToUser;
					ht[DCreateDate] = _tblOrders.ColumnNames.DCreateDate;
					ht[DModifiedDate] = _tblOrders.ColumnNames.DModifiedDate;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string PkOrderID = "s_PkOrderID";
            public const string FkBaseOrderID = "s_FkBaseOrderID";
            public const string FkSupplierID = "s_FkSupplierID";
            public const string FkOrderStatusID = "s_FkOrderStatusID";
            public const string OrderNote = "s_OrderNote";
            public const string OrderNoteByReceiver = "s_OrderNoteByReceiver";
            public const string OrderReady = "s_OrderReady";
            public const string OrderSubtotal = "s_OrderSubtotal";
            public const string FinalSubtotal = "s_FinalSubtotal";
            public const string SubtotalDifference = "s_SubtotalDifference";
            public const string PaidAmount = "s_PaidAmount";
            public const string Balance = "s_Balance";
            public const string DeliveryTime = "s_DeliveryTime";
            public const string IsInvoice = "s_IsInvoice";
            public const string OrderReceivedByUser = "s_OrderReceivedByUser";
            public const string AmountHandedToUser = "s_AmountHandedToUser";
            public const string DCreateDate = "s_DCreateDate";
            public const string DModifiedDate = "s_DModifiedDate";

		}
		#endregion		
		
		#region Properties
	
		public virtual int PkOrderID
	    {
			get
	        {
				return base.Getint(ColumnNames.PkOrderID);
			}
			set
	        {
				base.Setint(ColumnNames.PkOrderID, value);
			}
		}

		public virtual int FkBaseOrderID
	    {
			get
	        {
				return base.Getint(ColumnNames.FkBaseOrderID);
			}
			set
	        {
				base.Setint(ColumnNames.FkBaseOrderID, value);
			}
		}

		public virtual int FkSupplierID
	    {
			get
	        {
				return base.Getint(ColumnNames.FkSupplierID);
			}
			set
	        {
				base.Setint(ColumnNames.FkSupplierID, value);
			}
		}

		public virtual int FkOrderStatusID
	    {
			get
	        {
				return base.Getint(ColumnNames.FkOrderStatusID);
			}
			set
	        {
				base.Setint(ColumnNames.FkOrderStatusID, value);
			}
		}

		public virtual string OrderNote
	    {
			get
	        {
				return base.Getstring(ColumnNames.OrderNote);
			}
			set
	        {
				base.Setstring(ColumnNames.OrderNote, value);
			}
		}

		public virtual string OrderNoteByReceiver
	    {
			get
	        {
				return base.Getstring(ColumnNames.OrderNoteByReceiver);
			}
			set
	        {
				base.Setstring(ColumnNames.OrderNoteByReceiver, value);
			}
		}

		public virtual bool OrderReady
	    {
			get
	        {
				return base.Getbool(ColumnNames.OrderReady);
			}
			set
	        {
				base.Setbool(ColumnNames.OrderReady, value);
			}
		}

		public virtual double OrderSubtotal
	    {
			get
	        {
				return base.Getdouble(ColumnNames.OrderSubtotal);
			}
			set
	        {
				base.Setdouble(ColumnNames.OrderSubtotal, value);
			}
		}

		public virtual double FinalSubtotal
	    {
			get
	        {
				return base.Getdouble(ColumnNames.FinalSubtotal);
			}
			set
	        {
				base.Setdouble(ColumnNames.FinalSubtotal, value);
			}
		}

		public virtual double SubtotalDifference
	    {
			get
	        {
				return base.Getdouble(ColumnNames.SubtotalDifference);
			}
			set
	        {
				base.Setdouble(ColumnNames.SubtotalDifference, value);
			}
		}

		public virtual double PaidAmount
	    {
			get
	        {
				return base.Getdouble(ColumnNames.PaidAmount);
			}
			set
	        {
				base.Setdouble(ColumnNames.PaidAmount, value);
			}
		}

		public virtual double Balance
	    {
			get
	        {
				return base.Getdouble(ColumnNames.Balance);
			}
			set
	        {
				base.Setdouble(ColumnNames.Balance, value);
			}
		}

		public virtual string DeliveryTime
	    {
			get
	        {
				return base.Getstring(ColumnNames.DeliveryTime);
			}
			set
	        {
				base.Setstring(ColumnNames.DeliveryTime, value);
			}
		}

		public virtual bool IsInvoice
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsInvoice);
			}
			set
	        {
				base.Setbool(ColumnNames.IsInvoice, value);
			}
		}

		public virtual int OrderReceivedByUser
	    {
			get
	        {
				return base.Getint(ColumnNames.OrderReceivedByUser);
			}
			set
	        {
				base.Setint(ColumnNames.OrderReceivedByUser, value);
			}
		}

		public virtual double AmountHandedToUser
	    {
			get
	        {
				return base.Getdouble(ColumnNames.AmountHandedToUser);
			}
			set
	        {
				base.Setdouble(ColumnNames.AmountHandedToUser, value);
			}
		}

		public virtual DateTime DCreateDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.DCreateDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.DCreateDate, value);
			}
		}

		public virtual DateTime DModifiedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.DModifiedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.DModifiedDate, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_PkOrderID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PkOrderID) ? string.Empty : base.GetintAsString(ColumnNames.PkOrderID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PkOrderID);
				else
					this.PkOrderID = base.SetintAsString(ColumnNames.PkOrderID, value);
			}
		}

		public virtual string s_FkBaseOrderID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FkBaseOrderID) ? string.Empty : base.GetintAsString(ColumnNames.FkBaseOrderID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FkBaseOrderID);
				else
					this.FkBaseOrderID = base.SetintAsString(ColumnNames.FkBaseOrderID, value);
			}
		}

		public virtual string s_FkSupplierID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FkSupplierID) ? string.Empty : base.GetintAsString(ColumnNames.FkSupplierID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FkSupplierID);
				else
					this.FkSupplierID = base.SetintAsString(ColumnNames.FkSupplierID, value);
			}
		}

		public virtual string s_FkOrderStatusID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FkOrderStatusID) ? string.Empty : base.GetintAsString(ColumnNames.FkOrderStatusID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FkOrderStatusID);
				else
					this.FkOrderStatusID = base.SetintAsString(ColumnNames.FkOrderStatusID, value);
			}
		}

		public virtual string s_OrderNote
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.OrderNote) ? string.Empty : base.GetstringAsString(ColumnNames.OrderNote);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.OrderNote);
				else
					this.OrderNote = base.SetstringAsString(ColumnNames.OrderNote, value);
			}
		}

		public virtual string s_OrderNoteByReceiver
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.OrderNoteByReceiver) ? string.Empty : base.GetstringAsString(ColumnNames.OrderNoteByReceiver);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.OrderNoteByReceiver);
				else
					this.OrderNoteByReceiver = base.SetstringAsString(ColumnNames.OrderNoteByReceiver, value);
			}
		}

		public virtual string s_OrderReady
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.OrderReady) ? string.Empty : base.GetboolAsString(ColumnNames.OrderReady);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.OrderReady);
				else
					this.OrderReady = base.SetboolAsString(ColumnNames.OrderReady, value);
			}
		}

		public virtual string s_OrderSubtotal
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.OrderSubtotal) ? string.Empty : base.GetdoubleAsString(ColumnNames.OrderSubtotal);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.OrderSubtotal);
				else
					this.OrderSubtotal = base.SetdoubleAsString(ColumnNames.OrderSubtotal, value);
			}
		}

		public virtual string s_FinalSubtotal
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FinalSubtotal) ? string.Empty : base.GetdoubleAsString(ColumnNames.FinalSubtotal);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FinalSubtotal);
				else
					this.FinalSubtotal = base.SetdoubleAsString(ColumnNames.FinalSubtotal, value);
			}
		}

		public virtual string s_SubtotalDifference
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SubtotalDifference) ? string.Empty : base.GetdoubleAsString(ColumnNames.SubtotalDifference);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SubtotalDifference);
				else
					this.SubtotalDifference = base.SetdoubleAsString(ColumnNames.SubtotalDifference, value);
			}
		}

		public virtual string s_PaidAmount
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PaidAmount) ? string.Empty : base.GetdoubleAsString(ColumnNames.PaidAmount);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PaidAmount);
				else
					this.PaidAmount = base.SetdoubleAsString(ColumnNames.PaidAmount, value);
			}
		}

		public virtual string s_Balance
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Balance) ? string.Empty : base.GetdoubleAsString(ColumnNames.Balance);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Balance);
				else
					this.Balance = base.SetdoubleAsString(ColumnNames.Balance, value);
			}
		}

		public virtual string s_DeliveryTime
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DeliveryTime) ? string.Empty : base.GetstringAsString(ColumnNames.DeliveryTime);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DeliveryTime);
				else
					this.DeliveryTime = base.SetstringAsString(ColumnNames.DeliveryTime, value);
			}
		}

		public virtual string s_IsInvoice
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsInvoice) ? string.Empty : base.GetboolAsString(ColumnNames.IsInvoice);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsInvoice);
				else
					this.IsInvoice = base.SetboolAsString(ColumnNames.IsInvoice, value);
			}
		}

		public virtual string s_OrderReceivedByUser
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.OrderReceivedByUser) ? string.Empty : base.GetintAsString(ColumnNames.OrderReceivedByUser);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.OrderReceivedByUser);
				else
					this.OrderReceivedByUser = base.SetintAsString(ColumnNames.OrderReceivedByUser, value);
			}
		}

		public virtual string s_AmountHandedToUser
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AmountHandedToUser) ? string.Empty : base.GetdoubleAsString(ColumnNames.AmountHandedToUser);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AmountHandedToUser);
				else
					this.AmountHandedToUser = base.SetdoubleAsString(ColumnNames.AmountHandedToUser, value);
			}
		}

		public virtual string s_DCreateDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DCreateDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DCreateDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DCreateDate);
				else
					this.DCreateDate = base.SetDateTimeAsString(ColumnNames.DCreateDate, value);
			}
		}

		public virtual string s_DModifiedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DModifiedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DModifiedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DModifiedDate);
				else
					this.DModifiedDate = base.SetDateTimeAsString(ColumnNames.DModifiedDate, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter PkOrderID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PkOrderID, Parameters.PkOrderID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FkBaseOrderID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FkBaseOrderID, Parameters.FkBaseOrderID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FkSupplierID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FkSupplierID, Parameters.FkSupplierID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FkOrderStatusID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FkOrderStatusID, Parameters.FkOrderStatusID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter OrderNote
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.OrderNote, Parameters.OrderNote);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter OrderNoteByReceiver
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.OrderNoteByReceiver, Parameters.OrderNoteByReceiver);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter OrderReady
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.OrderReady, Parameters.OrderReady);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter OrderSubtotal
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.OrderSubtotal, Parameters.OrderSubtotal);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FinalSubtotal
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FinalSubtotal, Parameters.FinalSubtotal);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SubtotalDifference
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SubtotalDifference, Parameters.SubtotalDifference);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PaidAmount
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PaidAmount, Parameters.PaidAmount);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Balance
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Balance, Parameters.Balance);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DeliveryTime
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DeliveryTime, Parameters.DeliveryTime);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsInvoice
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsInvoice, Parameters.IsInvoice);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter OrderReceivedByUser
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.OrderReceivedByUser, Parameters.OrderReceivedByUser);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AmountHandedToUser
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AmountHandedToUser, Parameters.AmountHandedToUser);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DCreateDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DCreateDate, Parameters.DCreateDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DModifiedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DModifiedDate, Parameters.DModifiedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter PkOrderID
		    {
				get
		        {
					if(_PkOrderID_W == null)
	        	    {
						_PkOrderID_W = TearOff.PkOrderID;
					}
					return _PkOrderID_W;
				}
			}

			public WhereParameter FkBaseOrderID
		    {
				get
		        {
					if(_FkBaseOrderID_W == null)
	        	    {
						_FkBaseOrderID_W = TearOff.FkBaseOrderID;
					}
					return _FkBaseOrderID_W;
				}
			}

			public WhereParameter FkSupplierID
		    {
				get
		        {
					if(_FkSupplierID_W == null)
	        	    {
						_FkSupplierID_W = TearOff.FkSupplierID;
					}
					return _FkSupplierID_W;
				}
			}

			public WhereParameter FkOrderStatusID
		    {
				get
		        {
					if(_FkOrderStatusID_W == null)
	        	    {
						_FkOrderStatusID_W = TearOff.FkOrderStatusID;
					}
					return _FkOrderStatusID_W;
				}
			}

			public WhereParameter OrderNote
		    {
				get
		        {
					if(_OrderNote_W == null)
	        	    {
						_OrderNote_W = TearOff.OrderNote;
					}
					return _OrderNote_W;
				}
			}

			public WhereParameter OrderNoteByReceiver
		    {
				get
		        {
					if(_OrderNoteByReceiver_W == null)
	        	    {
						_OrderNoteByReceiver_W = TearOff.OrderNoteByReceiver;
					}
					return _OrderNoteByReceiver_W;
				}
			}

			public WhereParameter OrderReady
		    {
				get
		        {
					if(_OrderReady_W == null)
	        	    {
						_OrderReady_W = TearOff.OrderReady;
					}
					return _OrderReady_W;
				}
			}

			public WhereParameter OrderSubtotal
		    {
				get
		        {
					if(_OrderSubtotal_W == null)
	        	    {
						_OrderSubtotal_W = TearOff.OrderSubtotal;
					}
					return _OrderSubtotal_W;
				}
			}

			public WhereParameter FinalSubtotal
		    {
				get
		        {
					if(_FinalSubtotal_W == null)
	        	    {
						_FinalSubtotal_W = TearOff.FinalSubtotal;
					}
					return _FinalSubtotal_W;
				}
			}

			public WhereParameter SubtotalDifference
		    {
				get
		        {
					if(_SubtotalDifference_W == null)
	        	    {
						_SubtotalDifference_W = TearOff.SubtotalDifference;
					}
					return _SubtotalDifference_W;
				}
			}

			public WhereParameter PaidAmount
		    {
				get
		        {
					if(_PaidAmount_W == null)
	        	    {
						_PaidAmount_W = TearOff.PaidAmount;
					}
					return _PaidAmount_W;
				}
			}

			public WhereParameter Balance
		    {
				get
		        {
					if(_Balance_W == null)
	        	    {
						_Balance_W = TearOff.Balance;
					}
					return _Balance_W;
				}
			}

			public WhereParameter DeliveryTime
		    {
				get
		        {
					if(_DeliveryTime_W == null)
	        	    {
						_DeliveryTime_W = TearOff.DeliveryTime;
					}
					return _DeliveryTime_W;
				}
			}

			public WhereParameter IsInvoice
		    {
				get
		        {
					if(_IsInvoice_W == null)
	        	    {
						_IsInvoice_W = TearOff.IsInvoice;
					}
					return _IsInvoice_W;
				}
			}

			public WhereParameter OrderReceivedByUser
		    {
				get
		        {
					if(_OrderReceivedByUser_W == null)
	        	    {
						_OrderReceivedByUser_W = TearOff.OrderReceivedByUser;
					}
					return _OrderReceivedByUser_W;
				}
			}

			public WhereParameter AmountHandedToUser
		    {
				get
		        {
					if(_AmountHandedToUser_W == null)
	        	    {
						_AmountHandedToUser_W = TearOff.AmountHandedToUser;
					}
					return _AmountHandedToUser_W;
				}
			}

			public WhereParameter DCreateDate
		    {
				get
		        {
					if(_DCreateDate_W == null)
	        	    {
						_DCreateDate_W = TearOff.DCreateDate;
					}
					return _DCreateDate_W;
				}
			}

			public WhereParameter DModifiedDate
		    {
				get
		        {
					if(_DModifiedDate_W == null)
	        	    {
						_DModifiedDate_W = TearOff.DModifiedDate;
					}
					return _DModifiedDate_W;
				}
			}

			private WhereParameter _PkOrderID_W = null;
			private WhereParameter _FkBaseOrderID_W = null;
			private WhereParameter _FkSupplierID_W = null;
			private WhereParameter _FkOrderStatusID_W = null;
			private WhereParameter _OrderNote_W = null;
			private WhereParameter _OrderNoteByReceiver_W = null;
			private WhereParameter _OrderReady_W = null;
			private WhereParameter _OrderSubtotal_W = null;
			private WhereParameter _FinalSubtotal_W = null;
			private WhereParameter _SubtotalDifference_W = null;
			private WhereParameter _PaidAmount_W = null;
			private WhereParameter _Balance_W = null;
			private WhereParameter _DeliveryTime_W = null;
			private WhereParameter _IsInvoice_W = null;
			private WhereParameter _OrderReceivedByUser_W = null;
			private WhereParameter _AmountHandedToUser_W = null;
			private WhereParameter _DCreateDate_W = null;
			private WhereParameter _DModifiedDate_W = null;

			public void WhereClauseReset()
			{
				_PkOrderID_W = null;
				_FkBaseOrderID_W = null;
				_FkSupplierID_W = null;
				_FkOrderStatusID_W = null;
				_OrderNote_W = null;
				_OrderNoteByReceiver_W = null;
				_OrderReady_W = null;
				_OrderSubtotal_W = null;
				_FinalSubtotal_W = null;
				_SubtotalDifference_W = null;
				_PaidAmount_W = null;
				_Balance_W = null;
				_DeliveryTime_W = null;
				_IsInvoice_W = null;
				_OrderReceivedByUser_W = null;
				_AmountHandedToUser_W = null;
				_DCreateDate_W = null;
				_DModifiedDate_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter PkOrderID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PkOrderID, Parameters.PkOrderID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FkBaseOrderID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FkBaseOrderID, Parameters.FkBaseOrderID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FkSupplierID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FkSupplierID, Parameters.FkSupplierID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FkOrderStatusID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FkOrderStatusID, Parameters.FkOrderStatusID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter OrderNote
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.OrderNote, Parameters.OrderNote);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter OrderNoteByReceiver
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.OrderNoteByReceiver, Parameters.OrderNoteByReceiver);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter OrderReady
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.OrderReady, Parameters.OrderReady);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter OrderSubtotal
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.OrderSubtotal, Parameters.OrderSubtotal);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FinalSubtotal
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FinalSubtotal, Parameters.FinalSubtotal);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SubtotalDifference
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SubtotalDifference, Parameters.SubtotalDifference);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PaidAmount
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PaidAmount, Parameters.PaidAmount);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Balance
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Balance, Parameters.Balance);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DeliveryTime
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DeliveryTime, Parameters.DeliveryTime);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsInvoice
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsInvoice, Parameters.IsInvoice);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter OrderReceivedByUser
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.OrderReceivedByUser, Parameters.OrderReceivedByUser);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AmountHandedToUser
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AmountHandedToUser, Parameters.AmountHandedToUser);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DCreateDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DCreateDate, Parameters.DCreateDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DModifiedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DModifiedDate, Parameters.DModifiedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter PkOrderID
		    {
				get
		        {
					if(_PkOrderID_W == null)
	        	    {
						_PkOrderID_W = TearOff.PkOrderID;
					}
					return _PkOrderID_W;
				}
			}

			public AggregateParameter FkBaseOrderID
		    {
				get
		        {
					if(_FkBaseOrderID_W == null)
	        	    {
						_FkBaseOrderID_W = TearOff.FkBaseOrderID;
					}
					return _FkBaseOrderID_W;
				}
			}

			public AggregateParameter FkSupplierID
		    {
				get
		        {
					if(_FkSupplierID_W == null)
	        	    {
						_FkSupplierID_W = TearOff.FkSupplierID;
					}
					return _FkSupplierID_W;
				}
			}

			public AggregateParameter FkOrderStatusID
		    {
				get
		        {
					if(_FkOrderStatusID_W == null)
	        	    {
						_FkOrderStatusID_W = TearOff.FkOrderStatusID;
					}
					return _FkOrderStatusID_W;
				}
			}

			public AggregateParameter OrderNote
		    {
				get
		        {
					if(_OrderNote_W == null)
	        	    {
						_OrderNote_W = TearOff.OrderNote;
					}
					return _OrderNote_W;
				}
			}

			public AggregateParameter OrderNoteByReceiver
		    {
				get
		        {
					if(_OrderNoteByReceiver_W == null)
	        	    {
						_OrderNoteByReceiver_W = TearOff.OrderNoteByReceiver;
					}
					return _OrderNoteByReceiver_W;
				}
			}

			public AggregateParameter OrderReady
		    {
				get
		        {
					if(_OrderReady_W == null)
	        	    {
						_OrderReady_W = TearOff.OrderReady;
					}
					return _OrderReady_W;
				}
			}

			public AggregateParameter OrderSubtotal
		    {
				get
		        {
					if(_OrderSubtotal_W == null)
	        	    {
						_OrderSubtotal_W = TearOff.OrderSubtotal;
					}
					return _OrderSubtotal_W;
				}
			}

			public AggregateParameter FinalSubtotal
		    {
				get
		        {
					if(_FinalSubtotal_W == null)
	        	    {
						_FinalSubtotal_W = TearOff.FinalSubtotal;
					}
					return _FinalSubtotal_W;
				}
			}

			public AggregateParameter SubtotalDifference
		    {
				get
		        {
					if(_SubtotalDifference_W == null)
	        	    {
						_SubtotalDifference_W = TearOff.SubtotalDifference;
					}
					return _SubtotalDifference_W;
				}
			}

			public AggregateParameter PaidAmount
		    {
				get
		        {
					if(_PaidAmount_W == null)
	        	    {
						_PaidAmount_W = TearOff.PaidAmount;
					}
					return _PaidAmount_W;
				}
			}

			public AggregateParameter Balance
		    {
				get
		        {
					if(_Balance_W == null)
	        	    {
						_Balance_W = TearOff.Balance;
					}
					return _Balance_W;
				}
			}

			public AggregateParameter DeliveryTime
		    {
				get
		        {
					if(_DeliveryTime_W == null)
	        	    {
						_DeliveryTime_W = TearOff.DeliveryTime;
					}
					return _DeliveryTime_W;
				}
			}

			public AggregateParameter IsInvoice
		    {
				get
		        {
					if(_IsInvoice_W == null)
	        	    {
						_IsInvoice_W = TearOff.IsInvoice;
					}
					return _IsInvoice_W;
				}
			}

			public AggregateParameter OrderReceivedByUser
		    {
				get
		        {
					if(_OrderReceivedByUser_W == null)
	        	    {
						_OrderReceivedByUser_W = TearOff.OrderReceivedByUser;
					}
					return _OrderReceivedByUser_W;
				}
			}

			public AggregateParameter AmountHandedToUser
		    {
				get
		        {
					if(_AmountHandedToUser_W == null)
	        	    {
						_AmountHandedToUser_W = TearOff.AmountHandedToUser;
					}
					return _AmountHandedToUser_W;
				}
			}

			public AggregateParameter DCreateDate
		    {
				get
		        {
					if(_DCreateDate_W == null)
	        	    {
						_DCreateDate_W = TearOff.DCreateDate;
					}
					return _DCreateDate_W;
				}
			}

			public AggregateParameter DModifiedDate
		    {
				get
		        {
					if(_DModifiedDate_W == null)
	        	    {
						_DModifiedDate_W = TearOff.DModifiedDate;
					}
					return _DModifiedDate_W;
				}
			}

			private AggregateParameter _PkOrderID_W = null;
			private AggregateParameter _FkBaseOrderID_W = null;
			private AggregateParameter _FkSupplierID_W = null;
			private AggregateParameter _FkOrderStatusID_W = null;
			private AggregateParameter _OrderNote_W = null;
			private AggregateParameter _OrderNoteByReceiver_W = null;
			private AggregateParameter _OrderReady_W = null;
			private AggregateParameter _OrderSubtotal_W = null;
			private AggregateParameter _FinalSubtotal_W = null;
			private AggregateParameter _SubtotalDifference_W = null;
			private AggregateParameter _PaidAmount_W = null;
			private AggregateParameter _Balance_W = null;
			private AggregateParameter _DeliveryTime_W = null;
			private AggregateParameter _IsInvoice_W = null;
			private AggregateParameter _OrderReceivedByUser_W = null;
			private AggregateParameter _AmountHandedToUser_W = null;
			private AggregateParameter _DCreateDate_W = null;
			private AggregateParameter _DModifiedDate_W = null;

			public void AggregateClauseReset()
			{
				_PkOrderID_W = null;
				_FkBaseOrderID_W = null;
				_FkSupplierID_W = null;
				_FkOrderStatusID_W = null;
				_OrderNote_W = null;
				_OrderNoteByReceiver_W = null;
				_OrderReady_W = null;
				_OrderSubtotal_W = null;
				_FinalSubtotal_W = null;
				_SubtotalDifference_W = null;
				_PaidAmount_W = null;
				_Balance_W = null;
				_DeliveryTime_W = null;
				_IsInvoice_W = null;
				_OrderReceivedByUser_W = null;
				_AmountHandedToUser_W = null;
				_DCreateDate_W = null;
				_DModifiedDate_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblOrdersInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.PkOrderID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblOrdersUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblOrdersDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.PkOrderID);
			p.SourceColumn = ColumnNames.PkOrderID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.PkOrderID);
			p.SourceColumn = ColumnNames.PkOrderID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FkBaseOrderID);
			p.SourceColumn = ColumnNames.FkBaseOrderID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FkSupplierID);
			p.SourceColumn = ColumnNames.FkSupplierID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FkOrderStatusID);
			p.SourceColumn = ColumnNames.FkOrderStatusID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.OrderNote);
			p.SourceColumn = ColumnNames.OrderNote;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.OrderNoteByReceiver);
			p.SourceColumn = ColumnNames.OrderNoteByReceiver;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.OrderReady);
			p.SourceColumn = ColumnNames.OrderReady;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.OrderSubtotal);
			p.SourceColumn = ColumnNames.OrderSubtotal;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FinalSubtotal);
			p.SourceColumn = ColumnNames.FinalSubtotal;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SubtotalDifference);
			p.SourceColumn = ColumnNames.SubtotalDifference;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PaidAmount);
			p.SourceColumn = ColumnNames.PaidAmount;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Balance);
			p.SourceColumn = ColumnNames.Balance;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DeliveryTime);
			p.SourceColumn = ColumnNames.DeliveryTime;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsInvoice);
			p.SourceColumn = ColumnNames.IsInvoice;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.OrderReceivedByUser);
			p.SourceColumn = ColumnNames.OrderReceivedByUser;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AmountHandedToUser);
			p.SourceColumn = ColumnNames.AmountHandedToUser;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DCreateDate);
			p.SourceColumn = ColumnNames.DCreateDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DModifiedDate);
			p.SourceColumn = ColumnNames.DModifiedDate;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
