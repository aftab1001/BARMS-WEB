
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.1.7.1)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace LC.Model.BMS.DAL
{
	public abstract class _tblUserWeeklyPayments : SqlClientEntity
	{
		public _tblUserWeeklyPayments()
		{
			this.QuerySource = "tblUserWeeklyPayments";
			this.MappingName = "tblUserWeeklyPayments";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tblUserWeeklyPaymentsLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int PkUserWeeklyPaymentID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.PkUserWeeklyPaymentID, PkUserWeeklyPaymentID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tblUserWeeklyPaymentsLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter PkUserWeeklyPaymentID
			{
				get
				{
					return new SqlParameter("@PkUserWeeklyPaymentID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter FkUserID
			{
				get
				{
					return new SqlParameter("@FkUserID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter IWeekNumber
			{
				get
				{
					return new SqlParameter("@IWeekNumber", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter DWeekStartDate
			{
				get
				{
					return new SqlParameter("@DWeekStartDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter DWeekEndDate
			{
				get
				{
					return new SqlParameter("@DWeekEndDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter Salary
			{
				get
				{
					return new SqlParameter("@Salary", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter PaidByAccountManager
			{
				get
				{
					return new SqlParameter("@PaidByAccountManager", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter ReceivedByUser
			{
				get
				{
					return new SqlParameter("@ReceivedByUser", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter BIsActive
			{
				get
				{
					return new SqlParameter("@BIsActive", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter AllowByDepartmentAdmin
			{
				get
				{
					return new SqlParameter("@AllowByDepartmentAdmin", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter EmailDate
			{
				get
				{
					return new SqlParameter("@EmailDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter DModifiedDate
			{
				get
				{
					return new SqlParameter("@DModifiedDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter DCreatedDate
			{
				get
				{
					return new SqlParameter("@DCreatedDate", SqlDbType.DateTime, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string PkUserWeeklyPaymentID = "pkUserWeeklyPaymentID";
            public const string FkUserID = "fkUserID";
            public const string IWeekNumber = "iWeekNumber";
            public const string DWeekStartDate = "dWeekStartDate";
            public const string DWeekEndDate = "dWeekEndDate";
            public const string Salary = "Salary";
            public const string PaidByAccountManager = "paidByAccountManager";
            public const string ReceivedByUser = "receivedByUser";
            public const string BIsActive = "bIsActive";
            public const string AllowByDepartmentAdmin = "AllowByDepartmentAdmin";
            public const string EmailDate = "emailDate";
            public const string DModifiedDate = "dModifiedDate";
            public const string DCreatedDate = "dCreatedDate";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[PkUserWeeklyPaymentID] = _tblUserWeeklyPayments.PropertyNames.PkUserWeeklyPaymentID;
					ht[FkUserID] = _tblUserWeeklyPayments.PropertyNames.FkUserID;
					ht[IWeekNumber] = _tblUserWeeklyPayments.PropertyNames.IWeekNumber;
					ht[DWeekStartDate] = _tblUserWeeklyPayments.PropertyNames.DWeekStartDate;
					ht[DWeekEndDate] = _tblUserWeeklyPayments.PropertyNames.DWeekEndDate;
					ht[Salary] = _tblUserWeeklyPayments.PropertyNames.Salary;
					ht[PaidByAccountManager] = _tblUserWeeklyPayments.PropertyNames.PaidByAccountManager;
					ht[ReceivedByUser] = _tblUserWeeklyPayments.PropertyNames.ReceivedByUser;
					ht[BIsActive] = _tblUserWeeklyPayments.PropertyNames.BIsActive;
					ht[AllowByDepartmentAdmin] = _tblUserWeeklyPayments.PropertyNames.AllowByDepartmentAdmin;
					ht[EmailDate] = _tblUserWeeklyPayments.PropertyNames.EmailDate;
					ht[DModifiedDate] = _tblUserWeeklyPayments.PropertyNames.DModifiedDate;
					ht[DCreatedDate] = _tblUserWeeklyPayments.PropertyNames.DCreatedDate;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string PkUserWeeklyPaymentID = "PkUserWeeklyPaymentID";
            public const string FkUserID = "FkUserID";
            public const string IWeekNumber = "IWeekNumber";
            public const string DWeekStartDate = "DWeekStartDate";
            public const string DWeekEndDate = "DWeekEndDate";
            public const string Salary = "Salary";
            public const string PaidByAccountManager = "PaidByAccountManager";
            public const string ReceivedByUser = "ReceivedByUser";
            public const string BIsActive = "BIsActive";
            public const string AllowByDepartmentAdmin = "AllowByDepartmentAdmin";
            public const string EmailDate = "EmailDate";
            public const string DModifiedDate = "DModifiedDate";
            public const string DCreatedDate = "DCreatedDate";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[PkUserWeeklyPaymentID] = _tblUserWeeklyPayments.ColumnNames.PkUserWeeklyPaymentID;
					ht[FkUserID] = _tblUserWeeklyPayments.ColumnNames.FkUserID;
					ht[IWeekNumber] = _tblUserWeeklyPayments.ColumnNames.IWeekNumber;
					ht[DWeekStartDate] = _tblUserWeeklyPayments.ColumnNames.DWeekStartDate;
					ht[DWeekEndDate] = _tblUserWeeklyPayments.ColumnNames.DWeekEndDate;
					ht[Salary] = _tblUserWeeklyPayments.ColumnNames.Salary;
					ht[PaidByAccountManager] = _tblUserWeeklyPayments.ColumnNames.PaidByAccountManager;
					ht[ReceivedByUser] = _tblUserWeeklyPayments.ColumnNames.ReceivedByUser;
					ht[BIsActive] = _tblUserWeeklyPayments.ColumnNames.BIsActive;
					ht[AllowByDepartmentAdmin] = _tblUserWeeklyPayments.ColumnNames.AllowByDepartmentAdmin;
					ht[EmailDate] = _tblUserWeeklyPayments.ColumnNames.EmailDate;
					ht[DModifiedDate] = _tblUserWeeklyPayments.ColumnNames.DModifiedDate;
					ht[DCreatedDate] = _tblUserWeeklyPayments.ColumnNames.DCreatedDate;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string PkUserWeeklyPaymentID = "s_PkUserWeeklyPaymentID";
            public const string FkUserID = "s_FkUserID";
            public const string IWeekNumber = "s_IWeekNumber";
            public const string DWeekStartDate = "s_DWeekStartDate";
            public const string DWeekEndDate = "s_DWeekEndDate";
            public const string Salary = "s_Salary";
            public const string PaidByAccountManager = "s_PaidByAccountManager";
            public const string ReceivedByUser = "s_ReceivedByUser";
            public const string BIsActive = "s_BIsActive";
            public const string AllowByDepartmentAdmin = "s_AllowByDepartmentAdmin";
            public const string EmailDate = "s_EmailDate";
            public const string DModifiedDate = "s_DModifiedDate";
            public const string DCreatedDate = "s_DCreatedDate";

		}
		#endregion		
		
		#region Properties
	
		public virtual int PkUserWeeklyPaymentID
	    {
			get
	        {
				return base.Getint(ColumnNames.PkUserWeeklyPaymentID);
			}
			set
	        {
				base.Setint(ColumnNames.PkUserWeeklyPaymentID, value);
			}
		}

		public virtual int FkUserID
	    {
			get
	        {
				return base.Getint(ColumnNames.FkUserID);
			}
			set
	        {
				base.Setint(ColumnNames.FkUserID, value);
			}
		}

		public virtual int IWeekNumber
	    {
			get
	        {
				return base.Getint(ColumnNames.IWeekNumber);
			}
			set
	        {
				base.Setint(ColumnNames.IWeekNumber, value);
			}
		}

		public virtual DateTime DWeekStartDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.DWeekStartDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.DWeekStartDate, value);
			}
		}

		public virtual DateTime DWeekEndDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.DWeekEndDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.DWeekEndDate, value);
			}
		}

		public virtual double Salary
	    {
			get
	        {
				return base.Getdouble(ColumnNames.Salary);
			}
			set
	        {
				base.Setdouble(ColumnNames.Salary, value);
			}
		}

		public virtual bool PaidByAccountManager
	    {
			get
	        {
				return base.Getbool(ColumnNames.PaidByAccountManager);
			}
			set
	        {
				base.Setbool(ColumnNames.PaidByAccountManager, value);
			}
		}

		public virtual bool ReceivedByUser
	    {
			get
	        {
				return base.Getbool(ColumnNames.ReceivedByUser);
			}
			set
	        {
				base.Setbool(ColumnNames.ReceivedByUser, value);
			}
		}

		public virtual bool BIsActive
	    {
			get
	        {
				return base.Getbool(ColumnNames.BIsActive);
			}
			set
	        {
				base.Setbool(ColumnNames.BIsActive, value);
			}
		}

		public virtual bool AllowByDepartmentAdmin
	    {
			get
	        {
				return base.Getbool(ColumnNames.AllowByDepartmentAdmin);
			}
			set
	        {
				base.Setbool(ColumnNames.AllowByDepartmentAdmin, value);
			}
		}

		public virtual DateTime EmailDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.EmailDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.EmailDate, value);
			}
		}

		public virtual DateTime DModifiedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.DModifiedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.DModifiedDate, value);
			}
		}

		public virtual DateTime DCreatedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.DCreatedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.DCreatedDate, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_PkUserWeeklyPaymentID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PkUserWeeklyPaymentID) ? string.Empty : base.GetintAsString(ColumnNames.PkUserWeeklyPaymentID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PkUserWeeklyPaymentID);
				else
					this.PkUserWeeklyPaymentID = base.SetintAsString(ColumnNames.PkUserWeeklyPaymentID, value);
			}
		}

		public virtual string s_FkUserID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FkUserID) ? string.Empty : base.GetintAsString(ColumnNames.FkUserID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FkUserID);
				else
					this.FkUserID = base.SetintAsString(ColumnNames.FkUserID, value);
			}
		}

		public virtual string s_IWeekNumber
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IWeekNumber) ? string.Empty : base.GetintAsString(ColumnNames.IWeekNumber);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IWeekNumber);
				else
					this.IWeekNumber = base.SetintAsString(ColumnNames.IWeekNumber, value);
			}
		}

		public virtual string s_DWeekStartDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DWeekStartDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DWeekStartDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DWeekStartDate);
				else
					this.DWeekStartDate = base.SetDateTimeAsString(ColumnNames.DWeekStartDate, value);
			}
		}

		public virtual string s_DWeekEndDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DWeekEndDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DWeekEndDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DWeekEndDate);
				else
					this.DWeekEndDate = base.SetDateTimeAsString(ColumnNames.DWeekEndDate, value);
			}
		}

		public virtual string s_Salary
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Salary) ? string.Empty : base.GetdoubleAsString(ColumnNames.Salary);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Salary);
				else
					this.Salary = base.SetdoubleAsString(ColumnNames.Salary, value);
			}
		}

		public virtual string s_PaidByAccountManager
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PaidByAccountManager) ? string.Empty : base.GetboolAsString(ColumnNames.PaidByAccountManager);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PaidByAccountManager);
				else
					this.PaidByAccountManager = base.SetboolAsString(ColumnNames.PaidByAccountManager, value);
			}
		}

		public virtual string s_ReceivedByUser
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ReceivedByUser) ? string.Empty : base.GetboolAsString(ColumnNames.ReceivedByUser);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ReceivedByUser);
				else
					this.ReceivedByUser = base.SetboolAsString(ColumnNames.ReceivedByUser, value);
			}
		}

		public virtual string s_BIsActive
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BIsActive) ? string.Empty : base.GetboolAsString(ColumnNames.BIsActive);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BIsActive);
				else
					this.BIsActive = base.SetboolAsString(ColumnNames.BIsActive, value);
			}
		}

		public virtual string s_AllowByDepartmentAdmin
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AllowByDepartmentAdmin) ? string.Empty : base.GetboolAsString(ColumnNames.AllowByDepartmentAdmin);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AllowByDepartmentAdmin);
				else
					this.AllowByDepartmentAdmin = base.SetboolAsString(ColumnNames.AllowByDepartmentAdmin, value);
			}
		}

		public virtual string s_EmailDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.EmailDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.EmailDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.EmailDate);
				else
					this.EmailDate = base.SetDateTimeAsString(ColumnNames.EmailDate, value);
			}
		}

		public virtual string s_DModifiedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DModifiedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DModifiedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DModifiedDate);
				else
					this.DModifiedDate = base.SetDateTimeAsString(ColumnNames.DModifiedDate, value);
			}
		}

		public virtual string s_DCreatedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DCreatedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DCreatedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DCreatedDate);
				else
					this.DCreatedDate = base.SetDateTimeAsString(ColumnNames.DCreatedDate, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter PkUserWeeklyPaymentID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PkUserWeeklyPaymentID, Parameters.PkUserWeeklyPaymentID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FkUserID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FkUserID, Parameters.FkUserID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IWeekNumber
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IWeekNumber, Parameters.IWeekNumber);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DWeekStartDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DWeekStartDate, Parameters.DWeekStartDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DWeekEndDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DWeekEndDate, Parameters.DWeekEndDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Salary
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Salary, Parameters.Salary);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PaidByAccountManager
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PaidByAccountManager, Parameters.PaidByAccountManager);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ReceivedByUser
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ReceivedByUser, Parameters.ReceivedByUser);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter BIsActive
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BIsActive, Parameters.BIsActive);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AllowByDepartmentAdmin
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AllowByDepartmentAdmin, Parameters.AllowByDepartmentAdmin);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter EmailDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.EmailDate, Parameters.EmailDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DModifiedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DModifiedDate, Parameters.DModifiedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DCreatedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DCreatedDate, Parameters.DCreatedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter PkUserWeeklyPaymentID
		    {
				get
		        {
					if(_PkUserWeeklyPaymentID_W == null)
	        	    {
						_PkUserWeeklyPaymentID_W = TearOff.PkUserWeeklyPaymentID;
					}
					return _PkUserWeeklyPaymentID_W;
				}
			}

			public WhereParameter FkUserID
		    {
				get
		        {
					if(_FkUserID_W == null)
	        	    {
						_FkUserID_W = TearOff.FkUserID;
					}
					return _FkUserID_W;
				}
			}

			public WhereParameter IWeekNumber
		    {
				get
		        {
					if(_IWeekNumber_W == null)
	        	    {
						_IWeekNumber_W = TearOff.IWeekNumber;
					}
					return _IWeekNumber_W;
				}
			}

			public WhereParameter DWeekStartDate
		    {
				get
		        {
					if(_DWeekStartDate_W == null)
	        	    {
						_DWeekStartDate_W = TearOff.DWeekStartDate;
					}
					return _DWeekStartDate_W;
				}
			}

			public WhereParameter DWeekEndDate
		    {
				get
		        {
					if(_DWeekEndDate_W == null)
	        	    {
						_DWeekEndDate_W = TearOff.DWeekEndDate;
					}
					return _DWeekEndDate_W;
				}
			}

			public WhereParameter Salary
		    {
				get
		        {
					if(_Salary_W == null)
	        	    {
						_Salary_W = TearOff.Salary;
					}
					return _Salary_W;
				}
			}

			public WhereParameter PaidByAccountManager
		    {
				get
		        {
					if(_PaidByAccountManager_W == null)
	        	    {
						_PaidByAccountManager_W = TearOff.PaidByAccountManager;
					}
					return _PaidByAccountManager_W;
				}
			}

			public WhereParameter ReceivedByUser
		    {
				get
		        {
					if(_ReceivedByUser_W == null)
	        	    {
						_ReceivedByUser_W = TearOff.ReceivedByUser;
					}
					return _ReceivedByUser_W;
				}
			}

			public WhereParameter BIsActive
		    {
				get
		        {
					if(_BIsActive_W == null)
	        	    {
						_BIsActive_W = TearOff.BIsActive;
					}
					return _BIsActive_W;
				}
			}

			public WhereParameter AllowByDepartmentAdmin
		    {
				get
		        {
					if(_AllowByDepartmentAdmin_W == null)
	        	    {
						_AllowByDepartmentAdmin_W = TearOff.AllowByDepartmentAdmin;
					}
					return _AllowByDepartmentAdmin_W;
				}
			}

			public WhereParameter EmailDate
		    {
				get
		        {
					if(_EmailDate_W == null)
	        	    {
						_EmailDate_W = TearOff.EmailDate;
					}
					return _EmailDate_W;
				}
			}

			public WhereParameter DModifiedDate
		    {
				get
		        {
					if(_DModifiedDate_W == null)
	        	    {
						_DModifiedDate_W = TearOff.DModifiedDate;
					}
					return _DModifiedDate_W;
				}
			}

			public WhereParameter DCreatedDate
		    {
				get
		        {
					if(_DCreatedDate_W == null)
	        	    {
						_DCreatedDate_W = TearOff.DCreatedDate;
					}
					return _DCreatedDate_W;
				}
			}

			private WhereParameter _PkUserWeeklyPaymentID_W = null;
			private WhereParameter _FkUserID_W = null;
			private WhereParameter _IWeekNumber_W = null;
			private WhereParameter _DWeekStartDate_W = null;
			private WhereParameter _DWeekEndDate_W = null;
			private WhereParameter _Salary_W = null;
			private WhereParameter _PaidByAccountManager_W = null;
			private WhereParameter _ReceivedByUser_W = null;
			private WhereParameter _BIsActive_W = null;
			private WhereParameter _AllowByDepartmentAdmin_W = null;
			private WhereParameter _EmailDate_W = null;
			private WhereParameter _DModifiedDate_W = null;
			private WhereParameter _DCreatedDate_W = null;

			public void WhereClauseReset()
			{
				_PkUserWeeklyPaymentID_W = null;
				_FkUserID_W = null;
				_IWeekNumber_W = null;
				_DWeekStartDate_W = null;
				_DWeekEndDate_W = null;
				_Salary_W = null;
				_PaidByAccountManager_W = null;
				_ReceivedByUser_W = null;
				_BIsActive_W = null;
				_AllowByDepartmentAdmin_W = null;
				_EmailDate_W = null;
				_DModifiedDate_W = null;
				_DCreatedDate_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter PkUserWeeklyPaymentID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PkUserWeeklyPaymentID, Parameters.PkUserWeeklyPaymentID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FkUserID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FkUserID, Parameters.FkUserID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IWeekNumber
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IWeekNumber, Parameters.IWeekNumber);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DWeekStartDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DWeekStartDate, Parameters.DWeekStartDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DWeekEndDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DWeekEndDate, Parameters.DWeekEndDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Salary
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Salary, Parameters.Salary);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PaidByAccountManager
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PaidByAccountManager, Parameters.PaidByAccountManager);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ReceivedByUser
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ReceivedByUser, Parameters.ReceivedByUser);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter BIsActive
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BIsActive, Parameters.BIsActive);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AllowByDepartmentAdmin
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AllowByDepartmentAdmin, Parameters.AllowByDepartmentAdmin);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter EmailDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.EmailDate, Parameters.EmailDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DModifiedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DModifiedDate, Parameters.DModifiedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DCreatedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DCreatedDate, Parameters.DCreatedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter PkUserWeeklyPaymentID
		    {
				get
		        {
					if(_PkUserWeeklyPaymentID_W == null)
	        	    {
						_PkUserWeeklyPaymentID_W = TearOff.PkUserWeeklyPaymentID;
					}
					return _PkUserWeeklyPaymentID_W;
				}
			}

			public AggregateParameter FkUserID
		    {
				get
		        {
					if(_FkUserID_W == null)
	        	    {
						_FkUserID_W = TearOff.FkUserID;
					}
					return _FkUserID_W;
				}
			}

			public AggregateParameter IWeekNumber
		    {
				get
		        {
					if(_IWeekNumber_W == null)
	        	    {
						_IWeekNumber_W = TearOff.IWeekNumber;
					}
					return _IWeekNumber_W;
				}
			}

			public AggregateParameter DWeekStartDate
		    {
				get
		        {
					if(_DWeekStartDate_W == null)
	        	    {
						_DWeekStartDate_W = TearOff.DWeekStartDate;
					}
					return _DWeekStartDate_W;
				}
			}

			public AggregateParameter DWeekEndDate
		    {
				get
		        {
					if(_DWeekEndDate_W == null)
	        	    {
						_DWeekEndDate_W = TearOff.DWeekEndDate;
					}
					return _DWeekEndDate_W;
				}
			}

			public AggregateParameter Salary
		    {
				get
		        {
					if(_Salary_W == null)
	        	    {
						_Salary_W = TearOff.Salary;
					}
					return _Salary_W;
				}
			}

			public AggregateParameter PaidByAccountManager
		    {
				get
		        {
					if(_PaidByAccountManager_W == null)
	        	    {
						_PaidByAccountManager_W = TearOff.PaidByAccountManager;
					}
					return _PaidByAccountManager_W;
				}
			}

			public AggregateParameter ReceivedByUser
		    {
				get
		        {
					if(_ReceivedByUser_W == null)
	        	    {
						_ReceivedByUser_W = TearOff.ReceivedByUser;
					}
					return _ReceivedByUser_W;
				}
			}

			public AggregateParameter BIsActive
		    {
				get
		        {
					if(_BIsActive_W == null)
	        	    {
						_BIsActive_W = TearOff.BIsActive;
					}
					return _BIsActive_W;
				}
			}

			public AggregateParameter AllowByDepartmentAdmin
		    {
				get
		        {
					if(_AllowByDepartmentAdmin_W == null)
	        	    {
						_AllowByDepartmentAdmin_W = TearOff.AllowByDepartmentAdmin;
					}
					return _AllowByDepartmentAdmin_W;
				}
			}

			public AggregateParameter EmailDate
		    {
				get
		        {
					if(_EmailDate_W == null)
	        	    {
						_EmailDate_W = TearOff.EmailDate;
					}
					return _EmailDate_W;
				}
			}

			public AggregateParameter DModifiedDate
		    {
				get
		        {
					if(_DModifiedDate_W == null)
	        	    {
						_DModifiedDate_W = TearOff.DModifiedDate;
					}
					return _DModifiedDate_W;
				}
			}

			public AggregateParameter DCreatedDate
		    {
				get
		        {
					if(_DCreatedDate_W == null)
	        	    {
						_DCreatedDate_W = TearOff.DCreatedDate;
					}
					return _DCreatedDate_W;
				}
			}

			private AggregateParameter _PkUserWeeklyPaymentID_W = null;
			private AggregateParameter _FkUserID_W = null;
			private AggregateParameter _IWeekNumber_W = null;
			private AggregateParameter _DWeekStartDate_W = null;
			private AggregateParameter _DWeekEndDate_W = null;
			private AggregateParameter _Salary_W = null;
			private AggregateParameter _PaidByAccountManager_W = null;
			private AggregateParameter _ReceivedByUser_W = null;
			private AggregateParameter _BIsActive_W = null;
			private AggregateParameter _AllowByDepartmentAdmin_W = null;
			private AggregateParameter _EmailDate_W = null;
			private AggregateParameter _DModifiedDate_W = null;
			private AggregateParameter _DCreatedDate_W = null;

			public void AggregateClauseReset()
			{
				_PkUserWeeklyPaymentID_W = null;
				_FkUserID_W = null;
				_IWeekNumber_W = null;
				_DWeekStartDate_W = null;
				_DWeekEndDate_W = null;
				_Salary_W = null;
				_PaidByAccountManager_W = null;
				_ReceivedByUser_W = null;
				_BIsActive_W = null;
				_AllowByDepartmentAdmin_W = null;
				_EmailDate_W = null;
				_DModifiedDate_W = null;
				_DCreatedDate_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblUserWeeklyPaymentsInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.PkUserWeeklyPaymentID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblUserWeeklyPaymentsUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblUserWeeklyPaymentsDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.PkUserWeeklyPaymentID);
			p.SourceColumn = ColumnNames.PkUserWeeklyPaymentID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.PkUserWeeklyPaymentID);
			p.SourceColumn = ColumnNames.PkUserWeeklyPaymentID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FkUserID);
			p.SourceColumn = ColumnNames.FkUserID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IWeekNumber);
			p.SourceColumn = ColumnNames.IWeekNumber;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DWeekStartDate);
			p.SourceColumn = ColumnNames.DWeekStartDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DWeekEndDate);
			p.SourceColumn = ColumnNames.DWeekEndDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Salary);
			p.SourceColumn = ColumnNames.Salary;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PaidByAccountManager);
			p.SourceColumn = ColumnNames.PaidByAccountManager;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ReceivedByUser);
			p.SourceColumn = ColumnNames.ReceivedByUser;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.BIsActive);
			p.SourceColumn = ColumnNames.BIsActive;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AllowByDepartmentAdmin);
			p.SourceColumn = ColumnNames.AllowByDepartmentAdmin;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.EmailDate);
			p.SourceColumn = ColumnNames.EmailDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DModifiedDate);
			p.SourceColumn = ColumnNames.DModifiedDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DCreatedDate);
			p.SourceColumn = ColumnNames.DCreatedDate;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
